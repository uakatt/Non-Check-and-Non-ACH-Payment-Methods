Index: work/src/org/kuali/kfs/fp/batch/service/impl/DisbursementVoucherExtractServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/fp/batch/service/impl/DisbursementVoucherExtractServiceImpl.java	(revision 10957)
+++ work/src/org/kuali/kfs/fp/batch/service/impl/DisbursementVoucherExtractServiceImpl.java	(revision 10958)
@@ -16,7 +16,6 @@
 package org.kuali.kfs.fp.batch.service.impl;
 
 import java.sql.Timestamp;
-import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;
@@ -63,6 +62,7 @@
 import org.kuali.rice.kim.bo.Person;
 import org.kuali.rice.kim.service.PersonService;
 import org.kuali.rice.kns.service.BusinessObjectService;
+import org.kuali.rice.kns.service.DataDictionaryService;
 import org.kuali.rice.kns.service.DateTimeService;
 import org.kuali.rice.kns.service.DocumentService;
 import org.kuali.rice.kns.service.ParameterEvaluator;
@@ -567,7 +567,7 @@
         Collection<DisbursementVoucherDocument> list = new ArrayList<DisbursementVoucherDocument>();
 
         try {
-            Collection<DisbursementVoucherDocument> docs = SpringContext.getBean(FinancialSystemDocumentService.class).findByDocumentHeaderStatusCode(DisbursementVoucherDocument.class, statusCode);
+            Collection<DisbursementVoucherDocument> docs = SpringContext.getBean(FinancialSystemDocumentService.class).findByDocumentHeaderStatusCode(SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName("DV"), statusCode);
             for (DisbursementVoucherDocument element : docs) {
                 String dvdCampusCode = element.getCampusCode();
 
Index: work/src/org/kuali/kfs/fp/dataaccess/impl/DisbursementVoucherDaoOjb.java
===================================================================
--- work/src/org/kuali/kfs/fp/dataaccess/impl/DisbursementVoucherDaoOjb.java	(revision 10957)
+++ work/src/org/kuali/kfs/fp/dataaccess/impl/DisbursementVoucherDaoOjb.java	(revision 10958)
@@ -22,9 +22,9 @@
 import org.kuali.kfs.fp.dataaccess.DisbursementVoucherDao;
 import org.kuali.kfs.fp.document.DisbursementVoucherConstants;
 import org.kuali.kfs.fp.document.DisbursementVoucherDocument;
-import org.kuali.rice.kim.bo.Person;
-import org.kuali.kfs.vnd.businessobject.VendorDetail;
+import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.rice.kns.dao.impl.PlatformAwareDaoBaseOjb;
+import org.kuali.rice.kns.service.DataDictionaryService;
 
 public class DisbursementVoucherDaoOjb extends PlatformAwareDaoBaseOjb implements DisbursementVoucherDao {
     private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(DisbursementVoucherDaoOjb.class);
@@ -44,12 +44,13 @@
         Criteria criteria = new Criteria();
         criteria.addEqualTo("documentNumber", fdocNbr);
 
-        return (DisbursementVoucherDocument) getPersistenceBrokerTemplate().getObjectByQuery(new QueryByCriteria(DisbursementVoucherDocument.class, criteria));
+        return (DisbursementVoucherDocument) getPersistenceBrokerTemplate().getObjectByQuery(new QueryByCriteria(getDisbursementVoucherDocumentClass(), criteria));
     }
 
     /**
      * @see org.kuali.kfs.fp.dataaccess.DisbursementVoucherDao#getDocumentsByHeaderStatus(java.lang.String)
      */
+    @SuppressWarnings("unchecked")
     public Collection getDocumentsByHeaderStatus(String statusCode) {
         LOG.debug("getDocumentsByHeaderStatus() started");
 
@@ -57,7 +58,12 @@
         criteria.addEqualTo("documentHeader.financialDocumentStatusCode", statusCode);
         criteria.addEqualTo("disbVchrPaymentMethodCode", DisbursementVoucherConstants.PAYMENT_METHOD_CHECK);
 
-        return getPersistenceBrokerTemplate().getCollectionByQuery(new QueryByCriteria(DisbursementVoucherDocument.class, criteria));
+        return getPersistenceBrokerTemplate().getCollectionByQuery(new QueryByCriteria(getDisbursementVoucherDocumentClass(), criteria));
     }
+    
+    @SuppressWarnings("unchecked")
+    protected Class getDisbursementVoucherDocumentClass() {
+        return SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName("DV");
+    }
 }
 
Index: work/src/org/kuali/kfs/fp/document/validation/impl/DisbursementVoucherBankCodeValidation.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/validation/impl/DisbursementVoucherBankCodeValidation.java	(revision 10957)
+++ work/src/org/kuali/kfs/fp/document/validation/impl/DisbursementVoucherBankCodeValidation.java	(revision 10958)
@@ -15,6 +15,7 @@
  */
 package org.kuali.kfs.fp.document.validation.impl;
 
+import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.fp.document.DisbursementVoucherDocument;
 import org.kuali.kfs.sys.KFSPropertyConstants;
 import org.kuali.kfs.sys.document.AccountingDocument;
@@ -35,8 +36,15 @@
         
         DisbursementVoucherDocument dvDocument = (DisbursementVoucherDocument) accountingDocumentForValidation;
         
-        boolean isValid = BankCodeValidation.validate(dvDocument.getDisbVchrBankCode(), KFSPropertyConstants.DISB_VCHR_BANK_CODE, false, true);
-
+        boolean isValid = BankCodeValidation.validate(dvDocument.getDisbVchrBankCode(), "document." + KFSPropertyConstants.DISB_VCHR_BANK_CODE, dvDocument.getDisbVchrPaymentMethodCode(), false, true);
+        if ( isValid ) {
+            // clear out the bank code on the document if not needed (per the message set by the call above)
+            if ( StringUtils.isNotBlank(dvDocument.getDisbVchrBankCode())
+                    && !BankCodeValidation.doesBankCodeNeedToBePopulated(dvDocument.getDisbVchrPaymentMethodCode()) ) {
+                dvDocument.setBank(null);
+                dvDocument.setDisbVchrBankCode(null);                
+            }
+        }
         return isValid;
     }
 
Index: work/src/org/kuali/kfs/module/cab/batch/service/impl/BatchExtractServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/cab/batch/service/impl/BatchExtractServiceImpl.java	(revision 10957)
+++ work/src/org/kuali/kfs/module/cab/batch/service/impl/BatchExtractServiceImpl.java	(revision 10958)
@@ -76,6 +76,7 @@
 import org.kuali.kfs.sys.service.impl.KfsParameterConstants;
 import org.kuali.rice.kns.bo.Parameter;
 import org.kuali.rice.kns.service.BusinessObjectService;
+import org.kuali.rice.kns.service.DataDictionaryService;
 import org.kuali.rice.kns.service.DateTimeService;
 import org.kuali.rice.kns.service.ParameterService;
 import org.kuali.rice.kns.util.DateUtils;
@@ -204,7 +205,9 @@
         VendorCreditMemoDocument creditMemoDocument = null;
         Map<String, String> keys = new LinkedHashMap<String, String>();
         keys.put(CabPropertyConstants.DOCUMENT_NUMBER, entry.getDocumentNumber());
-        Collection<VendorCreditMemoDocument> matchingCms = businessObjectService.findMatching(VendorCreditMemoDocument.class, keys);
+        Collection<VendorCreditMemoDocument> matchingCms = businessObjectService.findMatching(
+                SpringContext.getBean(DataDictionaryService.class)
+                        .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.CREDIT_MEMO_DOCUMENT), keys);
         if (matchingCms != null && matchingCms.size() == 1) {
             creditMemoDocument = matchingCms.iterator().next();
         }
@@ -238,8 +241,10 @@
     protected PaymentRequestDocument findPaymentRequestDocument(Entry entry) {
         PaymentRequestDocument paymentRequestDocument = null;
         Map<String, String> keys = new LinkedHashMap<String, String>();
-        keys.put(CabPropertyConstants.DOCUMENT_NUMBER, entry.getDocumentNumber());
-        Collection<PaymentRequestDocument> matchingPreqs = businessObjectService.findMatching(PaymentRequestDocument.class, keys);
+        keys.put(CabPropertyConstants.DOCUMENT_NUMBER, entry.getDocumentNumber());        
+        Collection<PaymentRequestDocument> matchingPreqs = businessObjectService.findMatching(
+                SpringContext.getBean(DataDictionaryService.class)
+                        .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT), keys);
         if (matchingPreqs != null && matchingPreqs.size() == 1) {
             paymentRequestDocument = matchingPreqs.iterator().next();
         }
@@ -665,7 +670,9 @@
                 Map<String, String> fieldValues = new HashMap<String, String>();
                 fieldValues.put(CabPropertyConstants.GeneralLedgerEntry.DOCUMENT_NUMBER, entry.getDocumentNumber());
                 // check if vendor credit memo, then include as FP line
-                Collection<VendorCreditMemoDocument> matchingCreditMemos = businessObjectService.findMatching(VendorCreditMemoDocument.class, fieldValues);
+                Collection<VendorCreditMemoDocument> matchingCreditMemos = businessObjectService.findMatching(
+                        SpringContext.getBean(DataDictionaryService.class)
+                                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.CREDIT_MEMO_DOCUMENT), fieldValues);
                 for (VendorCreditMemoDocument creditMemoDocument : matchingCreditMemos) {
                     if (creditMemoDocument.getPurchaseOrderIdentifier() == null) {
                         fpLines.add(entry);
Index: work/src/org/kuali/kfs/module/cab/businessobject/PurchasingAccountsPayableDocument.java
===================================================================
--- work/src/org/kuali/kfs/module/cab/businessobject/PurchasingAccountsPayableDocument.java	(revision 10957)
+++ work/src/org/kuali/kfs/module/cab/businessobject/PurchasingAccountsPayableDocument.java	(revision 10958)
@@ -24,6 +24,7 @@
 import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.module.cab.CabConstants;
 import org.kuali.kfs.module.cab.CabPropertyConstants;
+import org.kuali.kfs.module.purap.PurapConstants;
 import org.kuali.kfs.module.purap.PurapPropertyConstants;
 import org.kuali.kfs.module.purap.businessobject.CreditMemoStatus;
 import org.kuali.kfs.module.purap.businessobject.PaymentRequestStatus;
@@ -35,6 +36,7 @@
 import org.kuali.rice.kew.service.impl.KEWModuleService;
 import org.kuali.rice.kns.bo.PersistableBusinessObjectBase;
 import org.kuali.rice.kns.service.BusinessObjectService;
+import org.kuali.rice.kns.service.DataDictionaryService;
 import org.kuali.rice.kns.util.ObjectUtils;
 import org.kuali.rice.kns.util.TypedArrayList;
 
@@ -300,7 +302,8 @@
 
             if (CabConstants.PREQ.equals(this.documentTypeCode)) {
 
-                PaymentRequestDocument paymentRequestDocument = (PaymentRequestDocument) SpringContext.getBean(BusinessObjectService.class).findByPrimaryKey(PaymentRequestDocument.class, objectKeys);
+                PaymentRequestDocument paymentRequestDocument = (PaymentRequestDocument) SpringContext.getBean(BusinessObjectService.class).findByPrimaryKey(SpringContext.getBean(DataDictionaryService.class)
+                        .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT), objectKeys);
                 if (ObjectUtils.isNotNull(paymentRequestDocument)) {
                     statusCode = paymentRequestDocument.getStatusCode();
 
@@ -313,7 +316,8 @@
                 }
             }
             else {
-                VendorCreditMemoDocument vendorCreditMemoDocument = (VendorCreditMemoDocument) SpringContext.getBean(BusinessObjectService.class).findByPrimaryKey(VendorCreditMemoDocument.class, objectKeys);
+                VendorCreditMemoDocument vendorCreditMemoDocument = (VendorCreditMemoDocument) SpringContext.getBean(BusinessObjectService.class).findByPrimaryKey(SpringContext.getBean(DataDictionaryService.class)
+                        .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.CREDIT_MEMO_DOCUMENT), objectKeys);
                 if (ObjectUtils.isNotNull(vendorCreditMemoDocument)) {
                     statusCode = vendorCreditMemoDocument.getStatusCode();
 
Index: work/src/org/kuali/kfs/module/purap/businessobject/PaymentRequestView.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/businessobject/PaymentRequestView.java	(revision 10957)
+++ work/src/org/kuali/kfs/module/purap/businessobject/PaymentRequestView.java	(revision 10958)
@@ -1,187 +1,186 @@
-/*
- * Copyright 2007 The Kuali Foundation
- * 
- * Licensed under the Educational Community License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.opensource.org/licenses/ecl2.php
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.kuali.kfs.module.purap.businessobject;
-
-import java.sql.Date;
-import java.sql.Timestamp;
-import java.util.List;
-
-import org.apache.commons.lang.StringUtils;
-import org.kuali.kfs.module.purap.PurapPropertyConstants;
-import org.kuali.kfs.module.purap.document.PaymentRequestDocument;
-import org.kuali.kfs.sys.KFSConstants;
-import org.kuali.kfs.sys.businessobject.FinancialSystemDocumentHeader;
-import org.kuali.kfs.sys.context.SpringContext;
-import org.kuali.rice.kns.bo.Note;
-import org.kuali.rice.kns.service.DataDictionaryService;
-import org.kuali.rice.kns.util.ObjectUtils;
-import org.kuali.rice.kns.web.format.CurrencyFormatter;
-import org.kuali.rice.kns.web.format.DateFormatter;
-
-/**
- * Payment Request View Business Object.
- */
-public class PaymentRequestView extends AbstractRelatedView {
-
-    private String invoiceNumber;
-    private Integer purchaseOrderIdentifier;
-    private String statusCode;
-    private boolean paymentHoldIndicator;
-    private boolean paymentRequestedCancelIndicator;
-    private String vendorName;
-    private String vendorCustomerNumber;
-    private Date paymentRequestPayDate;
-    private Timestamp paymentExtractedTimestamp;
-    private Timestamp paymentPaidTimestamp;
-    
-    // REFERENCE OBJECTS
-    private Status status;
-    private FinancialSystemDocumentHeader documentHeader;
-
-
-    // GETTERS & SETTERS
-    public Object getTotalAmount() {
-        return (new CurrencyFormatter()).format(documentHeader.getFinancialDocumentTotalAmount());
-    }
-
-    public String getInvoiceNumber() {
-        return invoiceNumber;
-    }
-
-    public void setInvoiceNumber(String invoiceNumber) {
-        this.invoiceNumber = invoiceNumber;
-    }
-
-    public Timestamp getPaymentExtractedTimestamp() {
-        return paymentExtractedTimestamp;
-    }
-
-    public void setPaymentExtractedTimestamp(Timestamp paymentExtractedTimestamp) {
-        this.paymentExtractedTimestamp = paymentExtractedTimestamp;
-    }
-
-    public boolean isPaymentHoldIndicator() {
-        return paymentHoldIndicator;
-    }
-
-    public void setPaymentHoldIndicator(boolean paymentHoldIndicator) {
-        this.paymentHoldIndicator = paymentHoldIndicator;
-    }
-        
-    public Timestamp getPaymentPaidTimestamp() {
-        return paymentPaidTimestamp;
-    }
-
-    public void setPaymentPaidTimestamp(Timestamp paymentPaidTimestamp) {
-        this.paymentPaidTimestamp = paymentPaidTimestamp;
-    }
-
-    public boolean isPaymentRequestedCancelIndicator() {
-        return paymentRequestedCancelIndicator;
-    }
-
-    public void setPaymentRequestedCancelIndicator(boolean paymentRequestedCancelIndicator) {
-        this.paymentRequestedCancelIndicator = paymentRequestedCancelIndicator;
-    }
-
-    public Object getPaymentRequestPayDate() {
-        return new DateFormatter().format(paymentRequestPayDate);
-    }
-
-    public void setPaymentRequestPayDate(Date paymentRequestPayDate) {
-        this.paymentRequestPayDate = paymentRequestPayDate;
-    }
-
-    public Integer getPurchaseOrderIdentifier() {
-        return purchaseOrderIdentifier;
-    }
-
-    public void setPurchaseOrderIdentifier(Integer purchaseOrderIdentifier) {
-        this.purchaseOrderIdentifier = purchaseOrderIdentifier;
-    }
-
-    public String getStatusCode() {
-        return statusCode;
-    }
-
-    public void setStatusCode(String statusCode) {
-        this.statusCode = statusCode;
-    }
-    
-    public Status getStatus() {
-        if (ObjectUtils.isNull(this.status) && StringUtils.isNotEmpty(this.getStatusCode())) {
-            this.refreshReferenceObject(PurapPropertyConstants.STATUS);
-        }
-        return status;
-    }
-
-    public void setStatus(Status status) {
-        this.status = status;
-    }
-
-    public String getVendorCustomerNumber() {
-        return vendorCustomerNumber;
-    }
-
-    public void setVendorCustomerNumber(String vendorCustomerNumber) {
-        this.vendorCustomerNumber = vendorCustomerNumber;
-    }
-
-    public String getVendorName() {
-        return vendorName;
-    }
-
-    public void setVendorName(String vendorName) {
-        this.vendorName = vendorName;
-    }
-    
-    /**
-     * @return workflow document type for the PaymentRequestDocument
-     */
-    public String getDocumentType() {
-        return KFSConstants.FinancialDocumentTypeCodes.PAYMENT_REQUEST;
-    }
-
-    /**
-     * The next three methods are overridden but shouldnt be! If they arent overridden, they dont show up in the tag, not sure why
-     * at this point! (AAP)
-     */
-    @Override
-    public Integer getPurapDocumentIdentifier() {
-        return super.getPurapDocumentIdentifier();
-    }
-
-    @Override
-    public String getDocumentIdentifierString() {
-        return super.getDocumentIdentifierString();
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.businessobject.AbstractRelatedView#getNotes()
-     */
-    @Override
-    public List<Note> getNotes() {
-        return super.getNotes();
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.businessobject.AbstractRelatedView#getUrl()
-     */
-    @Override
-    public String getUrl() {
-        return super.getUrl();
-    }
-}
+/*
+ * Copyright 2007 The Kuali Foundation
+ * 
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl2.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.kfs.module.purap.businessobject;
+
+import java.sql.Date;
+import java.sql.Timestamp;
+import java.util.List;
+
+import org.apache.commons.lang.StringUtils;
+import org.kuali.kfs.module.purap.PurapPropertyConstants;
+import org.kuali.kfs.module.purap.document.PaymentRequestDocument;
+import org.kuali.kfs.sys.businessobject.FinancialSystemDocumentHeader;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kns.bo.Note;
+import org.kuali.rice.kns.service.DataDictionaryService;
+import org.kuali.rice.kns.util.ObjectUtils;
+import org.kuali.rice.kns.web.format.CurrencyFormatter;
+import org.kuali.rice.kns.web.format.DateFormatter;
+
+/**
+ * Payment Request View Business Object.
+ */
+public class PaymentRequestView extends AbstractRelatedView {
+
+    private String invoiceNumber;
+    private Integer purchaseOrderIdentifier;
+    private String statusCode;
+    private boolean paymentHoldIndicator;
+    private boolean paymentRequestedCancelIndicator;
+    private String vendorName;
+    private String vendorCustomerNumber;
+    private Date paymentRequestPayDate;
+    private Timestamp paymentExtractedTimestamp;
+    private Timestamp paymentPaidTimestamp;
+    
+    // REFERENCE OBJECTS
+    private Status status;
+    private FinancialSystemDocumentHeader documentHeader;
+
+
+    // GETTERS & SETTERS
+    public Object getTotalAmount() {
+        return (new CurrencyFormatter()).format(documentHeader.getFinancialDocumentTotalAmount());
+    }
+
+    public String getInvoiceNumber() {
+        return invoiceNumber;
+    }
+
+    public void setInvoiceNumber(String invoiceNumber) {
+        this.invoiceNumber = invoiceNumber;
+    }
+
+    public Timestamp getPaymentExtractedTimestamp() {
+        return paymentExtractedTimestamp;
+    }
+
+    public void setPaymentExtractedTimestamp(Timestamp paymentExtractedTimestamp) {
+        this.paymentExtractedTimestamp = paymentExtractedTimestamp;
+    }
+
+    public boolean isPaymentHoldIndicator() {
+        return paymentHoldIndicator;
+    }
+
+    public void setPaymentHoldIndicator(boolean paymentHoldIndicator) {
+        this.paymentHoldIndicator = paymentHoldIndicator;
+    }
+        
+    public Timestamp getPaymentPaidTimestamp() {
+        return paymentPaidTimestamp;
+    }
+
+    public void setPaymentPaidTimestamp(Timestamp paymentPaidTimestamp) {
+        this.paymentPaidTimestamp = paymentPaidTimestamp;
+    }
+
+    public boolean isPaymentRequestedCancelIndicator() {
+        return paymentRequestedCancelIndicator;
+    }
+
+    public void setPaymentRequestedCancelIndicator(boolean paymentRequestedCancelIndicator) {
+        this.paymentRequestedCancelIndicator = paymentRequestedCancelIndicator;
+    }
+
+    public Object getPaymentRequestPayDate() {
+        return new DateFormatter().format(paymentRequestPayDate);
+    }
+
+    public void setPaymentRequestPayDate(Date paymentRequestPayDate) {
+        this.paymentRequestPayDate = paymentRequestPayDate;
+    }
+
+    public Integer getPurchaseOrderIdentifier() {
+        return purchaseOrderIdentifier;
+    }
+
+    public void setPurchaseOrderIdentifier(Integer purchaseOrderIdentifier) {
+        this.purchaseOrderIdentifier = purchaseOrderIdentifier;
+    }
+
+    public String getStatusCode() {
+        return statusCode;
+    }
+
+    public void setStatusCode(String statusCode) {
+        this.statusCode = statusCode;
+    }
+    
+    public Status getStatus() {
+        if (ObjectUtils.isNull(this.status) && StringUtils.isNotEmpty(this.getStatusCode())) {
+            this.refreshReferenceObject(PurapPropertyConstants.STATUS);
+        }
+        return status;
+    }
+
+    public void setStatus(Status status) {
+        this.status = status;
+    }
+
+    public String getVendorCustomerNumber() {
+        return vendorCustomerNumber;
+    }
+
+    public void setVendorCustomerNumber(String vendorCustomerNumber) {
+        this.vendorCustomerNumber = vendorCustomerNumber;
+    }
+
+    public String getVendorName() {
+        return vendorName;
+    }
+
+    public void setVendorName(String vendorName) {
+        this.vendorName = vendorName;
+    }
+    
+    /**
+     * @return workflow document type for the PaymentRequestDocument
+     */
+    public String getDocumentType() {
+        return SpringContext.getBean(DataDictionaryService.class).getDocumentTypeNameByClass(PaymentRequestDocument.class);
+    }
+
+    /**
+     * The next three methods are overridden but shouldnt be! If they arent overridden, they dont show up in the tag, not sure why
+     * at this point! (AAP)
+     */
+    @Override
+    public Integer getPurapDocumentIdentifier() {
+        return super.getPurapDocumentIdentifier();
+    }
+
+    @Override
+    public String getDocumentIdentifierString() {
+        return super.getDocumentIdentifierString();
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.businessobject.AbstractRelatedView#getNotes()
+     */
+    @Override
+    public List<Note> getNotes() {
+        return super.getNotes();
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.businessobject.AbstractRelatedView#getUrl()
+     */
+    @Override
+    public String getUrl() {
+        return super.getUrl();
+    }
+}
Index: work/src/org/kuali/kfs/module/purap/businessobject/CreditMemoView.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/businessobject/CreditMemoView.java	(revision 10957)
+++ work/src/org/kuali/kfs/module/purap/businessobject/CreditMemoView.java	(revision 10958)
@@ -1,177 +1,179 @@
-/*
- * Copyright 2007 The Kuali Foundation
- * 
- * Licensed under the Educational Community License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.opensource.org/licenses/ecl2.php
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.kuali.kfs.module.purap.businessobject;
-
-import java.sql.Timestamp;
-import java.util.List;
-
-import org.apache.commons.lang.StringUtils;
-import org.kuali.kfs.module.purap.PurapPropertyConstants;
-import org.kuali.kfs.sys.KFSConstants;
-import org.kuali.kfs.sys.businessobject.FinancialSystemDocumentHeader;
-import org.kuali.rice.kns.bo.Note;
-import org.kuali.rice.kns.util.ObjectUtils;
-import org.kuali.rice.kns.web.format.CurrencyFormatter;
-import org.kuali.rice.kns.web.format.DateFormatter;
-
-
-/**
- * Credit Memo View Business Object.
- */
-public class CreditMemoView extends AbstractRelatedView {
-    private String creditMemoNumber;
-    private Integer paymentRequestIdentifier;
-    private Integer purchaseOrderIdentifier;
-    private String creditMemoStatusCode;
-    private boolean creditHoldIndicator;
-    private String vendorCustomerNumber;
-    private Timestamp accountsPayableApprovalTimestamp;
-    private Timestamp creditMemoExtractedTimestamp;
-    private Timestamp creditMemoPaidTimestamp;
-    private String vendorName;
-    
-    // REFERENCE OBJECTS
-    private Status status;
-    private FinancialSystemDocumentHeader documentHeader;
-
-
-    // GETTERS & SETTERS
-    public Object getTotalAmount() {
-        return (new CurrencyFormatter()).format(documentHeader.getFinancialDocumentTotalAmount());
-    }
-
-    public Object getAccountsPayableApprovalTimestamp() {
-        return (new DateFormatter()).format(accountsPayableApprovalTimestamp);
-    }
-
-    public void setAccountsPayableApprovalTimestamp(Timestamp accountsPayableApprovalTimestamp) {
-        this.accountsPayableApprovalTimestamp = accountsPayableApprovalTimestamp;
-    }
-
-    public boolean isCreditHoldIndicator() {
-        return creditHoldIndicator;
-    }
-
-    public void setCreditHoldIndicator(boolean creditHoldIndicator) {
-        this.creditHoldIndicator = creditHoldIndicator;
-    }
-
-    public Timestamp getCreditMemoExtractedTimestamp() {
-        return creditMemoExtractedTimestamp;
-    }
-
-    public void setCreditMemoExtractedTimestamp(Timestamp creditMemoExtractedTimestamp) {
-        this.creditMemoExtractedTimestamp = creditMemoExtractedTimestamp;
-    }
-
-    public String getCreditMemoNumber() {
-        return creditMemoNumber;
-    }
-
-    public void setCreditMemoNumber(String creditMemoNumber) {
-        this.creditMemoNumber = creditMemoNumber;
-    }
-
-    public Timestamp getCreditMemoPaidTimestamp() {
-        return creditMemoPaidTimestamp;
-    }
-
-    public void setCreditMemoPaidTimestamp(Timestamp creditMemoPaidTimestamp) {
-        this.creditMemoPaidTimestamp = creditMemoPaidTimestamp;
-    }
-
-    public String getCreditMemoStatusCode() {
-        return creditMemoStatusCode;
-    }
-
-    public void setCreditMemoStatusCode(String creditMemoStatusCode) {
-        this.creditMemoStatusCode = creditMemoStatusCode;
-    }
-    
-    public Status getStatus() {
-        if (ObjectUtils.isNull(this.status) && StringUtils.isNotEmpty(this.getCreditMemoStatusCode())) {
-            this.refreshReferenceObject(PurapPropertyConstants.STATUS);
-        }
-        return status;
-    }
-    
-    public void setStatus(Status status) {
-        this.status = status;
-    }    
-
-    public Integer getPaymentRequestIdentifier() {
-        return paymentRequestIdentifier;
-    }
-
-    public void setPaymentRequestIdentifier(Integer paymentRequestIdentifier) {
-        this.paymentRequestIdentifier = paymentRequestIdentifier;
-    }
-
-    public Integer getPurchaseOrderIdentifier() {
-        return purchaseOrderIdentifier;
-    }
-
-    public void setPurchaseOrderIdentifier(Integer purchaseOrderIdentifier) {
-        this.purchaseOrderIdentifier = purchaseOrderIdentifier;
-    }
-
-    public String getVendorCustomerNumber() {
-        return vendorCustomerNumber;
-    }
-
-    public void setVendorCustomerNumber(String vendorCustomerNumber) {
-        this.vendorCustomerNumber = vendorCustomerNumber;
-    }
-
-    public String getVendorName() {
-        return vendorName;
-    }
-
-    public void setVendorName(String vendorName) {
-        this.vendorName = vendorName;
-    }
-    
-    /**
-     * @return workflow document type for the VendorCreditMemoDocument
-     */
-    public String getDocumentType() {
-        return KFSConstants.FinancialDocumentTypeCodes.VENDOR_CREDIT_MEMO;
-    }
-
-    /**
-     * The next three methods are overridden but shouldnt be! If they arent overridden, they dont show up in the tag, not sure why
-     * at this point! (AAP)
-     */
-    @Override
-    public Integer getPurapDocumentIdentifier() {
-        return super.getPurapDocumentIdentifier();
-    }
-
-    @Override
-    public String getDocumentIdentifierString() {
-        return super.getDocumentIdentifierString();
-    }
-
-    @Override
-    public List<Note> getNotes() {
-        return super.getNotes();
-    }
-
-    @Override
-    public String getUrl() {
-        return super.getUrl();
-    }
-}
+/*
+ * Copyright 2007 The Kuali Foundation
+ * 
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl2.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.kfs.module.purap.businessobject;
+
+import java.sql.Timestamp;
+import java.util.List;
+
+import org.apache.commons.lang.StringUtils;
+import org.kuali.kfs.module.purap.PurapPropertyConstants;
+import org.kuali.kfs.module.purap.document.VendorCreditMemoDocument;
+import org.kuali.kfs.sys.businessobject.FinancialSystemDocumentHeader;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kns.bo.Note;
+import org.kuali.rice.kns.service.DataDictionaryService;
+import org.kuali.rice.kns.util.ObjectUtils;
+import org.kuali.rice.kns.web.format.CurrencyFormatter;
+import org.kuali.rice.kns.web.format.DateFormatter;
+
+
+/**
+ * Credit Memo View Business Object.
+ */
+public class CreditMemoView extends AbstractRelatedView {
+    private String creditMemoNumber;
+    private Integer paymentRequestIdentifier;
+    private Integer purchaseOrderIdentifier;
+    private String creditMemoStatusCode;
+    private boolean creditHoldIndicator;
+    private String vendorCustomerNumber;
+    private Timestamp accountsPayableApprovalTimestamp;
+    private Timestamp creditMemoExtractedTimestamp;
+    private Timestamp creditMemoPaidTimestamp;
+    private String vendorName;
+    
+    // REFERENCE OBJECTS
+    private Status status;
+    private FinancialSystemDocumentHeader documentHeader;
+
+
+    // GETTERS & SETTERS
+    public Object getTotalAmount() {
+        return (new CurrencyFormatter()).format(documentHeader.getFinancialDocumentTotalAmount());
+    }
+
+    public Object getAccountsPayableApprovalTimestamp() {
+        return (new DateFormatter()).format(accountsPayableApprovalTimestamp);
+    }
+
+    public void setAccountsPayableApprovalTimestamp(Timestamp accountsPayableApprovalTimestamp) {
+        this.accountsPayableApprovalTimestamp = accountsPayableApprovalTimestamp;
+    }
+
+    public boolean isCreditHoldIndicator() {
+        return creditHoldIndicator;
+    }
+
+    public void setCreditHoldIndicator(boolean creditHoldIndicator) {
+        this.creditHoldIndicator = creditHoldIndicator;
+    }
+
+    public Timestamp getCreditMemoExtractedTimestamp() {
+        return creditMemoExtractedTimestamp;
+    }
+
+    public void setCreditMemoExtractedTimestamp(Timestamp creditMemoExtractedTimestamp) {
+        this.creditMemoExtractedTimestamp = creditMemoExtractedTimestamp;
+    }
+
+    public String getCreditMemoNumber() {
+        return creditMemoNumber;
+    }
+
+    public void setCreditMemoNumber(String creditMemoNumber) {
+        this.creditMemoNumber = creditMemoNumber;
+    }
+
+    public Timestamp getCreditMemoPaidTimestamp() {
+        return creditMemoPaidTimestamp;
+    }
+
+    public void setCreditMemoPaidTimestamp(Timestamp creditMemoPaidTimestamp) {
+        this.creditMemoPaidTimestamp = creditMemoPaidTimestamp;
+    }
+
+    public String getCreditMemoStatusCode() {
+        return creditMemoStatusCode;
+    }
+
+    public void setCreditMemoStatusCode(String creditMemoStatusCode) {
+        this.creditMemoStatusCode = creditMemoStatusCode;
+    }
+    
+    public Status getStatus() {
+        if (ObjectUtils.isNull(this.status) && StringUtils.isNotEmpty(this.getCreditMemoStatusCode())) {
+            this.refreshReferenceObject(PurapPropertyConstants.STATUS);
+        }
+        return status;
+    }
+    
+    public void setStatus(Status status) {
+        this.status = status;
+    }    
+
+    public Integer getPaymentRequestIdentifier() {
+        return paymentRequestIdentifier;
+    }
+
+    public void setPaymentRequestIdentifier(Integer paymentRequestIdentifier) {
+        this.paymentRequestIdentifier = paymentRequestIdentifier;
+    }
+
+    public Integer getPurchaseOrderIdentifier() {
+        return purchaseOrderIdentifier;
+    }
+
+    public void setPurchaseOrderIdentifier(Integer purchaseOrderIdentifier) {
+        this.purchaseOrderIdentifier = purchaseOrderIdentifier;
+    }
+
+    public String getVendorCustomerNumber() {
+        return vendorCustomerNumber;
+    }
+
+    public void setVendorCustomerNumber(String vendorCustomerNumber) {
+        this.vendorCustomerNumber = vendorCustomerNumber;
+    }
+
+    public String getVendorName() {
+        return vendorName;
+    }
+
+    public void setVendorName(String vendorName) {
+        this.vendorName = vendorName;
+    }
+    
+    /**
+     * @return workflow document type for the VendorCreditMemoDocument
+     */
+    public String getDocumentType() {
+        return SpringContext.getBean(DataDictionaryService.class).getDocumentTypeNameByClass(VendorCreditMemoDocument.class);
+    }
+
+    /**
+     * The next three methods are overridden but shouldnt be! If they arent overridden, they dont show up in the tag, not sure why
+     * at this point! (AAP)
+     */
+    @Override
+    public Integer getPurapDocumentIdentifier() {
+        return super.getPurapDocumentIdentifier();
+    }
+
+    @Override
+    public String getDocumentIdentifierString() {
+        return super.getDocumentIdentifierString();
+    }
+
+    @Override
+    public List<Note> getNotes() {
+        return super.getNotes();
+    }
+
+    @Override
+    public String getUrl() {
+        return super.getUrl();
+    }
+}
Index: work/src/org/kuali/kfs/module/purap/dataaccess/impl/ElectronicInvoicingDaoOjb.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/dataaccess/impl/ElectronicInvoicingDaoOjb.java	(revision 10957)
+++ work/src/org/kuali/kfs/module/purap/dataaccess/impl/ElectronicInvoicingDaoOjb.java	(revision 10958)
@@ -17,7 +17,9 @@
 import org.kuali.kfs.module.purap.dataaccess.ElectronicInvoicingDao;
 import org.kuali.kfs.module.purap.document.ElectronicInvoiceRejectDocument;
 import org.kuali.kfs.module.purap.document.PaymentRequestDocument;
+import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.rice.kns.dao.impl.PlatformAwareDaoBaseOjb;
+import org.kuali.rice.kns.service.DataDictionaryService;
 
 public class ElectronicInvoicingDaoOjb extends PlatformAwareDaoBaseOjb implements ElectronicInvoicingDao {
 
@@ -57,7 +59,8 @@
         Criteria criteria = new Criteria();
         criteria.addEqualTo("status.code", PurapConstants.PaymentRequestStatuses.PENDING_E_INVOICE);
         criteria.addEqualTo("isElectronicInvoice", Boolean.TRUE);
-        List invoices = (List) getPersistenceBrokerTemplate().getCollectionByQuery(new QueryByCriteria(PaymentRequestDocument.class, criteria));
+        List invoices = (List) getPersistenceBrokerTemplate().getCollectionByQuery(new QueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT), criteria));
         for (Iterator iter = invoices.iterator(); iter.hasNext();) {
             PaymentRequestDocument p = (PaymentRequestDocument) iter.next();
         }
Index: work/src/org/kuali/kfs/module/purap/service/impl/ElectronicInvoiceHelperServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/service/impl/ElectronicInvoiceHelperServiceImpl.java	(revision 10957)
+++ work/src/org/kuali/kfs/module/purap/service/impl/ElectronicInvoiceHelperServiceImpl.java	(revision 10958)
@@ -123,18 +123,18 @@
     protected final String UNKNOWN_DUNS_IDENTIFIER = "Unknown";
     protected final String INVOICE_FILE_MIME_TYPE = "text/xml";  
     
-    private StringBuffer emailTextErrorList;
+    protected StringBuffer emailTextErrorList;
     
-    private ElectronicInvoiceInputFileType electronicInvoiceInputFileType;
-    private MailService mailService;
-    private ElectronicInvoiceMatchingService matchingService; 
-    private ElectronicInvoicingDao electronicInvoicingDao;
-    private BatchInputFileService batchInputFileService;
-    private VendorService vendorService;
-    private PurchaseOrderService purchaseOrderService;
-    private PaymentRequestService paymentRequestService;
-    private KualiConfigurationService kualiConfigurationService;
-    private DateTimeService dateTimeService;
+    protected ElectronicInvoiceInputFileType electronicInvoiceInputFileType;
+    protected MailService mailService;
+    protected ElectronicInvoiceMatchingService matchingService; 
+    protected ElectronicInvoicingDao electronicInvoicingDao;
+    protected BatchInputFileService batchInputFileService;
+    protected VendorService vendorService;
+    protected PurchaseOrderService purchaseOrderService;
+    protected PaymentRequestService paymentRequestService;
+    protected KualiConfigurationService kualiConfigurationService;
+    protected DateTimeService dateTimeService;
     
     public ElectronicInvoiceLoad loadElectronicInvoices() {
 
@@ -1108,7 +1108,7 @@
         
         //Copied from PaymentRequestServiceImpl.populatePaymentRequest()
         //set bank code to default bank code in the system parameter
-        Bank defaultBank = SpringContext.getBean(BankService.class).getDefaultBankByDocType(preqDoc.getClass());
+        Bank defaultBank = SpringContext.getBean(BankService.class).getDefaultBankByDocType(PaymentRequestDocument.class);
         if (defaultBank != null) {
             preqDoc.setBankCode(defaultBank.getBankCode());
             preqDoc.setBank(defaultBank);
Index: work/src/org/kuali/kfs/module/purap/service/impl/PurapGeneralLedgerServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/service/impl/PurapGeneralLedgerServiceImpl.java	(revision 10957)
+++ work/src/org/kuali/kfs/module/purap/service/impl/PurapGeneralLedgerServiceImpl.java	(revision 10958)
@@ -414,9 +414,13 @@
             else if (CANCEL_PAYMENT_REQUEST.equals(processType)) {
                 SpringContext.getBean(PurapAccountRevisionService.class).cancelPaymentRequestAccountRevisions(preq.getItems(), preq.getPostingYearFromPendingGLEntries(), preq.getPostingPeriodCodeFromPendingGLEntries());
             }
+
+            // MOD-PA2000-01 
+            // generate any document level GL entries (offsets or fee charges)
+            // we would only want to do this when booking the actuals (not the encumbrances)
+            preq.generateDocumentGeneralLedgerPendingEntries(sequenceHelper);
         }
 
-
         // Manually save GL entries for Payment Request and encumbrances
         saveGLEntries(preq.getGeneralLedgerPendingEntries());
 
@@ -503,6 +507,11 @@
 
             }
 
+            // MOD-PA2000-01 
+            // generate any document level GL entries (offsets or fee charges)
+            // we would only want to do this when booking the actuals (not the encumbrances)
+            cm.generateDocumentGeneralLedgerPendingEntries(sequenceHelper);
+            
             // manually save cm account change tables (CAMS needs this)
             if (!isCancel) {
                 SpringContext.getBean(PurapAccountRevisionService.class).saveCreditMemoAccountRevisions(cm.getItems(), cm.getPostingYearFromPendingGLEntries(), cm.getPostingPeriodCodeFromPendingGLEntries());
Index: work/src/org/kuali/kfs/module/purap/document/dataaccess/impl/PaymentRequestDaoOjb.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/dataaccess/impl/PaymentRequestDaoOjb.java	(revision 10957)
+++ work/src/org/kuali/kfs/module/purap/document/dataaccess/impl/PaymentRequestDaoOjb.java	(revision 10958)
@@ -41,6 +41,7 @@
 import org.kuali.rice.kew.exception.WorkflowException;
 import org.kuali.rice.kns.dao.impl.PlatformAwareDaoBaseOjb;
 import org.kuali.rice.kns.exception.InfrastructureException;
+import org.kuali.rice.kns.service.DataDictionaryService;
 import org.kuali.rice.kns.service.DateTimeService;
 import org.kuali.rice.kns.service.DocumentService;
 import org.kuali.rice.kns.service.KualiConfigurationService;
@@ -136,7 +137,8 @@
             criteria.addAndCriteria(c1);
         }
 
-        return getPersistenceBrokerTemplate().getCollectionByQuery(new QueryByCriteria(PaymentRequestDocument.class, criteria));
+        return getPersistenceBrokerTemplate().getCollectionByQuery(new QueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT), criteria));
     }
 
     /**
@@ -154,7 +156,8 @@
         criteria.addIsNull("extractedTimestamp");
         criteria.addEqualTo("immediatePaymentIndicator", Boolean.TRUE);
 
-        return getPersistenceBrokerTemplate().getCollectionByQuery(new QueryByCriteria(PaymentRequestDocument.class, criteria));
+        return getPersistenceBrokerTemplate().getCollectionByQuery(new QueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT), criteria));
     }
 
     /**
@@ -192,7 +195,8 @@
         criteria.addEqualTo("vendorHeaderGeneratedIdentifier", vendorHeaderGeneratedIdentifier);
         criteria.addEqualTo("vendorDetailAssignedIdentifier", vendorDetailAssignedIdentifier);
 
-        return getPersistenceBrokerTemplate().getIteratorByQuery(new QueryByCriteria(PaymentRequestDocument.class, criteria));
+        return getPersistenceBrokerTemplate().getIteratorByQuery(new QueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT), criteria));
     }
 
     /**
@@ -226,7 +230,8 @@
         criteria.addEqualTo( "vendorCountryCode", vendor.getVendorCountry() );
         criteria.addLike( "vendorPostalCode", vendor.getVendorPostalCode() + "%" );
 
-        return getPersistenceBrokerTemplate().getCollectionByQuery(new QueryByCriteria(PaymentRequestDocument.class, criteria));
+        return getPersistenceBrokerTemplate().getCollectionByQuery(new QueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT), criteria));
     }
     
     /**
@@ -240,7 +245,8 @@
         criteria.addNotEqualTo("paymentRequestedCancelIndicator", "Y");
         criteria.addIn("status", Arrays.asList(PurapConstants.PaymentRequestStatuses.PREQ_STATUSES_FOR_AUTO_APPROVE));
 
-        Query query = new QueryByCriteria(PaymentRequestDocument.class, criteria);
+        Query query = new QueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT), criteria);
         Iterator<PaymentRequestDocument> documents = (Iterator<PaymentRequestDocument>) getPersistenceBrokerTemplate().getIteratorByQuery(query);
         ArrayList<String> documentHeaderIds = new ArrayList<String>();
         while (documents.hasNext()) {
@@ -250,7 +256,8 @@
 
         if (documentHeaderIds.size() > 0) {
             try {
-                return SpringContext.getBean(DocumentService.class).getDocumentsByListOfDocumentHeaderIds(PaymentRequestDocument.class, documentHeaderIds);
+                return SpringContext.getBean(DocumentService.class).getDocumentsByListOfDocumentHeaderIds(SpringContext.getBean(DataDictionaryService.class)
+                        .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT), documentHeaderIds);
             }
             catch (WorkflowException e) {
                 throw new InfrastructureException("unable to retrieve paymentRequestDocuments", e);
@@ -320,7 +327,8 @@
      */
     protected Iterator<Object[]> getDocumentNumbersOfPaymentRequestByCriteria(Criteria criteria, boolean orderByAscending) {
         LOG.debug("getDocumentNumberOfPaymentRequestByCriteria() started");
-        ReportQueryByCriteria rqbc = new ReportQueryByCriteria(PaymentRequestDocument.class, criteria);
+        ReportQueryByCriteria rqbc = new ReportQueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT), criteria);
         rqbc.setAttributes(new String[] { KFSPropertyConstants.DOCUMENT_NUMBER });
         if (orderByAscending) {
             rqbc.addOrderByAscending(KFSPropertyConstants.DOCUMENT_NUMBER);
@@ -357,7 +365,8 @@
         criteria.addEqualTo("vendorHeaderGeneratedIdentifier", vendorHeaderGeneratedId);
         criteria.addEqualTo("vendorDetailAssignedIdentifier", vendorDetailAssignedId);
         criteria.addEqualTo("invoiceNumber", invoiceNumber);
-        QueryByCriteria qbc = new QueryByCriteria(PaymentRequestDocument.class, criteria);
+        QueryByCriteria qbc = new QueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT), criteria);
         return this.getPaymentRequestsByQueryByCriteria(qbc);
     }
 
@@ -371,7 +380,8 @@
         criteria.addEqualTo("purchaseOrderIdentifier", poId);
         criteria.addEqualTo("vendorInvoiceAmount", vendorInvoiceAmount);
         criteria.addEqualTo("invoiceDate", invoiceDate);
-        QueryByCriteria qbc = new QueryByCriteria(PaymentRequestDocument.class, criteria);
+        QueryByCriteria qbc = new QueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT), criteria);
         return this.getPaymentRequestsByQueryByCriteria(qbc);
     }
 
@@ -383,7 +393,8 @@
         
         criteria.addEqualTo(PurapPropertyConstants.PURCHASE_ORDER_IDENTIFIER, purchaseOrderId);
         criteria.addIn(PurapPropertyConstants.STATUS_CODE, Arrays.asList(PaymentRequestStatuses.STATUSES_POTENTIALLY_ACTIVE));
-        QueryByCriteria qbc = new QueryByCriteria(PaymentRequestDocument.class, criteria);
+        QueryByCriteria qbc = new QueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT), criteria);
         
         Iterator<Object[]> iter = getDocumentNumbersOfPaymentRequestByCriteria(criteria, false);
         while (iter.hasNext()) {
@@ -399,7 +410,8 @@
         criteria.addNotEqualTo("paymentRequestedCancelIndicator", "Y");
         criteria.addEqualTo("statusCode", PurapConstants.PaymentRequestStatuses.AWAITING_RECEIVING_REVIEW);
 
-        Query query = new QueryByCriteria(PaymentRequestDocument.class, criteria);
+        Query query = new QueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT), criteria);
         Iterator<PaymentRequestDocument> documents = (Iterator<PaymentRequestDocument>) getPersistenceBrokerTemplate().getIteratorByQuery(query);
         ArrayList<String> documentHeaderIds = new ArrayList<String>();
         while (documents.hasNext()) {
@@ -409,7 +421,8 @@
 
         if (documentHeaderIds.size() > 0) {
             try {
-                return SpringContext.getBean(DocumentService.class).getDocumentsByListOfDocumentHeaderIds(PaymentRequestDocument.class, documentHeaderIds);
+                return SpringContext.getBean(DocumentService.class).getDocumentsByListOfDocumentHeaderIds(SpringContext.getBean(DataDictionaryService.class)
+                        .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT), documentHeaderIds);
             }
             catch (WorkflowException e) {
                 throw new InfrastructureException("unable to retrieve paymentRequestDocuments", e);
Index: work/src/org/kuali/kfs/module/purap/document/dataaccess/impl/CreditMemoDaoOjb.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/dataaccess/impl/CreditMemoDaoOjb.java	(revision 10957)
+++ work/src/org/kuali/kfs/module/purap/document/dataaccess/impl/CreditMemoDaoOjb.java	(revision 10958)
@@ -34,7 +34,9 @@
 import org.kuali.kfs.module.purap.document.dataaccess.CreditMemoDao;
 import org.kuali.kfs.module.purap.util.VendorGroupingHelper;
 import org.kuali.kfs.sys.KFSPropertyConstants;
+import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.rice.kns.dao.impl.PlatformAwareDaoBaseOjb;
+import org.kuali.rice.kns.service.DataDictionaryService;
 import org.kuali.rice.kns.util.KualiDecimal;
 import org.kuali.rice.kns.util.TransactionalServiceUtils;
 
@@ -42,7 +44,7 @@
  * OJB Implementation of CreditMemoDao. Provides persistence layer methods for the credit memo document.
  */
 public class CreditMemoDaoOjb extends PlatformAwareDaoBaseOjb implements CreditMemoDao {
-    private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(CreditMemoDaoOjb.class);
+    private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(CreditMemoDaoOjb.class);
 
     /**
      * @see org.kuali.kfs.module.purap.document.dataaccess.CreditMemoDao#getCreditMemosToExtract(java.lang.String)
@@ -56,7 +58,8 @@
         criteria.addIsNull("extractedTimestamp");
         criteria.addEqualTo("holdIndicator", Boolean.FALSE);
 
-        return getPersistenceBrokerTemplate().getIteratorByQuery(new QueryByCriteria(VendorCreditMemoDocument.class, criteria));
+        return getPersistenceBrokerTemplate().getIteratorByQuery(new QueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.CREDIT_MEMO_DOCUMENT), criteria));
     }
 
     
@@ -76,7 +79,8 @@
         criteria.addEqualTo( "vendorCountryCode", vendor.getVendorCountry() );
         criteria.addLike( "vendorPostalCode", vendor.getVendorPostalCode() + "%" );
 
-        return getPersistenceBrokerTemplate().getCollectionByQuery(new QueryByCriteria(VendorCreditMemoDocument.class, criteria));
+        return getPersistenceBrokerTemplate().getCollectionByQuery(new QueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.CREDIT_MEMO_DOCUMENT), criteria));
     }
 
 
@@ -98,7 +102,8 @@
         // use the criteria to do a Count against the DB, and return the resulting
         // number. Any positive non-zero result means that a potential duplicate
         // exists and we return true, otherwise, return false.
-        int cmCount = getPersistenceBrokerTemplate().getCount(new QueryByCriteria(VendorCreditMemoDocument.class, criteria));
+        int cmCount = getPersistenceBrokerTemplate().getCount(new QueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.CREDIT_MEMO_DOCUMENT), criteria));
         if (cmCount > 0) {
             return true;
         }
@@ -125,7 +130,8 @@
         // use the criteria to do a Count against the DB, and return the resulting
         // number. Any positive non-zero result means that a potential duplicate
         // exists and we return true, otherwise, return false.
-        int cmCount = getPersistenceBrokerTemplate().getCount(new QueryByCriteria(VendorCreditMemoDocument.class, criteria));
+        int cmCount = getPersistenceBrokerTemplate().getCount(new QueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.CREDIT_MEMO_DOCUMENT), criteria));
         if (cmCount > 0) {
             return true;
         }
@@ -177,7 +183,8 @@
      */
     protected Iterator<Object[]> getDocumentNumbersOfCreditMemoByCriteria(Criteria criteria, boolean orderByAscending) {
         LOG.debug("getDocumentNumberOfCreditMemoByCriteria() started");
-        ReportQueryByCriteria rqbc = new ReportQueryByCriteria(VendorCreditMemoDocument.class, criteria);
+        ReportQueryByCriteria rqbc = new ReportQueryByCriteria(SpringContext.getBean(DataDictionaryService.class)
+                .getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.CREDIT_MEMO_DOCUMENT), criteria);
         rqbc.setAttributes(new String[] { KFSPropertyConstants.DOCUMENT_NUMBER });
         if (orderByAscending) {
             rqbc.addOrderByAscending(KFSPropertyConstants.DOCUMENT_NUMBER);
Index: work/src/org/kuali/kfs/module/purap/document/service/impl/PaymentRequestServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/service/impl/PaymentRequestServiceImpl.java	(revision 10957)
+++ work/src/org/kuali/kfs/module/purap/document/service/impl/PaymentRequestServiceImpl.java	(revision 10958)
@@ -1,5 +1,5 @@
 /*
- * Copyright 2007 The Kuali Foundation
+ * Copyright 2007 The Kuali Foundation
  * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -1268,7 +1268,7 @@
         distributeAccounting(paymentRequestDocument);
 
         // set bank code to default bank code in the system parameter
-        Bank defaultBank = SpringContext.getBean(BankService.class).getDefaultBankByDocType(paymentRequestDocument.getClass());
+        Bank defaultBank = SpringContext.getBean(BankService.class).getDefaultBankByDocType(PaymentRequestDocument.class);
         if (defaultBank != null) {
             paymentRequestDocument.setBankCode(defaultBank.getBankCode());
             paymentRequestDocument.setBank(defaultBank);
Index: work/src/org/kuali/kfs/module/purap/document/service/impl/CreditMemoServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/service/impl/CreditMemoServiceImpl.java	(revision 10957)
+++ work/src/org/kuali/kfs/module/purap/document/service/impl/CreditMemoServiceImpl.java	(revision 10958)
@@ -1,854 +1,854 @@
-/*
- * Copyright 2007 The Kuali Foundation
- * 
- * Licensed under the Educational Community License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.opensource.org/licenses/ecl2.php
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.kuali.kfs.module.purap.document.service.impl;
-
-import java.math.BigDecimal;
-import java.sql.Date;
-import java.sql.Timestamp;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
-import org.kuali.kfs.module.purap.PurapConstants;
-import org.kuali.kfs.module.purap.PurapKeyConstants;
-import org.kuali.kfs.module.purap.PurapParameterConstants;
-import org.kuali.kfs.module.purap.PurapConstants.CreditMemoStatuses;
-import org.kuali.kfs.module.purap.PurapWorkflowConstants.NodeDetails;
-import org.kuali.kfs.module.purap.PurapWorkflowConstants.CreditMemoDocument.NodeDetailEnum;
-import org.kuali.kfs.module.purap.businessobject.CreditMemoAccount;
-import org.kuali.kfs.module.purap.businessobject.CreditMemoItem;
-import org.kuali.kfs.module.purap.businessobject.PaymentRequestItem;
-import org.kuali.kfs.module.purap.businessobject.PurApAccountingLine;
-import org.kuali.kfs.module.purap.businessobject.PurchaseOrderItem;
-import org.kuali.kfs.module.purap.businessobject.PurchasingCapitalAssetItem;
-import org.kuali.kfs.module.purap.document.AccountsPayableDocument;
-import org.kuali.kfs.module.purap.document.PaymentRequestDocument;
-import org.kuali.kfs.module.purap.document.PurchaseOrderDocument;
-import org.kuali.kfs.module.purap.document.PurchasingAccountsPayableDocument;
-import org.kuali.kfs.module.purap.document.VendorCreditMemoDocument;
-import org.kuali.kfs.module.purap.document.dataaccess.CreditMemoDao;
-import org.kuali.kfs.module.purap.document.service.AccountsPayableService;
-import org.kuali.kfs.module.purap.document.service.CreditMemoService;
-import org.kuali.kfs.module.purap.document.service.PaymentRequestService;
-import org.kuali.kfs.module.purap.document.service.PurapService;
-import org.kuali.kfs.module.purap.document.service.PurchaseOrderService;
-import org.kuali.kfs.module.purap.document.validation.event.AttributedContinuePurapEvent;
-import org.kuali.kfs.module.purap.service.PurapAccountingService;
-import org.kuali.kfs.module.purap.service.PurapGeneralLedgerService;
-import org.kuali.kfs.module.purap.util.ExpiredOrClosedAccountEntry;
-import org.kuali.kfs.module.purap.util.VendorGroupingHelper;
-import org.kuali.kfs.sys.businessobject.Bank;
-import org.kuali.kfs.sys.businessobject.SourceAccountingLine;
-import org.kuali.kfs.sys.context.SpringContext;
-import org.kuali.kfs.sys.service.BankService;
-import org.kuali.kfs.vnd.VendorConstants;
-import org.kuali.kfs.vnd.VendorUtils;
-import org.kuali.kfs.vnd.businessobject.VendorAddress;
-import org.kuali.kfs.vnd.businessobject.VendorDetail;
-import org.kuali.kfs.vnd.document.service.VendorService;
-import org.kuali.rice.kew.exception.WorkflowException;
-import org.kuali.rice.kim.bo.Person;
-import org.kuali.rice.kns.bo.DocumentHeader;
-import org.kuali.rice.kns.bo.Note;
-import org.kuali.rice.kns.exception.ValidationException;
-import org.kuali.rice.kns.service.DataDictionaryService;
-import org.kuali.rice.kns.service.DocumentService;
-import org.kuali.rice.kns.service.KualiConfigurationService;
-import org.kuali.rice.kns.service.NoteService;
-import org.kuali.rice.kns.util.GlobalVariables;
-import org.kuali.rice.kns.util.KNSPropertyConstants;
-import org.kuali.rice.kns.util.KualiDecimal;
-import org.kuali.rice.kns.util.ObjectUtils;
-import org.kuali.rice.kns.workflow.service.KualiWorkflowDocument;
-import org.kuali.rice.kns.workflow.service.WorkflowDocumentService;
-import org.springframework.transaction.annotation.Transactional;
-
-/**
- * Provides services to support the creation of a Credit Memo Document.
- */
-@Transactional
-public class CreditMemoServiceImpl implements CreditMemoService {
-    private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(CreditMemoServiceImpl.class);
-
-    private AccountsPayableService accountsPayableService;
-    private CreditMemoDao creditMemoDao;
-    private DataDictionaryService dataDictionaryService;
-    private DocumentService documentService;
-    private KualiConfigurationService kualiConfigurationService;
-    private NoteService noteService;
-    private PaymentRequestService paymentRequestService;
-    private PurapAccountingService purapAccountingService;
-    private PurapGeneralLedgerService purapGeneralLedgerService;
-    private PurapService purapService;
-    private PurchaseOrderService purchaseOrderService;
-    private VendorService vendorService;
-    private WorkflowDocumentService workflowDocumentService;
-    
-
-    public void setAccountsPayableService(AccountsPayableService accountsPayableService) {
-        this.accountsPayableService = accountsPayableService;
-    }
-
-    public void setCreditMemoDao(CreditMemoDao creditMemoDao) {
-        this.creditMemoDao = creditMemoDao;
-    }
-
-    public void setDataDictionaryService(DataDictionaryService dataDictionaryService) {
-        this.dataDictionaryService = dataDictionaryService;
-    }
-
-    public void setDocumentService(DocumentService documentService) {
-        this.documentService = documentService;
-    }
-
-    public void setKualiConfigurationService(KualiConfigurationService kualiConfigurationService) {
-        this.kualiConfigurationService = kualiConfigurationService;
-    }
-
-    public void setNoteService(NoteService noteService) {
-        this.noteService = noteService;
-    }
-
-    public void setPaymentRequestService(PaymentRequestService paymentRequestService) {
-        this.paymentRequestService = paymentRequestService;
-    }
-
-    public void setPurapAccountingService(PurapAccountingService purapAccountingService) {
-        this.purapAccountingService = purapAccountingService;
-    }
-
-    public void setPurapGeneralLedgerService(PurapGeneralLedgerService purapGeneralLedgerService) {
-        this.purapGeneralLedgerService = purapGeneralLedgerService;
-    }
-
-    public void setPurapService(PurapService purapService) {
-        this.purapService = purapService;
-    }
-
-    public void setPurchaseOrderService(PurchaseOrderService purchaseOrderService) {
-        this.purchaseOrderService = purchaseOrderService;
-    }
-
-    public void setVendorService(VendorService vendorService) {
-        this.vendorService = vendorService;
-    }
-
-    public void setWorkflowDocumentService(WorkflowDocumentService workflowDocumentService){
-        this.workflowDocumentService = workflowDocumentService;
-    }
-    
-
-    
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#getCreditMemosToExtract(java.lang.String)
-     */
-    public Iterator<VendorCreditMemoDocument> getCreditMemosToExtract(String chartCode) {
-        LOG.debug("getCreditMemosToExtract() started");
-
-        return creditMemoDao.getCreditMemosToExtract(chartCode);
-    }
-
-    public Collection<VendorCreditMemoDocument> getCreditMemosToExtractByVendor(String chartCode, VendorGroupingHelper vendor ) {
-        LOG.debug("getCreditMemosToExtractByVendor() started");
-
-        return creditMemoDao.getCreditMemosToExtractByVendor(chartCode,vendor);
-    }
-
-    public Set<VendorGroupingHelper> getVendorsOnCreditMemosToExtract(String chartCode) {
-        LOG.debug("getVendorsOnCreditMemosToExtract() started");
-        HashSet<VendorGroupingHelper> vendors = new HashSet<VendorGroupingHelper>();
-        
-        Iterator<VendorCreditMemoDocument> docs = getCreditMemosToExtract(chartCode);
-        while ( docs.hasNext() ) {
-            VendorCreditMemoDocument doc = docs.next();
-            vendors.add( new VendorGroupingHelper( doc ) );
-        }
-        return vendors;
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#creditMemoDuplicateMessages(org.kuali.kfs.module.purap.document.CreditMemoDocument)
-     */
-    public String creditMemoDuplicateMessages(VendorCreditMemoDocument cmDocument) {
-        String duplicateMessage = null;
-
-        String vendorNumber = cmDocument.getVendorNumber();
-        if (StringUtils.isEmpty(vendorNumber)) {
-            PurchasingAccountsPayableDocument sourceDocument = cmDocument.getPurApSourceDocumentIfPossible();
-            if (ObjectUtils.isNotNull(sourceDocument)) {
-                vendorNumber = sourceDocument.getVendorNumber();
-            }
-        }
-
-        if (StringUtils.isNotEmpty(vendorNumber)) {
-            // check for existence of another credit memo with the same vendor and vendor credit memo number
-            if (creditMemoDao.duplicateExists(VendorUtils.getVendorHeaderId(vendorNumber), VendorUtils.getVendorDetailId(vendorNumber), cmDocument.getCreditMemoNumber())) {
-                duplicateMessage = kualiConfigurationService.getPropertyString(PurapKeyConstants.MESSAGE_DUPLICATE_CREDIT_MEMO_VENDOR_NUMBER);
-            }
-
-            // check for existence of another credit memo with the same vendor and credit memo date
-            if (creditMemoDao.duplicateExists(VendorUtils.getVendorHeaderId(vendorNumber), VendorUtils.getVendorDetailId(vendorNumber), cmDocument.getCreditMemoDate(), cmDocument.getCreditMemoAmount())) {
-                duplicateMessage = kualiConfigurationService.getPropertyString(PurapKeyConstants.MESSAGE_DUPLICATE_CREDIT_MEMO_VENDOR_NUMBER_DATE_AMOUNT);
-            }
-        }
-
-        return duplicateMessage;
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#getPOInvoicedItems(org.kuali.kfs.module.purap.document.PurchaseOrderDocument)
-     */
-    public List<PurchaseOrderItem> getPOInvoicedItems(PurchaseOrderDocument poDocument) {
-        List<PurchaseOrderItem> invoicedItems = new ArrayList<PurchaseOrderItem>();
-
-        for (Iterator iter = poDocument.getItems().iterator(); iter.hasNext();) {
-            PurchaseOrderItem poItem = (PurchaseOrderItem) iter.next();
-
-            // only items of type above the line can be considered for being invoiced
-            if (poItem.getItemType().isAdditionalChargeIndicator()) {
-                continue;
-            }
-
-            if (poItem.getItemType().isQuantityBasedGeneralLedgerIndicator() && poItem.getItemInvoicedTotalQuantity().isGreaterThan(KualiDecimal.ZERO)) {
-                invoicedItems.add(poItem);
-            }
-            else {
-                BigDecimal unitPrice = (poItem.getItemUnitPrice() == null ? new BigDecimal(0) : poItem.getItemUnitPrice());
-                if (unitPrice.doubleValue() > poItem.getItemOutstandingEncumberedAmount().doubleValue()) {
-                    invoicedItems.add(poItem);
-                }
-            }
-        }
-
-        return invoicedItems;
-    }
-
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#calculateCreditMemo(org.kuali.kfs.module.purap.document.CreditMemoDocument)
-     */
-    public void calculateCreditMemo(VendorCreditMemoDocument cmDocument) {
-
-        cmDocument.updateExtendedPriceOnItems();
-
-        for (CreditMemoItem item : (List<CreditMemoItem>) cmDocument.getItems()) {
-            // make sure restocking fee is negative
-            if (StringUtils.equals(PurapConstants.ItemTypeCodes.ITEM_TYPE_RESTCK_FEE_CODE, item.getItemTypeCode())) {
-                if (item.getItemUnitPrice() != null) {
-                    item.setExtendedPrice(item.getExtendedPrice().abs().negated());
-                    item.setItemUnitPrice(item.getItemUnitPrice().abs().negate());
-                }
-            }
-        }
-
-        //calculate tax if cm not based on vendor
-        if (cmDocument.isSourceVendor() == false) {
-            purapService.calculateTax(cmDocument);
-        }
-        
-        // proration
-        if (cmDocument.isSourceVendor()) {
-            // no proration on vendor
-            return;
-        }
-
-        for (CreditMemoItem item : (List<CreditMemoItem>) cmDocument.getItems()) {
-
-            // skip above the line
-            if (item.getItemType().isLineItemIndicator()) {
-                continue;
-            }
-
-            if ((item.getSourceAccountingLines().isEmpty()) && (ObjectUtils.isNotNull(item.getExtendedPrice())) && (KualiDecimal.ZERO.compareTo(item.getExtendedPrice()) != 0)) {
-
-                KualiDecimal totalAmount = KualiDecimal.ZERO;
-                List<PurApAccountingLine> distributedAccounts = null;
-                List<SourceAccountingLine> summaryAccounts = null;
-
-                totalAmount = cmDocument.getPurApSourceDocumentIfPossible().getTotalDollarAmount();
-                // this should do nothing on preq which is fine
-                purapAccountingService.updateAccountAmounts(cmDocument.getPurApSourceDocumentIfPossible());
-                summaryAccounts = purapAccountingService.generateSummary(cmDocument.getPurApSourceDocumentIfPossible().getItems());
-                distributedAccounts = purapAccountingService.generateAccountDistributionForProration(summaryAccounts, totalAmount, PurapConstants.PRORATION_SCALE, CreditMemoAccount.class);
-
-                if (CollectionUtils.isNotEmpty(distributedAccounts) && CollectionUtils.isEmpty(item.getSourceAccountingLines())) {
-                    item.setSourceAccountingLines(distributedAccounts);
-                }
-            }
-        }
-        // end proration
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#getCreditMemoByDocumentNumber(java.lang.String)
-     */
-    public VendorCreditMemoDocument getCreditMemoByDocumentNumber(String documentNumber) {
-        LOG.debug("getCreditMemoByDocumentNumber() started");
-
-        if (ObjectUtils.isNotNull(documentNumber)) {
-            try {
-                VendorCreditMemoDocument doc = (VendorCreditMemoDocument) documentService.getByDocumentHeaderId(documentNumber);
-                return doc;
-            }
-            catch (WorkflowException e) {
-                String errorMessage = "Error getting credit memo document from document service";
-                LOG.error("getCreditMemoByDocumentNumber() " + errorMessage, e);
-                throw new RuntimeException(errorMessage, e);
-            }
-        }
-        return null;
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#getCreditMemoDocumentById(java.lang.Integer)
-     */
-    public VendorCreditMemoDocument getCreditMemoDocumentById(Integer purchasingDocumentIdentifier) {
-        return getCreditMemoByDocumentNumber(creditMemoDao.getDocumentNumberByCreditMemoId(purchasingDocumentIdentifier));
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#saveDocument(org.kuali.kfs.module.purap.document.CreditMemoDocument)
-     */
-    public void populateAndSaveCreditMemo(VendorCreditMemoDocument document) {
-        try {
-            document.setStatusCode(PurapConstants.CreditMemoStatuses.IN_PROCESS);
-            
-            if (document.isSourceDocumentPaymentRequest()) {
-                document.setBankCode(document.getPaymentRequestDocument().getBankCode());
-                document.setBank(document.getPaymentRequestDocument().getBank());
-            }
-            else {
-                // set bank code to default bank code in the system parameter
-                Bank defaultBank = SpringContext.getBean(BankService.class).getDefaultBankByDocType(document.getClass());
-                if (defaultBank != null) {
-                    document.setBankCode(defaultBank.getBankCode());
-                    document.setBank(defaultBank);
-                }
-            }
-            
-            documentService.saveDocument(document, AttributedContinuePurapEvent.class);
-        }
-        catch (ValidationException ve) {
-            document.setStatusCode(PurapConstants.CreditMemoStatuses.INITIATE);
-        }
-        catch (WorkflowException we) {
-            // set the status back to initiate
-            document.setStatusCode(PurapConstants.CreditMemoStatuses.INITIATE);
-            String errorMsg = "Error saving document # " + document.getDocumentHeader().getDocumentNumber() + " " + we.getMessage();
-            LOG.error(errorMsg, we);
-            throw new RuntimeException(errorMsg, we);
-        }
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#reopenClosedPO(org.kuali.kfs.module.purap.document.CreditMemoDocument)
-     */
-    public void reopenClosedPO(VendorCreditMemoDocument cmDocument) {
-        // reopen PO if closed
-        Integer purchaseOrderDocumentId = cmDocument.getPurchaseOrderIdentifier();
-        if (cmDocument.isSourceDocumentPaymentRequest() && ObjectUtils.isNull(purchaseOrderDocumentId)) {
-            PaymentRequestDocument paymentRequestDocument = paymentRequestService.getPaymentRequestById(cmDocument.getPaymentRequestIdentifier());
-            purchaseOrderDocumentId = paymentRequestDocument.getPurchaseOrderIdentifier();
-        }
-        // if we found a valid po id number then check it for reopening
-        if (ObjectUtils.isNotNull(purchaseOrderDocumentId)) {
-            PurchaseOrderDocument purchaseOrderDocument = purchaseOrderService.getCurrentPurchaseOrder(purchaseOrderDocumentId);
-            // only reopen if the po is not null, it does not have a pending change already scheduled, and it is in closed status
-            if (ObjectUtils.isNotNull(purchaseOrderDocument) && (!purchaseOrderDocument.isPendingActionIndicator()) && PurapConstants.PurchaseOrderStatuses.CLOSED.equals(purchaseOrderDocument.getStatusCode())) {
-
-            }
-        }
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#addHoldOnPaymentRequest(org.kuali.kfs.module.purap.document.CreditMemoDocument,
-     *      java.lang.String)
-     */
-    public VendorCreditMemoDocument addHoldOnCreditMemo(VendorCreditMemoDocument cmDocument, String note) throws Exception {
-        // save the note
-        Note noteObj = documentService.createNoteFromDocument(cmDocument, note);
-        documentService.addNoteToDocument(cmDocument, noteObj);
-        noteService.save(noteObj);
-
-        // retrieve and save with hold indicator set to true
-        VendorCreditMemoDocument cmDoc = getCreditMemoDocumentById(cmDocument.getPurapDocumentIdentifier());
-        cmDoc.setHoldIndicator(true);
-        cmDoc.setLastActionPerformedByPersonId(GlobalVariables.getUserSession().getPerson().getPrincipalId());
-        purapService.saveDocumentNoValidation(cmDoc);
-
-        // must also save it on the incoming document
-        cmDocument.setHoldIndicator(true);
-        cmDocument.setLastActionPerformedByPersonId(GlobalVariables.getUserSession().getPerson().getPrincipalId());
-        
-        return cmDoc;
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#removeHoldOnCreditMemo(org.kuali.kfs.module.purap.document.CreditMemoDocument,
-     *      java.lang.String)
-     */
-    public VendorCreditMemoDocument removeHoldOnCreditMemo(VendorCreditMemoDocument cmDocument, String note) throws Exception {
-        // save the note
-        Note noteObj = documentService.createNoteFromDocument(cmDocument, note);
-        documentService.addNoteToDocument(cmDocument, noteObj);
-        noteService.save(noteObj);
-
-        // retrieve and save with hold indicator set to false
-        VendorCreditMemoDocument cmDoc = getCreditMemoDocumentById(cmDocument.getPurapDocumentIdentifier());
-        cmDoc.setHoldIndicator(false);
-        cmDoc.setLastActionPerformedByPersonId(null);
-        purapService.saveDocumentNoValidation(cmDoc);
-
-        // must also save it on the incoming document
-        cmDocument.setHoldIndicator(false);
-        cmDocument.setLastActionPerformedByPersonId(null);
-        
-        return cmDoc;
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.AccountsPayableDocumentSpecificService#updateStatusByNode(java.lang.String, org.kuali.kfs.module.purap.document.AccountsPayableDocument)
-     */
-    public String updateStatusByNode(String currentNodeName, AccountsPayableDocument apDoc) {
-        return updateStatusByNode(currentNodeName, (VendorCreditMemoDocument) apDoc);
-    }
-
-    /**
-     * Updates the status of a credit memo document, currently this is used by the cancel action
-     * 
-     * @param currentNodeName  The string representing the current node to be used to obtain the canceled status code.
-     * @param cmDoc            The credit memo document to be updated.
-     * @return                 The string representing the canceledStatusCode, if empty it is assumed to be not from workflow. 
-     */
-    protected String updateStatusByNode(String currentNodeName, VendorCreditMemoDocument cmDoc) {
-        // update the status on the document
-
-        String cancelledStatusCode = "";
-        if (StringUtils.isEmpty(currentNodeName)) {
-            cancelledStatusCode = PurapConstants.CreditMemoStatuses.CANCELLED_POST_AP_APPROVE;
-        }
-        else {
-            NodeDetails currentNode = NodeDetailEnum.getNodeDetailEnumByName(currentNodeName);
-            if (ObjectUtils.isNotNull(currentNode)) {
-                cancelledStatusCode = currentNode.getDisapprovedStatusCode();
-            }
-        }
-
-        if (StringUtils.isNotBlank(cancelledStatusCode)) {
-            purapService.updateStatus(cmDoc, cancelledStatusCode);
-            purapService.saveDocumentNoValidation(cmDoc);
-            return cancelledStatusCode;
-        }
-        else {
-            logAndThrowRuntimeException("No status found to set for document being disapproved in node '" + currentNodeName + "'");
-        }
-        return cancelledStatusCode;
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#cancelExtractedCreditMemo(org.kuali.kfs.module.purap.document.CreditMemoDocument,
-     *      java.lang.String)
-     */
-    public void cancelExtractedCreditMemo(VendorCreditMemoDocument cmDocument, String note) {
-        LOG.debug("cancelExtractedCreditMemo() started");
-        if (CreditMemoStatuses.CANCELLED_STATUSES.contains(cmDocument.getStatusCode())) {
-            LOG.debug("cancelExtractedCreditMemo() ended");
-            return;
-        }
-
-        try {
-            Note noteObj = documentService.createNoteFromDocument(cmDocument, note);
-            documentService.addNoteToDocument(cmDocument, noteObj);
-        }
-        catch (Exception e) {
-            throw new RuntimeException(e.getMessage());
-        }
-
-        accountsPayableService.cancelAccountsPayableDocument(cmDocument, "");
-        LOG.debug("cancelExtractedCreditMemo() CM " + cmDocument.getPurapDocumentIdentifier() + " Cancelled Without Workflow");
-        LOG.debug("cancelExtractedCreditMemo() ended");
-
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#resetExtractedCreditMemo(org.kuali.kfs.module.purap.document.CreditMemoDocument,
-     *      java.lang.String)
-     */
-    public void resetExtractedCreditMemo(VendorCreditMemoDocument cmDocument, String note) {
-        LOG.debug("resetExtractedCreditMemo() started");
-        if (CreditMemoStatuses.CANCELLED_STATUSES.contains(cmDocument.getStatusCode())) {
-            LOG.debug("resetExtractedCreditMemo() ended");
-            return;
-        }
-        cmDocument.setExtractedTimestamp(null);
-        cmDocument.setCreditMemoPaidTimestamp(null);
-
-        Note noteObj;
-        try {
-            noteObj = documentService.createNoteFromDocument(cmDocument, note);
-            documentService.addNoteToDocument(cmDocument, noteObj);
-        }
-        catch (Exception e) {
-            throw new RuntimeException(e.getMessage());
-        }
-        purapService.saveDocumentNoValidation(cmDocument);
-
-        LOG.debug("resetExtractedCreditMemo() CM " + cmDocument.getPurapDocumentIdentifier() + " Cancelled Without Workflow");
-        LOG.debug("resetExtractedCreditMemo() ended");
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.AccountsPayableDocumentSpecificService#shouldPurchaseOrderBeReversed(org.kuali.kfs.module.purap.document.AccountsPayableDocument)
-     */
-    public boolean shouldPurchaseOrderBeReversed(AccountsPayableDocument apDoc) {
-        // always return false, never reverse
-        return false;
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.AccountsPayableDocumentSpecificService#getPersonForCancel(org.kuali.kfs.module.purap.document.AccountsPayableDocument)
-     */
-    public Person getPersonForCancel(AccountsPayableDocument apDoc) {
-        // return null, since superuser is fine for CM
-        return null;
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.AccountsPayableDocumentSpecificService#takePurchaseOrderCancelAction(org.kuali.kfs.module.purap.document.AccountsPayableDocument)
-     */
-    public void takePurchaseOrderCancelAction(AccountsPayableDocument apDoc) {
-        VendorCreditMemoDocument cmDocument = (VendorCreditMemoDocument) apDoc;
-        if (cmDocument.isReopenPurchaseOrderIndicator()) {
-            String docType = PurapConstants.PurchaseOrderDocTypes.PURCHASE_ORDER_CLOSE_DOCUMENT;
-            purchaseOrderService.createAndRoutePotentialChangeDocument(cmDocument.getPurchaseOrderDocument().getDocumentNumber(), docType, "reopened by Payment Request " + apDoc.getPurapDocumentIdentifier() + "cancel", new ArrayList(), PurapConstants.PurchaseOrderStatuses.PENDING_CLOSE);
-        }
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#markPaid(org.kuali.kfs.module.purap.document.CreditMemoDocument,
-     *      java.sql.Date)
-     */
-    public void markPaid(VendorCreditMemoDocument cm, Date processDate) {
-        LOG.debug("markPaid() started");
-
-        cm.setCreditMemoPaidTimestamp(new Timestamp(processDate.getTime()));
-        purapService.saveDocumentNoValidation(cm);
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.AccountsPayableDocumentSpecificService#poItemEligibleForAp(org.kuali.kfs.module.purap.document.AccountsPayableDocument, org.kuali.kfs.module.purap.businessobject.PurchaseOrderItem)
-     */
-    public boolean poItemEligibleForAp(AccountsPayableDocument apDoc, PurchaseOrderItem poItem) {
-        // if the po item is not active... skip it
-        if (!poItem.isItemActiveIndicator()) {
-            return false;
-        }
-
-        if (poItem.getItemType().isQuantityBasedGeneralLedgerIndicator() && poItem.getItemInvoicedTotalQuantity().isGreaterThan(KualiDecimal.ZERO)) {
-            return true;
-        }
-        else {
-            BigDecimal unitPrice = (poItem.getItemUnitPrice() == null ? new BigDecimal(0) : poItem.getItemUnitPrice());
-            if (unitPrice.doubleValue() > poItem.getItemOutstandingEncumberedAmount().doubleValue()) {
-                return true;
-            }
-        }
-        return false;
-    }
-    
-    /**
-     * The given document here needs to be a Credit Memo.
-     * 
-     * @see org.kuali.kfs.module.purap.document.service.AccountsPayableDocumentSpecificService#generateGLEntriesCreateAccountsPayableDocument(org.kuali.kfs.module.purap.document.AccountsPayableDocument)
-     */
-    public void generateGLEntriesCreateAccountsPayableDocument(AccountsPayableDocument apDocument) {
-        VendorCreditMemoDocument creditMemo = (VendorCreditMemoDocument)apDocument;
-        purapGeneralLedgerService.generateEntriesCreateCreditMemo(creditMemo);
-    }
-
-    /**
-     * Records the specified error message into the Log file and throws a runtime exception.
-     * 
-     * @param errorMessage the error message to be logged.
-     */
-    protected void logAndThrowRuntimeException(String errorMessage) {
-        this.logAndThrowRuntimeException(errorMessage, null);
-    }
-
-    /**
-     * Records the specified error message into the Log file and throws the specified runtime exception.
-     * 
-     * @param errorMessage the specified error message.
-     * @param e the specified runtime exception.
-     */
-    protected void logAndThrowRuntimeException(String errorMessage, Exception e) {
-        if (ObjectUtils.isNotNull(e)) {
-            LOG.error(errorMessage, e);
-            throw new RuntimeException(errorMessage, e);
-        }
-        else {
-            LOG.error(errorMessage);
-            throw new RuntimeException(errorMessage);
-        }
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#hasActiveCreditMemosForPurchaseOrder(java.lang.Integer)
-     */
-    public boolean hasActiveCreditMemosForPurchaseOrder(Integer purchaseOrderIdentifier){
-        
-        boolean hasActiveCreditMemos = false;
-        List<String> docNumbers= null;
-        KualiWorkflowDocument workflowDocument = null;
-        
-        docNumbers= creditMemoDao.getActiveCreditMemoDocumentNumbersForPurchaseOrder(purchaseOrderIdentifier);
-        
-        for (String docNumber : docNumbers) {
-            try{
-                workflowDocument = workflowDocumentService.createWorkflowDocument(Long.valueOf(docNumber), GlobalVariables.getUserSession().getPerson());
-            }catch(WorkflowException we){
-                throw new RuntimeException(we);
-            }
-            
-            //if the document is not in a non-active status then return true and stop evaluation
-            if(!(workflowDocument.stateIsCanceled() ||
-                    workflowDocument.stateIsException() ||
-                    workflowDocument.stateIsFinal()) ){
-                hasActiveCreditMemos = true;
-                break;
-            }
-
-        }
-        
-        return hasActiveCreditMemos;
-    }
-
-    /**
-     * @see org.kuali.kfs.module.purap.document.service.CreditMemoCreateService#populateDocumentAfterInit(org.kuali.kfs.module.purap.document.CreditMemoDocument)
-     */
-    public void populateDocumentAfterInit(VendorCreditMemoDocument cmDocument) {
-
-        // make a call to search for expired/closed accounts
-        HashMap<String, ExpiredOrClosedAccountEntry> expiredOrClosedAccountList = accountsPayableService.getExpiredOrClosedAccountList(cmDocument);
-
-        if (cmDocument.isSourceDocumentPaymentRequest()) {
-            populateDocumentFromPreq(cmDocument, expiredOrClosedAccountList);
-        }
-        else if (cmDocument.isSourceDocumentPurchaseOrder()) {
-            populateDocumentFromPO(cmDocument, expiredOrClosedAccountList);
-        }
-        else {
-            populateDocumentFromVendor(cmDocument);
-        }
-
-        populateDocumentDescription(cmDocument);
-
-        // write a note for expired/closed accounts if any exist and add a message stating there were expired/closed accounts at the
-        // top of the document
-        accountsPayableService.generateExpiredOrClosedAccountNote(cmDocument, expiredOrClosedAccountList);
-
-        // set indicator so a message is displayed for accounts that were replaced due to expired/closed status
-        if (!expiredOrClosedAccountList.isEmpty()) {
-            cmDocument.setContinuationAccountIndicator(true);
-        }
-
-    }   
-
-    /**
-     * Populate Credit Memo of type Payment Request.
-     * 
-     * @param cmDocument - Credit Memo Document to Populate
-     */
-    protected void populateDocumentFromPreq(VendorCreditMemoDocument cmDocument, HashMap<String, ExpiredOrClosedAccountEntry> expiredOrClosedAccountList) {
-        PaymentRequestDocument paymentRequestDocument = paymentRequestService.getPaymentRequestById(cmDocument.getPaymentRequestIdentifier());
-        cmDocument.getDocumentHeader().setOrganizationDocumentNumber(paymentRequestDocument.getDocumentHeader().getOrganizationDocumentNumber());
-        cmDocument.setPaymentRequestDocument(paymentRequestDocument);
-        cmDocument.setPurchaseOrderDocument(paymentRequestDocument.getPurchaseOrderDocument());
-        cmDocument.setUseTaxIndicator(paymentRequestDocument.isUseTaxIndicator());
-        
-        // credit memo address taken directly from payment request
-        cmDocument.setVendorHeaderGeneratedIdentifier(paymentRequestDocument.getVendorHeaderGeneratedIdentifier());
-        cmDocument.setVendorDetailAssignedIdentifier(paymentRequestDocument.getVendorDetailAssignedIdentifier());
-        cmDocument.setVendorAddressGeneratedIdentifier(paymentRequestDocument.getVendorAddressGeneratedIdentifier());
-        cmDocument.setVendorCustomerNumber(paymentRequestDocument.getVendorCustomerNumber());
-        cmDocument.setVendorName(paymentRequestDocument.getVendorName());
-        cmDocument.setVendorLine1Address(paymentRequestDocument.getVendorLine1Address());
-        cmDocument.setVendorLine2Address(paymentRequestDocument.getVendorLine2Address());
-        cmDocument.setVendorCityName(paymentRequestDocument.getVendorCityName());
-        cmDocument.setVendorStateCode(paymentRequestDocument.getVendorStateCode());
-        cmDocument.setVendorPostalCode(paymentRequestDocument.getVendorPostalCode());
-        cmDocument.setVendorCountryCode(paymentRequestDocument.getVendorCountryCode());
-        cmDocument.setVendorAttentionName(paymentRequestDocument.getVendorAttentionName());
-        cmDocument.setAccountsPayablePurchasingDocumentLinkIdentifier(paymentRequestDocument.getAccountsPayablePurchasingDocumentLinkIdentifier());
-
-        // prep the item lines (also collect warnings for later display) this is only done on paymentRequest
-        purapAccountingService.convertMoneyToPercent(paymentRequestDocument);
-        populateItemLinesFromPreq(cmDocument, expiredOrClosedAccountList);
-    }
-
-    /**
-     * Populates the credit memo items from the payment request items.
-     * 
-     * @param cmDocument - Credit Memo Document to Populate
-     */
-    protected void populateItemLinesFromPreq(VendorCreditMemoDocument cmDocument, HashMap<String, ExpiredOrClosedAccountEntry> expiredOrClosedAccountList) {
-        PaymentRequestDocument preqDocument = cmDocument.getPaymentRequestDocument();
-
-        for (PaymentRequestItem preqItemToTemplate : (List<PaymentRequestItem>) preqDocument.getItems()) {
-            if (preqItemToTemplate.getItemType().isLineItemIndicator()) {
-                cmDocument.getItems().add(new CreditMemoItem(cmDocument, preqItemToTemplate, preqItemToTemplate.getPurchaseOrderItem(), expiredOrClosedAccountList));
-            }
-        }
-
-        // add below the line items
-        purapService.addBelowLineItems(cmDocument);
-        
-        cmDocument.fixItemReferences();
-    }
-
-    /**
-     * Populate Credit Memo of type Purchase Order.
-     * 
-     * @param cmDocument - Credit Memo Document to Populate
-     */
-    protected void populateDocumentFromPO(VendorCreditMemoDocument cmDocument, HashMap<String, ExpiredOrClosedAccountEntry> expiredOrClosedAccountList) {
-        PurchaseOrderDocument purchaseOrderDocument = purchaseOrderService.getCurrentPurchaseOrder(cmDocument.getPurchaseOrderIdentifier());
-        cmDocument.setPurchaseOrderDocument(purchaseOrderDocument);
-        cmDocument.getDocumentHeader().setOrganizationDocumentNumber(purchaseOrderDocument.getDocumentHeader().getOrganizationDocumentNumber());
-        cmDocument.setUseTaxIndicator(cmDocument.isUseTaxIndicator());
-        
-        cmDocument.setVendorHeaderGeneratedIdentifier(purchaseOrderDocument.getVendorHeaderGeneratedIdentifier());
-        cmDocument.setVendorDetailAssignedIdentifier(purchaseOrderDocument.getVendorDetailAssignedIdentifier());
-        cmDocument.setVendorCustomerNumber(purchaseOrderDocument.getVendorCustomerNumber());
-        cmDocument.setVendorName(purchaseOrderDocument.getVendorName());
-        cmDocument.setAccountsPayablePurchasingDocumentLinkIdentifier(purchaseOrderDocument.getAccountsPayablePurchasingDocumentLinkIdentifier());
-
-        // populate cm vendor address with the default remit address type for the vendor if found
-        String userCampus = GlobalVariables.getUserSession().getPerson().getCampusCode();
-        VendorAddress vendorAddress = vendorService.getVendorDefaultAddress(purchaseOrderDocument.getVendorHeaderGeneratedIdentifier(), purchaseOrderDocument.getVendorDetailAssignedIdentifier(), VendorConstants.AddressTypes.REMIT, userCampus);
-        if (vendorAddress != null) {
-            cmDocument.templateVendorAddress(vendorAddress);
-            cmDocument.setVendorAddressGeneratedIdentifier(vendorAddress.getVendorAddressGeneratedIdentifier());
-            cmDocument.setVendorAttentionName(StringUtils.defaultString(vendorAddress.getVendorAttentionName()));
-        }
-        else {
-            // set address from PO
-            cmDocument.setVendorAddressGeneratedIdentifier(purchaseOrderDocument.getVendorAddressGeneratedIdentifier());
-            cmDocument.setVendorLine1Address(purchaseOrderDocument.getVendorLine1Address());
-            cmDocument.setVendorLine2Address(purchaseOrderDocument.getVendorLine2Address());
-            cmDocument.setVendorCityName(purchaseOrderDocument.getVendorCityName());
-            cmDocument.setVendorStateCode(purchaseOrderDocument.getVendorStateCode());
-            cmDocument.setVendorPostalCode(purchaseOrderDocument.getVendorPostalCode());
-            cmDocument.setVendorCountryCode(purchaseOrderDocument.getVendorCountryCode());
-            
-            boolean blankAttentionLine = StringUtils.equalsIgnoreCase("Y",SpringContext.getBean(KualiConfigurationService.class).getParameterValue(PurapConstants.PURAP_NAMESPACE, "Document", PurapParameterConstants.BLANK_ATTENTION_LINE_FOR_PO_TYPE_ADDRESS));
-            if (blankAttentionLine){
-                cmDocument.setVendorAttentionName(StringUtils.EMPTY);
-            }else{
-                cmDocument.setVendorAttentionName(StringUtils.defaultString(purchaseOrderDocument.getVendorAttentionName()));
-            }
-        }
-
-        populateItemLinesFromPO(cmDocument, expiredOrClosedAccountList);
-    }
-
-    /**
-     * Populates the credit memo items from the payment request items.
-     * 
-     * @param cmDocument - Credit Memo Document to Populate
-     */
-    protected void populateItemLinesFromPO(VendorCreditMemoDocument cmDocument, HashMap<String, ExpiredOrClosedAccountEntry> expiredOrClosedAccountList) {
-        List<PurchaseOrderItem> invoicedItems = getPOInvoicedItems(cmDocument.getPurchaseOrderDocument());
-        for (PurchaseOrderItem poItem : invoicedItems) {
-            CreditMemoItem creditMemoItem = new CreditMemoItem(cmDocument, poItem, expiredOrClosedAccountList);
-            cmDocument.getItems().add(creditMemoItem);
-            PurchasingCapitalAssetItem purchasingCAMSItem = cmDocument.getPurchaseOrderDocument().getPurchasingCapitalAssetItemByItemIdentifier(poItem.getItemIdentifier());
-            if(purchasingCAMSItem!=null) {
-                creditMemoItem.setCapitalAssetTransactionTypeCode(purchasingCAMSItem.getCapitalAssetTransactionTypeCode());
-            } 
-            
-        }
-
-        // add below the line items
-        purapService.addBelowLineItems(cmDocument);
-        
-        cmDocument.fixItemReferences();
-    }
-
-    /**
-     * Populate Credit Memo of type Vendor.
-     * 
-     * @param cmDocument - Credit Memo Document to Populate
-     */
-    protected void populateDocumentFromVendor(VendorCreditMemoDocument cmDocument) {
-        Integer vendorHeaderId = VendorUtils.getVendorHeaderId(cmDocument.getVendorNumber());
-        Integer vendorDetailId = VendorUtils.getVendorDetailId(cmDocument.getVendorNumber());
-
-        VendorDetail vendorDetail = vendorService.getVendorDetail(vendorHeaderId, vendorDetailId);
-        cmDocument.setVendorDetail(vendorDetail);
-        
-        cmDocument.setVendorHeaderGeneratedIdentifier(vendorDetail.getVendorHeaderGeneratedIdentifier());
-        cmDocument.setVendorDetailAssignedIdentifier(vendorDetail.getVendorDetailAssignedIdentifier());
-        cmDocument.setVendorCustomerNumber(vendorDetail.getVendorNumber());
-        cmDocument.setVendorName(vendorDetail.getVendorName());
-
-
-        // credit memo type vendor uses the default remit type address for the vendor if found
-        String userCampus = GlobalVariables.getUserSession().getPerson().getCampusCode();
-        VendorAddress vendorAddress = vendorService.getVendorDefaultAddress(vendorHeaderId, vendorDetailId, VendorConstants.AddressTypes.REMIT, userCampus);
-        if (vendorAddress == null) {
-            // pick up the default vendor po address type
-            vendorAddress = vendorService.getVendorDefaultAddress(vendorHeaderId, vendorDetailId, VendorConstants.AddressTypes.PURCHASE_ORDER, userCampus);
-        }
-
-        cmDocument.setVendorAddressGeneratedIdentifier(vendorAddress.getVendorAddressGeneratedIdentifier());
-        cmDocument.templateVendorAddress(vendorAddress);
-
-        // add below the line items
-        purapService.addBelowLineItems(cmDocument);        
-    }
-
-    /**
-     * Defaults the document description based on the credit memo source type.
-     * 
-     * @param cmDocument - Credit Memo Document to Populate
-     */
-    protected void populateDocumentDescription(VendorCreditMemoDocument cmDocument) {
-        String description = "";
-        if (cmDocument.isSourceVendor()) {
-            description = "Vendor: " + cmDocument.getVendorName();
-        }
-        else {
-            description = "PO: " + cmDocument.getPurchaseOrderDocument().getPurapDocumentIdentifier() + " Vendor: " + cmDocument.getVendorName();
-        }
-
-        // trim description if longer than whats specified in the data dictionary
-        int noteTextMaxLength = dataDictionaryService.getAttributeMaxLength(DocumentHeader.class, KNSPropertyConstants.DOCUMENT_DESCRIPTION).intValue();
-        if (noteTextMaxLength < description.length()) {
-            description = description.substring(0, noteTextMaxLength);
-        }
-
-        cmDocument.getDocumentHeader().setDocumentDescription(description);
-    }
-
-}
-
+/*
+ * Copyright 2007 The Kuali Foundation
+ * 
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl2.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.kfs.module.purap.document.service.impl;
+
+import java.math.BigDecimal;
+import java.sql.Date;
+import java.sql.Timestamp;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+
+import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.lang.StringUtils;
+import org.kuali.kfs.module.purap.PurapConstants;
+import org.kuali.kfs.module.purap.PurapKeyConstants;
+import org.kuali.kfs.module.purap.PurapParameterConstants;
+import org.kuali.kfs.module.purap.PurapConstants.CreditMemoStatuses;
+import org.kuali.kfs.module.purap.PurapWorkflowConstants.NodeDetails;
+import org.kuali.kfs.module.purap.PurapWorkflowConstants.CreditMemoDocument.NodeDetailEnum;
+import org.kuali.kfs.module.purap.businessobject.CreditMemoAccount;
+import org.kuali.kfs.module.purap.businessobject.CreditMemoItem;
+import org.kuali.kfs.module.purap.businessobject.PaymentRequestItem;
+import org.kuali.kfs.module.purap.businessobject.PurApAccountingLine;
+import org.kuali.kfs.module.purap.businessobject.PurchaseOrderItem;
+import org.kuali.kfs.module.purap.businessobject.PurchasingCapitalAssetItem;
+import org.kuali.kfs.module.purap.document.AccountsPayableDocument;
+import org.kuali.kfs.module.purap.document.PaymentRequestDocument;
+import org.kuali.kfs.module.purap.document.PurchaseOrderDocument;
+import org.kuali.kfs.module.purap.document.PurchasingAccountsPayableDocument;
+import org.kuali.kfs.module.purap.document.VendorCreditMemoDocument;
+import org.kuali.kfs.module.purap.document.dataaccess.CreditMemoDao;
+import org.kuali.kfs.module.purap.document.service.AccountsPayableService;
+import org.kuali.kfs.module.purap.document.service.CreditMemoService;
+import org.kuali.kfs.module.purap.document.service.PaymentRequestService;
+import org.kuali.kfs.module.purap.document.service.PurapService;
+import org.kuali.kfs.module.purap.document.service.PurchaseOrderService;
+import org.kuali.kfs.module.purap.document.validation.event.AttributedContinuePurapEvent;
+import org.kuali.kfs.module.purap.service.PurapAccountingService;
+import org.kuali.kfs.module.purap.service.PurapGeneralLedgerService;
+import org.kuali.kfs.module.purap.util.ExpiredOrClosedAccountEntry;
+import org.kuali.kfs.module.purap.util.VendorGroupingHelper;
+import org.kuali.kfs.sys.businessobject.Bank;
+import org.kuali.kfs.sys.businessobject.SourceAccountingLine;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.kfs.sys.service.BankService;
+import org.kuali.kfs.vnd.VendorConstants;
+import org.kuali.kfs.vnd.VendorUtils;
+import org.kuali.kfs.vnd.businessobject.VendorAddress;
+import org.kuali.kfs.vnd.businessobject.VendorDetail;
+import org.kuali.kfs.vnd.document.service.VendorService;
+import org.kuali.rice.kew.exception.WorkflowException;
+import org.kuali.rice.kim.bo.Person;
+import org.kuali.rice.kns.bo.DocumentHeader;
+import org.kuali.rice.kns.bo.Note;
+import org.kuali.rice.kns.exception.ValidationException;
+import org.kuali.rice.kns.service.DataDictionaryService;
+import org.kuali.rice.kns.service.DocumentService;
+import org.kuali.rice.kns.service.KualiConfigurationService;
+import org.kuali.rice.kns.service.NoteService;
+import org.kuali.rice.kns.util.GlobalVariables;
+import org.kuali.rice.kns.util.KNSPropertyConstants;
+import org.kuali.rice.kns.util.KualiDecimal;
+import org.kuali.rice.kns.util.ObjectUtils;
+import org.kuali.rice.kns.workflow.service.KualiWorkflowDocument;
+import org.kuali.rice.kns.workflow.service.WorkflowDocumentService;
+import org.springframework.transaction.annotation.Transactional;
+
+/**
+ * Provides services to support the creation of a Credit Memo Document.
+ */
+@Transactional
+public class CreditMemoServiceImpl implements CreditMemoService {
+    private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(CreditMemoServiceImpl.class);
+
+    protected AccountsPayableService accountsPayableService;
+    protected CreditMemoDao creditMemoDao;
+    protected DataDictionaryService dataDictionaryService;
+    protected DocumentService documentService;
+    protected KualiConfigurationService kualiConfigurationService;
+    protected NoteService noteService;
+    protected PaymentRequestService paymentRequestService;
+    protected PurapAccountingService purapAccountingService;
+    protected PurapGeneralLedgerService purapGeneralLedgerService;
+    protected PurapService purapService;
+    protected PurchaseOrderService purchaseOrderService;
+    protected VendorService vendorService;
+    protected WorkflowDocumentService workflowDocumentService;
+    
+
+    public void setAccountsPayableService(AccountsPayableService accountsPayableService) {
+        this.accountsPayableService = accountsPayableService;
+    }
+
+    public void setCreditMemoDao(CreditMemoDao creditMemoDao) {
+        this.creditMemoDao = creditMemoDao;
+    }
+
+    public void setDataDictionaryService(DataDictionaryService dataDictionaryService) {
+        this.dataDictionaryService = dataDictionaryService;
+    }
+
+    public void setDocumentService(DocumentService documentService) {
+        this.documentService = documentService;
+    }
+
+    public void setKualiConfigurationService(KualiConfigurationService kualiConfigurationService) {
+        this.kualiConfigurationService = kualiConfigurationService;
+    }
+
+    public void setNoteService(NoteService noteService) {
+        this.noteService = noteService;
+    }
+
+    public void setPaymentRequestService(PaymentRequestService paymentRequestService) {
+        this.paymentRequestService = paymentRequestService;
+    }
+
+    public void setPurapAccountingService(PurapAccountingService purapAccountingService) {
+        this.purapAccountingService = purapAccountingService;
+    }
+
+    public void setPurapGeneralLedgerService(PurapGeneralLedgerService purapGeneralLedgerService) {
+        this.purapGeneralLedgerService = purapGeneralLedgerService;
+    }
+
+    public void setPurapService(PurapService purapService) {
+        this.purapService = purapService;
+    }
+
+    public void setPurchaseOrderService(PurchaseOrderService purchaseOrderService) {
+        this.purchaseOrderService = purchaseOrderService;
+    }
+
+    public void setVendorService(VendorService vendorService) {
+        this.vendorService = vendorService;
+    }
+
+    public void setWorkflowDocumentService(WorkflowDocumentService workflowDocumentService){
+        this.workflowDocumentService = workflowDocumentService;
+    }
+    
+
+    
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#getCreditMemosToExtract(java.lang.String)
+     */
+    public Iterator<VendorCreditMemoDocument> getCreditMemosToExtract(String chartCode) {
+        LOG.debug("getCreditMemosToExtract() started");
+
+        return creditMemoDao.getCreditMemosToExtract(chartCode);
+    }
+
+    public Collection<VendorCreditMemoDocument> getCreditMemosToExtractByVendor(String chartCode, VendorGroupingHelper vendor ) {
+        LOG.debug("getCreditMemosToExtractByVendor() started");
+
+        return creditMemoDao.getCreditMemosToExtractByVendor(chartCode,vendor);
+    }
+
+    public Set<VendorGroupingHelper> getVendorsOnCreditMemosToExtract(String chartCode) {
+        LOG.debug("getVendorsOnCreditMemosToExtract() started");
+        HashSet<VendorGroupingHelper> vendors = new HashSet<VendorGroupingHelper>();
+        
+        Iterator<VendorCreditMemoDocument> docs = getCreditMemosToExtract(chartCode);
+        while ( docs.hasNext() ) {
+            VendorCreditMemoDocument doc = docs.next();
+            vendors.add( new VendorGroupingHelper( doc ) );
+        }
+        return vendors;
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#creditMemoDuplicateMessages(org.kuali.kfs.module.purap.document.CreditMemoDocument)
+     */
+    public String creditMemoDuplicateMessages(VendorCreditMemoDocument cmDocument) {
+        String duplicateMessage = null;
+
+        String vendorNumber = cmDocument.getVendorNumber();
+        if (StringUtils.isEmpty(vendorNumber)) {
+            PurchasingAccountsPayableDocument sourceDocument = cmDocument.getPurApSourceDocumentIfPossible();
+            if (ObjectUtils.isNotNull(sourceDocument)) {
+                vendorNumber = sourceDocument.getVendorNumber();
+            }
+        }
+
+        if (StringUtils.isNotEmpty(vendorNumber)) {
+            // check for existence of another credit memo with the same vendor and vendor credit memo number
+            if (creditMemoDao.duplicateExists(VendorUtils.getVendorHeaderId(vendorNumber), VendorUtils.getVendorDetailId(vendorNumber), cmDocument.getCreditMemoNumber())) {
+                duplicateMessage = kualiConfigurationService.getPropertyString(PurapKeyConstants.MESSAGE_DUPLICATE_CREDIT_MEMO_VENDOR_NUMBER);
+            }
+
+            // check for existence of another credit memo with the same vendor and credit memo date
+            if (creditMemoDao.duplicateExists(VendorUtils.getVendorHeaderId(vendorNumber), VendorUtils.getVendorDetailId(vendorNumber), cmDocument.getCreditMemoDate(), cmDocument.getCreditMemoAmount())) {
+                duplicateMessage = kualiConfigurationService.getPropertyString(PurapKeyConstants.MESSAGE_DUPLICATE_CREDIT_MEMO_VENDOR_NUMBER_DATE_AMOUNT);
+            }
+        }
+
+        return duplicateMessage;
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#getPOInvoicedItems(org.kuali.kfs.module.purap.document.PurchaseOrderDocument)
+     */
+    public List<PurchaseOrderItem> getPOInvoicedItems(PurchaseOrderDocument poDocument) {
+        List<PurchaseOrderItem> invoicedItems = new ArrayList<PurchaseOrderItem>();
+
+        for (Iterator iter = poDocument.getItems().iterator(); iter.hasNext();) {
+            PurchaseOrderItem poItem = (PurchaseOrderItem) iter.next();
+
+            // only items of type above the line can be considered for being invoiced
+            if (poItem.getItemType().isAdditionalChargeIndicator()) {
+                continue;
+            }
+
+            if (poItem.getItemType().isQuantityBasedGeneralLedgerIndicator() && poItem.getItemInvoicedTotalQuantity().isGreaterThan(KualiDecimal.ZERO)) {
+                invoicedItems.add(poItem);
+            }
+            else {
+                BigDecimal unitPrice = (poItem.getItemUnitPrice() == null ? new BigDecimal(0) : poItem.getItemUnitPrice());
+                if (unitPrice.doubleValue() > poItem.getItemOutstandingEncumberedAmount().doubleValue()) {
+                    invoicedItems.add(poItem);
+                }
+            }
+        }
+
+        return invoicedItems;
+    }
+
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#calculateCreditMemo(org.kuali.kfs.module.purap.document.CreditMemoDocument)
+     */
+    public void calculateCreditMemo(VendorCreditMemoDocument cmDocument) {
+
+        cmDocument.updateExtendedPriceOnItems();
+
+        for (CreditMemoItem item : (List<CreditMemoItem>) cmDocument.getItems()) {
+            // make sure restocking fee is negative
+            if (StringUtils.equals(PurapConstants.ItemTypeCodes.ITEM_TYPE_RESTCK_FEE_CODE, item.getItemTypeCode())) {
+                if (item.getItemUnitPrice() != null) {
+                    item.setExtendedPrice(item.getExtendedPrice().abs().negated());
+                    item.setItemUnitPrice(item.getItemUnitPrice().abs().negate());
+                }
+            }
+        }
+
+        //calculate tax if cm not based on vendor
+        if (cmDocument.isSourceVendor() == false) {
+            purapService.calculateTax(cmDocument);
+        }
+        
+        // proration
+        if (cmDocument.isSourceVendor()) {
+            // no proration on vendor
+            return;
+        }
+
+        for (CreditMemoItem item : (List<CreditMemoItem>) cmDocument.getItems()) {
+
+            // skip above the line
+            if (item.getItemType().isLineItemIndicator()) {
+                continue;
+            }
+
+            if ((item.getSourceAccountingLines().isEmpty()) && (ObjectUtils.isNotNull(item.getExtendedPrice())) && (KualiDecimal.ZERO.compareTo(item.getExtendedPrice()) != 0)) {
+
+                KualiDecimal totalAmount = KualiDecimal.ZERO;
+                List<PurApAccountingLine> distributedAccounts = null;
+                List<SourceAccountingLine> summaryAccounts = null;
+
+                totalAmount = cmDocument.getPurApSourceDocumentIfPossible().getTotalDollarAmount();
+                // this should do nothing on preq which is fine
+                purapAccountingService.updateAccountAmounts(cmDocument.getPurApSourceDocumentIfPossible());
+                summaryAccounts = purapAccountingService.generateSummary(cmDocument.getPurApSourceDocumentIfPossible().getItems());
+                distributedAccounts = purapAccountingService.generateAccountDistributionForProration(summaryAccounts, totalAmount, PurapConstants.PRORATION_SCALE, CreditMemoAccount.class);
+
+                if (CollectionUtils.isNotEmpty(distributedAccounts) && CollectionUtils.isEmpty(item.getSourceAccountingLines())) {
+                    item.setSourceAccountingLines(distributedAccounts);
+                }
+            }
+        }
+        // end proration
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#getCreditMemoByDocumentNumber(java.lang.String)
+     */
+    public VendorCreditMemoDocument getCreditMemoByDocumentNumber(String documentNumber) {
+        LOG.debug("getCreditMemoByDocumentNumber() started");
+
+        if (ObjectUtils.isNotNull(documentNumber)) {
+            try {
+                VendorCreditMemoDocument doc = (VendorCreditMemoDocument) documentService.getByDocumentHeaderId(documentNumber);
+                return doc;
+            }
+            catch (WorkflowException e) {
+                String errorMessage = "Error getting credit memo document from document service";
+                LOG.error("getCreditMemoByDocumentNumber() " + errorMessage, e);
+                throw new RuntimeException(errorMessage, e);
+            }
+        }
+        return null;
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#getCreditMemoDocumentById(java.lang.Integer)
+     */
+    public VendorCreditMemoDocument getCreditMemoDocumentById(Integer purchasingDocumentIdentifier) {
+        return getCreditMemoByDocumentNumber(creditMemoDao.getDocumentNumberByCreditMemoId(purchasingDocumentIdentifier));
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#saveDocument(org.kuali.kfs.module.purap.document.CreditMemoDocument)
+     */
+    public void populateAndSaveCreditMemo(VendorCreditMemoDocument document) {
+        try {
+            document.setStatusCode(PurapConstants.CreditMemoStatuses.IN_PROCESS);
+            
+            if (document.isSourceDocumentPaymentRequest()) {
+                document.setBankCode(document.getPaymentRequestDocument().getBankCode());
+                document.setBank(document.getPaymentRequestDocument().getBank());
+            }
+            else {
+                // set bank code to default bank code in the system parameter
+                Bank defaultBank = SpringContext.getBean(BankService.class).getDefaultBankByDocType(VendorCreditMemoDocument.class);
+                if (defaultBank != null) {
+                    document.setBankCode(defaultBank.getBankCode());
+                    document.setBank(defaultBank);
+                }
+            }
+            
+            documentService.saveDocument(document, AttributedContinuePurapEvent.class);
+        }
+        catch (ValidationException ve) {
+            document.setStatusCode(PurapConstants.CreditMemoStatuses.INITIATE);
+        }
+        catch (WorkflowException we) {
+            // set the status back to initiate
+            document.setStatusCode(PurapConstants.CreditMemoStatuses.INITIATE);
+            String errorMsg = "Error saving document # " + document.getDocumentHeader().getDocumentNumber() + " " + we.getMessage();
+            LOG.error(errorMsg, we);
+            throw new RuntimeException(errorMsg, we);
+        }
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#reopenClosedPO(org.kuali.kfs.module.purap.document.CreditMemoDocument)
+     */
+    public void reopenClosedPO(VendorCreditMemoDocument cmDocument) {
+        // reopen PO if closed
+        Integer purchaseOrderDocumentId = cmDocument.getPurchaseOrderIdentifier();
+        if (cmDocument.isSourceDocumentPaymentRequest() && ObjectUtils.isNull(purchaseOrderDocumentId)) {
+            PaymentRequestDocument paymentRequestDocument = paymentRequestService.getPaymentRequestById(cmDocument.getPaymentRequestIdentifier());
+            purchaseOrderDocumentId = paymentRequestDocument.getPurchaseOrderIdentifier();
+        }
+        // if we found a valid po id number then check it for reopening
+        if (ObjectUtils.isNotNull(purchaseOrderDocumentId)) {
+            PurchaseOrderDocument purchaseOrderDocument = purchaseOrderService.getCurrentPurchaseOrder(purchaseOrderDocumentId);
+            // only reopen if the po is not null, it does not have a pending change already scheduled, and it is in closed status
+            if (ObjectUtils.isNotNull(purchaseOrderDocument) && (!purchaseOrderDocument.isPendingActionIndicator()) && PurapConstants.PurchaseOrderStatuses.CLOSED.equals(purchaseOrderDocument.getStatusCode())) {
+
+            }
+        }
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#addHoldOnPaymentRequest(org.kuali.kfs.module.purap.document.CreditMemoDocument,
+     *      java.lang.String)
+     */
+    public VendorCreditMemoDocument addHoldOnCreditMemo(VendorCreditMemoDocument cmDocument, String note) throws Exception {
+        // save the note
+        Note noteObj = documentService.createNoteFromDocument(cmDocument, note);
+        documentService.addNoteToDocument(cmDocument, noteObj);
+        noteService.save(noteObj);
+
+        // retrieve and save with hold indicator set to true
+        VendorCreditMemoDocument cmDoc = getCreditMemoDocumentById(cmDocument.getPurapDocumentIdentifier());
+        cmDoc.setHoldIndicator(true);
+        cmDoc.setLastActionPerformedByPersonId(GlobalVariables.getUserSession().getPerson().getPrincipalId());
+        purapService.saveDocumentNoValidation(cmDoc);
+
+        // must also save it on the incoming document
+        cmDocument.setHoldIndicator(true);
+        cmDocument.setLastActionPerformedByPersonId(GlobalVariables.getUserSession().getPerson().getPrincipalId());
+        
+        return cmDoc;
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#removeHoldOnCreditMemo(org.kuali.kfs.module.purap.document.CreditMemoDocument,
+     *      java.lang.String)
+     */
+    public VendorCreditMemoDocument removeHoldOnCreditMemo(VendorCreditMemoDocument cmDocument, String note) throws Exception {
+        // save the note
+        Note noteObj = documentService.createNoteFromDocument(cmDocument, note);
+        documentService.addNoteToDocument(cmDocument, noteObj);
+        noteService.save(noteObj);
+
+        // retrieve and save with hold indicator set to false
+        VendorCreditMemoDocument cmDoc = getCreditMemoDocumentById(cmDocument.getPurapDocumentIdentifier());
+        cmDoc.setHoldIndicator(false);
+        cmDoc.setLastActionPerformedByPersonId(null);
+        purapService.saveDocumentNoValidation(cmDoc);
+
+        // must also save it on the incoming document
+        cmDocument.setHoldIndicator(false);
+        cmDocument.setLastActionPerformedByPersonId(null);
+        
+        return cmDoc;
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.AccountsPayableDocumentSpecificService#updateStatusByNode(java.lang.String, org.kuali.kfs.module.purap.document.AccountsPayableDocument)
+     */
+    public String updateStatusByNode(String currentNodeName, AccountsPayableDocument apDoc) {
+        return updateStatusByNode(currentNodeName, (VendorCreditMemoDocument) apDoc);
+    }
+
+    /**
+     * Updates the status of a credit memo document, currently this is used by the cancel action
+     * 
+     * @param currentNodeName  The string representing the current node to be used to obtain the canceled status code.
+     * @param cmDoc            The credit memo document to be updated.
+     * @return                 The string representing the canceledStatusCode, if empty it is assumed to be not from workflow. 
+     */
+    protected String updateStatusByNode(String currentNodeName, VendorCreditMemoDocument cmDoc) {
+        // update the status on the document
+
+        String cancelledStatusCode = "";
+        if (StringUtils.isEmpty(currentNodeName)) {
+            cancelledStatusCode = PurapConstants.CreditMemoStatuses.CANCELLED_POST_AP_APPROVE;
+        }
+        else {
+            NodeDetails currentNode = NodeDetailEnum.getNodeDetailEnumByName(currentNodeName);
+            if (ObjectUtils.isNotNull(currentNode)) {
+                cancelledStatusCode = currentNode.getDisapprovedStatusCode();
+            }
+        }
+
+        if (StringUtils.isNotBlank(cancelledStatusCode)) {
+            purapService.updateStatus(cmDoc, cancelledStatusCode);
+            purapService.saveDocumentNoValidation(cmDoc);
+            return cancelledStatusCode;
+        }
+        else {
+            logAndThrowRuntimeException("No status found to set for document being disapproved in node '" + currentNodeName + "'");
+        }
+        return cancelledStatusCode;
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#cancelExtractedCreditMemo(org.kuali.kfs.module.purap.document.CreditMemoDocument,
+     *      java.lang.String)
+     */
+    public void cancelExtractedCreditMemo(VendorCreditMemoDocument cmDocument, String note) {
+        LOG.debug("cancelExtractedCreditMemo() started");
+        if (CreditMemoStatuses.CANCELLED_STATUSES.contains(cmDocument.getStatusCode())) {
+            LOG.debug("cancelExtractedCreditMemo() ended");
+            return;
+        }
+
+        try {
+            Note noteObj = documentService.createNoteFromDocument(cmDocument, note);
+            documentService.addNoteToDocument(cmDocument, noteObj);
+        }
+        catch (Exception e) {
+            throw new RuntimeException(e.getMessage());
+        }
+
+        accountsPayableService.cancelAccountsPayableDocument(cmDocument, "");
+        LOG.debug("cancelExtractedCreditMemo() CM " + cmDocument.getPurapDocumentIdentifier() + " Cancelled Without Workflow");
+        LOG.debug("cancelExtractedCreditMemo() ended");
+
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#resetExtractedCreditMemo(org.kuali.kfs.module.purap.document.CreditMemoDocument,
+     *      java.lang.String)
+     */
+    public void resetExtractedCreditMemo(VendorCreditMemoDocument cmDocument, String note) {
+        LOG.debug("resetExtractedCreditMemo() started");
+        if (CreditMemoStatuses.CANCELLED_STATUSES.contains(cmDocument.getStatusCode())) {
+            LOG.debug("resetExtractedCreditMemo() ended");
+            return;
+        }
+        cmDocument.setExtractedTimestamp(null);
+        cmDocument.setCreditMemoPaidTimestamp(null);
+
+        Note noteObj;
+        try {
+            noteObj = documentService.createNoteFromDocument(cmDocument, note);
+            documentService.addNoteToDocument(cmDocument, noteObj);
+        }
+        catch (Exception e) {
+            throw new RuntimeException(e.getMessage());
+        }
+        purapService.saveDocumentNoValidation(cmDocument);
+
+        LOG.debug("resetExtractedCreditMemo() CM " + cmDocument.getPurapDocumentIdentifier() + " Cancelled Without Workflow");
+        LOG.debug("resetExtractedCreditMemo() ended");
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.AccountsPayableDocumentSpecificService#shouldPurchaseOrderBeReversed(org.kuali.kfs.module.purap.document.AccountsPayableDocument)
+     */
+    public boolean shouldPurchaseOrderBeReversed(AccountsPayableDocument apDoc) {
+        // always return false, never reverse
+        return false;
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.AccountsPayableDocumentSpecificService#getPersonForCancel(org.kuali.kfs.module.purap.document.AccountsPayableDocument)
+     */
+    public Person getPersonForCancel(AccountsPayableDocument apDoc) {
+        // return null, since superuser is fine for CM
+        return null;
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.AccountsPayableDocumentSpecificService#takePurchaseOrderCancelAction(org.kuali.kfs.module.purap.document.AccountsPayableDocument)
+     */
+    public void takePurchaseOrderCancelAction(AccountsPayableDocument apDoc) {
+        VendorCreditMemoDocument cmDocument = (VendorCreditMemoDocument) apDoc;
+        if (cmDocument.isReopenPurchaseOrderIndicator()) {
+            String docType = PurapConstants.PurchaseOrderDocTypes.PURCHASE_ORDER_CLOSE_DOCUMENT;
+            purchaseOrderService.createAndRoutePotentialChangeDocument(cmDocument.getPurchaseOrderDocument().getDocumentNumber(), docType, "reopened by Payment Request " + apDoc.getPurapDocumentIdentifier() + "cancel", new ArrayList(), PurapConstants.PurchaseOrderStatuses.PENDING_CLOSE);
+        }
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#markPaid(org.kuali.kfs.module.purap.document.CreditMemoDocument,
+     *      java.sql.Date)
+     */
+    public void markPaid(VendorCreditMemoDocument cm, Date processDate) {
+        LOG.debug("markPaid() started");
+
+        cm.setCreditMemoPaidTimestamp(new Timestamp(processDate.getTime()));
+        purapService.saveDocumentNoValidation(cm);
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.AccountsPayableDocumentSpecificService#poItemEligibleForAp(org.kuali.kfs.module.purap.document.AccountsPayableDocument, org.kuali.kfs.module.purap.businessobject.PurchaseOrderItem)
+     */
+    public boolean poItemEligibleForAp(AccountsPayableDocument apDoc, PurchaseOrderItem poItem) {
+        // if the po item is not active... skip it
+        if (!poItem.isItemActiveIndicator()) {
+            return false;
+        }
+
+        if (poItem.getItemType().isQuantityBasedGeneralLedgerIndicator() && poItem.getItemInvoicedTotalQuantity().isGreaterThan(KualiDecimal.ZERO)) {
+            return true;
+        }
+        else {
+            BigDecimal unitPrice = (poItem.getItemUnitPrice() == null ? new BigDecimal(0) : poItem.getItemUnitPrice());
+            if (unitPrice.doubleValue() > poItem.getItemOutstandingEncumberedAmount().doubleValue()) {
+                return true;
+            }
+        }
+        return false;
+    }
+    
+    /**
+     * The given document here needs to be a Credit Memo.
+     * 
+     * @see org.kuali.kfs.module.purap.document.service.AccountsPayableDocumentSpecificService#generateGLEntriesCreateAccountsPayableDocument(org.kuali.kfs.module.purap.document.AccountsPayableDocument)
+     */
+    public void generateGLEntriesCreateAccountsPayableDocument(AccountsPayableDocument apDocument) {
+        VendorCreditMemoDocument creditMemo = (VendorCreditMemoDocument)apDocument;
+        purapGeneralLedgerService.generateEntriesCreateCreditMemo(creditMemo);
+    }
+
+    /**
+     * Records the specified error message into the Log file and throws a runtime exception.
+     * 
+     * @param errorMessage the error message to be logged.
+     */
+    protected void logAndThrowRuntimeException(String errorMessage) {
+        this.logAndThrowRuntimeException(errorMessage, null);
+    }
+
+    /**
+     * Records the specified error message into the Log file and throws the specified runtime exception.
+     * 
+     * @param errorMessage the specified error message.
+     * @param e the specified runtime exception.
+     */
+    protected void logAndThrowRuntimeException(String errorMessage, Exception e) {
+        if (ObjectUtils.isNotNull(e)) {
+            LOG.error(errorMessage, e);
+            throw new RuntimeException(errorMessage, e);
+        }
+        else {
+            LOG.error(errorMessage);
+            throw new RuntimeException(errorMessage);
+        }
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.CreditMemoService#hasActiveCreditMemosForPurchaseOrder(java.lang.Integer)
+     */
+    public boolean hasActiveCreditMemosForPurchaseOrder(Integer purchaseOrderIdentifier){
+        
+        boolean hasActiveCreditMemos = false;
+        List<String> docNumbers= null;
+        KualiWorkflowDocument workflowDocument = null;
+        
+        docNumbers= creditMemoDao.getActiveCreditMemoDocumentNumbersForPurchaseOrder(purchaseOrderIdentifier);
+        
+        for (String docNumber : docNumbers) {
+            try{
+                workflowDocument = workflowDocumentService.createWorkflowDocument(Long.valueOf(docNumber), GlobalVariables.getUserSession().getPerson());
+            }catch(WorkflowException we){
+                throw new RuntimeException(we);
+            }
+            
+            //if the document is not in a non-active status then return true and stop evaluation
+            if(!(workflowDocument.stateIsCanceled() ||
+                    workflowDocument.stateIsException() ||
+                    workflowDocument.stateIsFinal()) ){
+                hasActiveCreditMemos = true;
+                break;
+            }
+
+        }
+        
+        return hasActiveCreditMemos;
+    }
+
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.CreditMemoCreateService#populateDocumentAfterInit(org.kuali.kfs.module.purap.document.CreditMemoDocument)
+     */
+    public void populateDocumentAfterInit(VendorCreditMemoDocument cmDocument) {
+
+        // make a call to search for expired/closed accounts
+        HashMap<String, ExpiredOrClosedAccountEntry> expiredOrClosedAccountList = accountsPayableService.getExpiredOrClosedAccountList(cmDocument);
+
+        if (cmDocument.isSourceDocumentPaymentRequest()) {
+            populateDocumentFromPreq(cmDocument, expiredOrClosedAccountList);
+        }
+        else if (cmDocument.isSourceDocumentPurchaseOrder()) {
+            populateDocumentFromPO(cmDocument, expiredOrClosedAccountList);
+        }
+        else {
+            populateDocumentFromVendor(cmDocument);
+        }
+
+        populateDocumentDescription(cmDocument);
+
+        // write a note for expired/closed accounts if any exist and add a message stating there were expired/closed accounts at the
+        // top of the document
+        accountsPayableService.generateExpiredOrClosedAccountNote(cmDocument, expiredOrClosedAccountList);
+
+        // set indicator so a message is displayed for accounts that were replaced due to expired/closed status
+        if (!expiredOrClosedAccountList.isEmpty()) {
+            cmDocument.setContinuationAccountIndicator(true);
+        }
+
+    }   
+
+    /**
+     * Populate Credit Memo of type Payment Request.
+     * 
+     * @param cmDocument - Credit Memo Document to Populate
+     */
+    protected void populateDocumentFromPreq(VendorCreditMemoDocument cmDocument, HashMap<String, ExpiredOrClosedAccountEntry> expiredOrClosedAccountList) {
+        PaymentRequestDocument paymentRequestDocument = paymentRequestService.getPaymentRequestById(cmDocument.getPaymentRequestIdentifier());
+        cmDocument.getDocumentHeader().setOrganizationDocumentNumber(paymentRequestDocument.getDocumentHeader().getOrganizationDocumentNumber());
+        cmDocument.setPaymentRequestDocument(paymentRequestDocument);
+        cmDocument.setPurchaseOrderDocument(paymentRequestDocument.getPurchaseOrderDocument());
+        cmDocument.setUseTaxIndicator(paymentRequestDocument.isUseTaxIndicator());
+        
+        // credit memo address taken directly from payment request
+        cmDocument.setVendorHeaderGeneratedIdentifier(paymentRequestDocument.getVendorHeaderGeneratedIdentifier());
+        cmDocument.setVendorDetailAssignedIdentifier(paymentRequestDocument.getVendorDetailAssignedIdentifier());
+        cmDocument.setVendorAddressGeneratedIdentifier(paymentRequestDocument.getVendorAddressGeneratedIdentifier());
+        cmDocument.setVendorCustomerNumber(paymentRequestDocument.getVendorCustomerNumber());
+        cmDocument.setVendorName(paymentRequestDocument.getVendorName());
+        cmDocument.setVendorLine1Address(paymentRequestDocument.getVendorLine1Address());
+        cmDocument.setVendorLine2Address(paymentRequestDocument.getVendorLine2Address());
+        cmDocument.setVendorCityName(paymentRequestDocument.getVendorCityName());
+        cmDocument.setVendorStateCode(paymentRequestDocument.getVendorStateCode());
+        cmDocument.setVendorPostalCode(paymentRequestDocument.getVendorPostalCode());
+        cmDocument.setVendorCountryCode(paymentRequestDocument.getVendorCountryCode());
+        cmDocument.setVendorAttentionName(paymentRequestDocument.getVendorAttentionName());
+        cmDocument.setAccountsPayablePurchasingDocumentLinkIdentifier(paymentRequestDocument.getAccountsPayablePurchasingDocumentLinkIdentifier());
+
+        // prep the item lines (also collect warnings for later display) this is only done on paymentRequest
+        purapAccountingService.convertMoneyToPercent(paymentRequestDocument);
+        populateItemLinesFromPreq(cmDocument, expiredOrClosedAccountList);
+    }
+
+    /**
+     * Populates the credit memo items from the payment request items.
+     * 
+     * @param cmDocument - Credit Memo Document to Populate
+     */
+    protected void populateItemLinesFromPreq(VendorCreditMemoDocument cmDocument, HashMap<String, ExpiredOrClosedAccountEntry> expiredOrClosedAccountList) {
+        PaymentRequestDocument preqDocument = cmDocument.getPaymentRequestDocument();
+
+        for (PaymentRequestItem preqItemToTemplate : (List<PaymentRequestItem>) preqDocument.getItems()) {
+            if (preqItemToTemplate.getItemType().isLineItemIndicator()) {
+                cmDocument.getItems().add(new CreditMemoItem(cmDocument, preqItemToTemplate, preqItemToTemplate.getPurchaseOrderItem(), expiredOrClosedAccountList));
+            }
+        }
+
+        // add below the line items
+        purapService.addBelowLineItems(cmDocument);
+        
+        cmDocument.fixItemReferences();
+    }
+
+    /**
+     * Populate Credit Memo of type Purchase Order.
+     * 
+     * @param cmDocument - Credit Memo Document to Populate
+     */
+    protected void populateDocumentFromPO(VendorCreditMemoDocument cmDocument, HashMap<String, ExpiredOrClosedAccountEntry> expiredOrClosedAccountList) {
+        PurchaseOrderDocument purchaseOrderDocument = purchaseOrderService.getCurrentPurchaseOrder(cmDocument.getPurchaseOrderIdentifier());
+        cmDocument.setPurchaseOrderDocument(purchaseOrderDocument);
+        cmDocument.getDocumentHeader().setOrganizationDocumentNumber(purchaseOrderDocument.getDocumentHeader().getOrganizationDocumentNumber());
+        cmDocument.setUseTaxIndicator(cmDocument.isUseTaxIndicator());
+        
+        cmDocument.setVendorHeaderGeneratedIdentifier(purchaseOrderDocument.getVendorHeaderGeneratedIdentifier());
+        cmDocument.setVendorDetailAssignedIdentifier(purchaseOrderDocument.getVendorDetailAssignedIdentifier());
+        cmDocument.setVendorCustomerNumber(purchaseOrderDocument.getVendorCustomerNumber());
+        cmDocument.setVendorName(purchaseOrderDocument.getVendorName());
+        cmDocument.setAccountsPayablePurchasingDocumentLinkIdentifier(purchaseOrderDocument.getAccountsPayablePurchasingDocumentLinkIdentifier());
+
+        // populate cm vendor address with the default remit address type for the vendor if found
+        String userCampus = GlobalVariables.getUserSession().getPerson().getCampusCode();
+        VendorAddress vendorAddress = vendorService.getVendorDefaultAddress(purchaseOrderDocument.getVendorHeaderGeneratedIdentifier(), purchaseOrderDocument.getVendorDetailAssignedIdentifier(), VendorConstants.AddressTypes.REMIT, userCampus);
+        if (vendorAddress != null) {
+            cmDocument.templateVendorAddress(vendorAddress);
+            cmDocument.setVendorAddressGeneratedIdentifier(vendorAddress.getVendorAddressGeneratedIdentifier());
+            cmDocument.setVendorAttentionName(StringUtils.defaultString(vendorAddress.getVendorAttentionName()));
+        }
+        else {
+            // set address from PO
+            cmDocument.setVendorAddressGeneratedIdentifier(purchaseOrderDocument.getVendorAddressGeneratedIdentifier());
+            cmDocument.setVendorLine1Address(purchaseOrderDocument.getVendorLine1Address());
+            cmDocument.setVendorLine2Address(purchaseOrderDocument.getVendorLine2Address());
+            cmDocument.setVendorCityName(purchaseOrderDocument.getVendorCityName());
+            cmDocument.setVendorStateCode(purchaseOrderDocument.getVendorStateCode());
+            cmDocument.setVendorPostalCode(purchaseOrderDocument.getVendorPostalCode());
+            cmDocument.setVendorCountryCode(purchaseOrderDocument.getVendorCountryCode());
+            
+            boolean blankAttentionLine = StringUtils.equalsIgnoreCase("Y",SpringContext.getBean(KualiConfigurationService.class).getParameterValue(PurapConstants.PURAP_NAMESPACE, "Document", PurapParameterConstants.BLANK_ATTENTION_LINE_FOR_PO_TYPE_ADDRESS));
+            if (blankAttentionLine){
+                cmDocument.setVendorAttentionName(StringUtils.EMPTY);
+            }else{
+                cmDocument.setVendorAttentionName(StringUtils.defaultString(purchaseOrderDocument.getVendorAttentionName()));
+            }
+        }
+
+        populateItemLinesFromPO(cmDocument, expiredOrClosedAccountList);
+    }
+
+    /**
+     * Populates the credit memo items from the payment request items.
+     * 
+     * @param cmDocument - Credit Memo Document to Populate
+     */
+    protected void populateItemLinesFromPO(VendorCreditMemoDocument cmDocument, HashMap<String, ExpiredOrClosedAccountEntry> expiredOrClosedAccountList) {
+        List<PurchaseOrderItem> invoicedItems = getPOInvoicedItems(cmDocument.getPurchaseOrderDocument());
+        for (PurchaseOrderItem poItem : invoicedItems) {
+            CreditMemoItem creditMemoItem = new CreditMemoItem(cmDocument, poItem, expiredOrClosedAccountList);
+            cmDocument.getItems().add(creditMemoItem);
+            PurchasingCapitalAssetItem purchasingCAMSItem = cmDocument.getPurchaseOrderDocument().getPurchasingCapitalAssetItemByItemIdentifier(poItem.getItemIdentifier());
+            if(purchasingCAMSItem!=null) {
+                creditMemoItem.setCapitalAssetTransactionTypeCode(purchasingCAMSItem.getCapitalAssetTransactionTypeCode());
+            } 
+            
+        }
+
+        // add below the line items
+        purapService.addBelowLineItems(cmDocument);
+        
+        cmDocument.fixItemReferences();
+    }
+
+    /**
+     * Populate Credit Memo of type Vendor.
+     * 
+     * @param cmDocument - Credit Memo Document to Populate
+     */
+    protected void populateDocumentFromVendor(VendorCreditMemoDocument cmDocument) {
+        Integer vendorHeaderId = VendorUtils.getVendorHeaderId(cmDocument.getVendorNumber());
+        Integer vendorDetailId = VendorUtils.getVendorDetailId(cmDocument.getVendorNumber());
+
+        VendorDetail vendorDetail = vendorService.getVendorDetail(vendorHeaderId, vendorDetailId);
+        cmDocument.setVendorDetail(vendorDetail);
+        
+        cmDocument.setVendorHeaderGeneratedIdentifier(vendorDetail.getVendorHeaderGeneratedIdentifier());
+        cmDocument.setVendorDetailAssignedIdentifier(vendorDetail.getVendorDetailAssignedIdentifier());
+        cmDocument.setVendorCustomerNumber(vendorDetail.getVendorNumber());
+        cmDocument.setVendorName(vendorDetail.getVendorName());
+
+
+        // credit memo type vendor uses the default remit type address for the vendor if found
+        String userCampus = GlobalVariables.getUserSession().getPerson().getCampusCode();
+        VendorAddress vendorAddress = vendorService.getVendorDefaultAddress(vendorHeaderId, vendorDetailId, VendorConstants.AddressTypes.REMIT, userCampus);
+        if (vendorAddress == null) {
+            // pick up the default vendor po address type
+            vendorAddress = vendorService.getVendorDefaultAddress(vendorHeaderId, vendorDetailId, VendorConstants.AddressTypes.PURCHASE_ORDER, userCampus);
+        }
+
+        cmDocument.setVendorAddressGeneratedIdentifier(vendorAddress.getVendorAddressGeneratedIdentifier());
+        cmDocument.templateVendorAddress(vendorAddress);
+
+        // add below the line items
+        purapService.addBelowLineItems(cmDocument);        
+    }
+
+    /**
+     * Defaults the document description based on the credit memo source type.
+     * 
+     * @param cmDocument - Credit Memo Document to Populate
+     */
+    protected void populateDocumentDescription(VendorCreditMemoDocument cmDocument) {
+        String description = "";
+        if (cmDocument.isSourceVendor()) {
+            description = "Vendor: " + cmDocument.getVendorName();
+        }
+        else {
+            description = "PO: " + cmDocument.getPurchaseOrderDocument().getPurapDocumentIdentifier() + " Vendor: " + cmDocument.getVendorName();
+        }
+
+        // trim description if longer than whats specified in the data dictionary
+        int noteTextMaxLength = dataDictionaryService.getAttributeMaxLength(DocumentHeader.class, KNSPropertyConstants.DOCUMENT_DESCRIPTION).intValue();
+        if (noteTextMaxLength < description.length()) {
+            description = description.substring(0, noteTextMaxLength);
+        }
+
+        cmDocument.getDocumentHeader().setDocumentDescription(description);
+    }
+
+}
+
Index: work/src/org/kuali/kfs/sys/document/validation/impl/BankCodeValidation.java
===================================================================
--- work/src/org/kuali/kfs/sys/document/validation/impl/BankCodeValidation.java	(revision 10957)
+++ work/src/org/kuali/kfs/sys/document/validation/impl/BankCodeValidation.java	(revision 10958)
@@ -15,6 +15,8 @@
  */
 package org.kuali.kfs.sys.document.validation.impl;
 
+import java.util.List;
+
 import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.sys.KFSKeyConstants;
 import org.kuali.kfs.sys.KFSPropertyConstants;
@@ -25,11 +27,20 @@
 import org.kuali.rice.kns.util.GlobalVariables;
 import org.kuali.rice.kns.util.ObjectUtils;
 
+import edu.arizona.kfs.fp.service.UaPaymentMethodGeneralLedgerPendingEntryService;
+
 /**
  * Performs bank code validation.
+ * 
+ * Modified for MOD-PA2000-01 (KITT-592) to add conditional validation based on the payment method code
+ * 
  */
 public class BankCodeValidation {
 
+    protected static final String WARNING_BANK_NOT_REQUIRED = "warning.document.disbursementvoucher.bank.not.required";
+    protected static final String ERROR_BANK_REQUIRED_PER_PAYMENT_METHOD = "error.document.disbursementvoucher.bank.required";
+    private static UaPaymentMethodGeneralLedgerPendingEntryService paymentMethodGeneralLedgerPendingEntryService;
+
     /**
      * Performs required, exists, and active validation of bank code. Also validates bank for deposit or disbursement indicator if
      * requested. .
@@ -41,36 +52,56 @@
      * @return true if bank code passes all validations, false if any fail
      */
     public static boolean validate(String bankCode, String bankCodeProperty, boolean requireDeposit, boolean requireDisbursement) {
-        String bankCodeLabel = SpringContext.getBean(DataDictionaryService.class).getAttributeLabel(Bank.class, KFSPropertyConstants.BANK_CODE);
+        return validate(bankCode, bankCodeProperty, null, requireDeposit, requireDisbursement);
+    }
+    
+    /**
+     * Performs required, exists, and active validation of bank code. Also validates bank for deposit or disbursement indicator if
+     * requested. .
+     * 
+     * @param bankCode value to validate
+     * @param bankCodeProperty property to associate errors with
+     * @param required true if the bank code is required
+     * @param requireDeposit true if the bank code should support deposits
+     * @param requireDisbursement true if the bank code should support disbursements
+     * @return true if bank code passes all validations, false if any fail
+     */
+    public static boolean validate(String bankCode, String bankCodeProperty, String paymentMethodCode, boolean requireDeposit, boolean requireDisbursement) {
 
         // if bank specification is not enabled, no need to validate bank code
         if (!SpringContext.getBean(BankService.class).isBankSpecificationEnabled()) {
             return true;
         }
 
+        Bank bank = SpringContext.getBean(BankService.class).getByPrimaryId(bankCode);
         // required check
-        if (StringUtils.isBlank(bankCode)) {
-            GlobalVariables.getMessageMap().putError(bankCodeProperty, KFSKeyConstants.ERROR_REQUIRED, bankCodeLabel);
-
-            return false;
+        // if the payment method code is blank, then revert to the baseline behavior
+        if ( StringUtils.isBlank(paymentMethodCode) ) {
+            if (StringUtils.isBlank(bankCode)) {
+                String bankCodeLabel = SpringContext.getBean(DataDictionaryService.class).getAttributeLabel(Bank.class, KFSPropertyConstants.BANK_CODE);
+                GlobalVariables.getMessageMap().putError(bankCodeProperty, KFSKeyConstants.ERROR_REQUIRED, bankCodeLabel);    
+                return false;
+            }            
+            if (ObjectUtils.isNull(bank)) {
+                GlobalVariables.getMessageMap().putError(bankCodeProperty, KFSKeyConstants.ERROR_DOCUMENT_BANKACCMAINT_INVALID_BANK);
+                return false;
+            }            
+        } else {
+            if ( !checkBankCodePopulation(bankCode, paymentMethodCode, bankCodeProperty, true) ) {
+                return false;
+            }
         }
 
-        Bank bank = SpringContext.getBean(BankService.class).getByPrimaryId(bankCode);
         
-        if (ObjectUtils.isNull(bank)) {
-            GlobalVariables.getMessageMap().putError(bankCodeProperty, KFSKeyConstants.ERROR_DOCUMENT_BANKACCMAINT_INVALID_BANK);
-            return false;
-        }
-        
         // validate deposit
-        if (requireDeposit && !bank.isBankDepositIndicator()) {
+        if (bank != null && requireDeposit && !bank.isBankDepositIndicator()) {
             GlobalVariables.getMessageMap().putError(bankCodeProperty, KFSKeyConstants.Bank.ERROR_DEPOSIT_NOT_SUPPORTED);
 
             return false;
         }
 
         // validate disbursement
-        if (requireDisbursement && !bank.isBankDisbursementIndicator()) {
+        if (bank != null && requireDisbursement && !bank.isBankDisbursementIndicator()) {
             GlobalVariables.getMessageMap().putError(bankCodeProperty, KFSKeyConstants.Bank.ERROR_DISBURSEMENT_NOT_SUPPORTED);
 
             return false;
@@ -79,4 +110,33 @@
         return true;
     }
 
+    public static boolean doesBankCodeNeedToBePopulated( String paymentMethodCode ) {
+        return getPaymentMethodGeneralLedgerPendingEntryService().getBankForPaymentMethod(paymentMethodCode) != null;
+    }
+    
+    public static boolean checkBankCodePopulation( String bankCode, String paymentMethodCode, String bankCodeProperty, boolean addMessages ) {
+        boolean bankCodeNeedsPopulation = doesBankCodeNeedToBePopulated(paymentMethodCode);
+        // if the payment method uses a bank code and none has been filled in (the user blanked it), throw an error
+        if ( bankCodeNeedsPopulation && StringUtils.isBlank( bankCode ) ) {
+            // error
+            if ( addMessages ) {
+                GlobalVariables.getMessageMap().putError( bankCodeProperty, ERROR_BANK_REQUIRED_PER_PAYMENT_METHOD, paymentMethodCode);
+            }
+            return false;
+        } else if ( !bankCodeNeedsPopulation && StringUtils.isNotBlank( bankCode ) ) {
+            // if the bank code on the document is not blank but no bank code is specified for the payment method, blank and warn the user.
+            if ( addMessages ) {
+                GlobalVariables.getMessageMap().putWarning( bankCodeProperty, WARNING_BANK_NOT_REQUIRED, paymentMethodCode);
+            }
+        }
+        return true;
+    }
+
+    protected static UaPaymentMethodGeneralLedgerPendingEntryService getPaymentMethodGeneralLedgerPendingEntryService() {
+        if ( paymentMethodGeneralLedgerPendingEntryService == null ) {
+            paymentMethodGeneralLedgerPendingEntryService = SpringContext.getBean(UaPaymentMethodGeneralLedgerPendingEntryService.class);
+        }
+        return paymentMethodGeneralLedgerPendingEntryService;
+    }
+    
 }
Index: work/src/edu/arizona/kfs/fp/service/impl/UaPaymentMethodGeneralLedgerPendingEntryServiceImpl.java
===================================================================
--- work/src/edu/arizona/kfs/fp/service/impl/UaPaymentMethodGeneralLedgerPendingEntryServiceImpl.java	(revision 0)
+++ work/src/edu/arizona/kfs/fp/service/impl/UaPaymentMethodGeneralLedgerPendingEntryServiceImpl.java	(revision 10958)
@@ -0,0 +1,397 @@
+/*
+ * Copyright 2010 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.arizona.kfs.fp.service.impl;
+
+import static org.kuali.kfs.sys.KFSConstants.GL_CREDIT_CODE;
+import static org.kuali.kfs.sys.KFSConstants.GL_DEBIT_CODE;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.log4j.Logger;
+import org.kuali.kfs.coa.businessobject.ObjectCode;
+import org.kuali.kfs.coa.service.ObjectCodeService;
+import org.kuali.kfs.fp.businessobject.WireCharge;
+import org.kuali.kfs.sys.KFSConstants;
+import org.kuali.kfs.sys.KFSKeyConstants;
+import org.kuali.kfs.sys.businessobject.Bank;
+import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntry;
+import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntrySequenceHelper;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.kfs.sys.document.AccountingDocument;
+import org.kuali.kfs.sys.document.GeneralLedgerPostingDocument;
+import org.kuali.kfs.sys.document.service.AccountingDocumentRuleHelperService;
+import org.kuali.kfs.sys.document.validation.impl.AccountingDocumentRuleBaseConstants.GENERAL_LEDGER_PENDING_ENTRY_CODE;
+import org.kuali.kfs.sys.service.BankService;
+import org.kuali.kfs.sys.service.GeneralLedgerPendingEntryService;
+import org.kuali.kfs.sys.service.HomeOriginationService;
+import org.kuali.kfs.sys.service.NonTransactional;
+import org.kuali.kfs.sys.service.OptionsService;
+import org.kuali.kfs.sys.service.UniversityDateService;
+import org.kuali.kfs.sys.service.impl.KfsParameterConstants;
+import org.kuali.rice.kns.service.BusinessObjectService;
+import org.kuali.rice.kns.service.ParameterService;
+import org.kuali.rice.kns.util.KualiDecimal;
+import org.kuali.rice.kns.util.spring.CacheNoCopy;
+
+import edu.arizona.kfs.fp.businessobject.PaymentMethod;
+import edu.arizona.kfs.fp.businessobject.PaymentMethodChart;
+import edu.arizona.kfs.fp.service.UaPaymentMethodGeneralLedgerPendingEntryService;
+
+/**
+ * 
+ * @author jonathan
+ * @see UaPaymentMethodGeneralLedgerPendingEntryService
+ */
+@NonTransactional
+public class UaPaymentMethodGeneralLedgerPendingEntryServiceImpl implements UaPaymentMethodGeneralLedgerPendingEntryService {
+    private static Logger LOG = Logger.getLogger(UaPaymentMethodGeneralLedgerPendingEntryServiceImpl.class);
+
+    protected static final String DEFAULT_PAYMENT_METHOD_IF_MISSING = "A"; // check/ACH
+    
+    private GeneralLedgerPendingEntryService generalLedgerPendingEntryService;
+    private ObjectCodeService objectCodeService;
+    private ParameterService parameterService;
+    private BusinessObjectService businessObjectService;
+    private BankService bankService;
+    
+
+    /**
+     * @see edu.arizona.kfs.fp.service.UaPaymentMethodGeneralLedgerPendingEntryService#isPaymentMethodProcessedUsingPdp(java.lang.String)
+     */
+    @CacheNoCopy
+    public boolean isPaymentMethodProcessedUsingPdp(String paymentMethodCode) {
+        if ( StringUtils.isBlank(paymentMethodCode) ) {
+            paymentMethodCode = DEFAULT_PAYMENT_METHOD_IF_MISSING;
+        }
+        PaymentMethod pm = getBusinessObjectService().findBySinglePrimaryKey(PaymentMethod.class, paymentMethodCode);
+        if ( pm != null ) {
+            return pm.isProcessedUsingPdp();
+        }
+        return false;
+    }
+    
+    /**
+     * This implementation will also return null if the bank code on the payment method record does not exist in the bank table.
+     * 
+     * @see edu.arizona.kfs.fp.service.UaPaymentMethodGeneralLedgerPendingEntryService#getBankForPaymentMethod(java.lang.String)
+     */
+    public Bank getBankForPaymentMethod(String paymentMethodCode) {
+        if ( StringUtils.isBlank(paymentMethodCode) ) {
+            paymentMethodCode = DEFAULT_PAYMENT_METHOD_IF_MISSING;
+        }
+        PaymentMethod pm = getBusinessObjectService().findBySinglePrimaryKey(PaymentMethod.class, paymentMethodCode);
+        if ( pm != null ) {
+            // if no bank code, short circuit and return null
+            if ( pm.getBankCode() != null ) {
+                return pm.getBank();
+            }
+        }
+        return null;
+    }
+    
+    /**
+     * Generates additional document-level GL entries for the DV, depending on the payment method code. 
+     * 
+     * Return true if GLPE's are generated successfully (i.e. there are either 0 GLPE's or 1 GLPE in disbursement voucher document)
+     * 
+     * @param financialDocument submitted financial document
+     * @param sequenceHelper helper class to keep track of GLPE sequence
+     * @return true if GLPE's are generated successfully
+     */
+    public boolean generatePaymentMethodSpecificDocumentGeneralLedgerPendingEntries(
+            AccountingDocument document, String paymentMethodCode, String bankCode, String bankCodePropertyName, 
+            GeneralLedgerPendingEntry templatePendingEntry, 
+            boolean feesWaived, boolean reverseCharge, GeneralLedgerPendingEntrySequenceHelper sequenceHelper) {
+        if ( StringUtils.isBlank(paymentMethodCode) ) {
+            paymentMethodCode = DEFAULT_PAYMENT_METHOD_IF_MISSING;
+        }
+        PaymentMethod pm = getBusinessObjectService().findBySinglePrimaryKey(PaymentMethod.class, paymentMethodCode);
+        // no payment method? abort.
+        if ( pm == null ) {
+            return false;
+        }
+        
+        if ( pm.isAssessedFees() ) {
+            if ( !feesWaived ) {
+                generateFeeAssessmentEntries(pm, document, templatePendingEntry, sequenceHelper, reverseCharge);
+            }                        
+        }
+        
+        if ( pm.isOffsetUsingClearingAccount() ) {
+            generateClearingAccountOffsetEntries(pm, document, sequenceHelper);
+        }
+        
+        if ( !pm.isProcessedUsingPdp() && StringUtils.isNotBlank( bankCode ) ) {
+            generateDocumentBankOffsetEntries(document,bankCode,bankCodePropertyName,templatePendingEntry.getFinancialDocumentTypeCode(), sequenceHelper);
+        }
+        
+        return true;
+    }
+    
+    /**
+     * Generates the GL entries to charge the department for the foreign draft and credit the Wire Charge
+     * Fee Account as specified by system parameters.
+     * 
+     * @param document Document into which to add the generated GL Entries.
+     * 
+     * @see edu.arizona.kfs.fp.service.UaPaymentMethodGeneralLedgerPendingEntryService#generateForeignDraftChargeEntries(org.kuali.kfs.sys.document.AccountingDocument, org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntrySequenceHelper)
+     */
+    protected boolean generateFeeAssessmentEntries(PaymentMethod pm, AccountingDocument document, GeneralLedgerPendingEntry templatePendingEntry, GeneralLedgerPendingEntrySequenceHelper sequenceHelper, boolean reverseEntries) {
+        LOG.debug("generateForeignDraftChargeEntries started");
+        
+        PaymentMethodChart pmc = pm.getPaymentMethodChartInfo(templatePendingEntry.getChartOfAccountsCode(), new java.sql.Date( document.getDocumentHeader().getWorkflowDocument().getCreateDate().getTime() ) );
+        if ( pmc == null ) {
+            LOG.warn( "No Applicable PaymentMethodChart found for chart: " + templatePendingEntry.getChartOfAccountsCode() + " and date: " + document.getDocumentHeader().getWorkflowDocument().getCreateDate() );
+            return false;
+        }
+        // Get all the parameters which control these entries
+        String feeIncomeChartCode = pmc.getFeeIncomeChartOfAccountsCode();
+        String feeIncomeAccountNumber = pmc.getFeeIncomeAccountNumber();
+        String feeExpenseObjectCode = pmc.getFeeExpenseFinancialObjectCode();
+        String feeIncomeObjectCode = pmc.getFeeIncomeFinancialObjectCode();
+        KualiDecimal feeAmount = pmc.getFeeAmount();
+        
+        // grab the explicit entry for the first accounting line and adjust for the foreign draft fee
+        GeneralLedgerPendingEntry chargeEntry = new GeneralLedgerPendingEntry(document.getGeneralLedgerPendingEntry(0));        
+        chargeEntry.setTransactionLedgerEntrySequenceNumber(sequenceHelper.getSequenceCounter());
+        
+        // change the object code (expense to the department)
+        chargeEntry.setFinancialObjectCode(feeExpenseObjectCode);
+        chargeEntry.setFinancialSubObjectCode(GENERAL_LEDGER_PENDING_ENTRY_CODE.getBlankFinancialSubObjectCode());
+        chargeEntry.setTransactionLedgerEntryDescription( StringUtils.left( "Automatic debit for " + pm.getPaymentMethodName() + " fee", 40 ));
+        chargeEntry.setFinancialBalanceTypeCode(KFSConstants.BALANCE_TYPE_ACTUAL);
+
+        // retrieve object type
+        ObjectCode objectCode = getObjectCodeService().getByPrimaryIdForCurrentYear(chargeEntry.getChartOfAccountsCode(), chargeEntry.getFinancialObjectCode());
+        if ( objectCode == null ) {
+            LOG.fatal("Specified offset object code: " + chargeEntry.getChartOfAccountsCode() + "-" + chargeEntry.getFinancialObjectCode() + " does not exist - failed to generate foreign draft fee entries", new RuntimeException() );
+            return false;
+        }       
+        chargeEntry.setFinancialObjectTypeCode(objectCode.getFinancialObjectTypeCode());
+        
+        // Set the amount from the parameter
+        chargeEntry.setTransactionLedgerEntryAmount(feeAmount);
+        chargeEntry.setTransactionDebitCreditCode(reverseEntries?GL_CREDIT_CODE:GL_DEBIT_CODE);
+
+        document.addPendingEntry(chargeEntry);
+        sequenceHelper.increment();
+
+        // handle the offset entry
+        GeneralLedgerPendingEntry offsetEntry = new GeneralLedgerPendingEntry(chargeEntry);
+        getGeneralLedgerPendingEntryService().populateOffsetGeneralLedgerPendingEntry(document.getPostingYear(), chargeEntry, sequenceHelper, offsetEntry);
+
+        document.addPendingEntry(offsetEntry);
+        sequenceHelper.increment();
+        
+        // Now, create the income entry in the AP Foreign draft fee account
+        
+        GeneralLedgerPendingEntry feeIncomeEntry = new GeneralLedgerPendingEntry(document.getGeneralLedgerPendingEntry(0));
+        feeIncomeEntry.setTransactionLedgerEntrySequenceNumber(sequenceHelper.getSequenceCounter());
+
+        feeIncomeEntry.setChartOfAccountsCode(feeIncomeChartCode);
+        feeIncomeEntry.setAccountNumber(feeIncomeAccountNumber);
+        feeIncomeEntry.setFinancialObjectCode(feeIncomeObjectCode);
+        feeIncomeEntry.setFinancialSubObjectCode(GENERAL_LEDGER_PENDING_ENTRY_CODE.getBlankFinancialSubObjectCode());
+        feeIncomeEntry.setSubAccountNumber(GENERAL_LEDGER_PENDING_ENTRY_CODE.getBlankSubAccountNumber());
+        feeIncomeEntry.setProjectCode(GENERAL_LEDGER_PENDING_ENTRY_CODE.getBlankProjectCode());
+
+        // retrieve object type
+        objectCode = getObjectCodeService().getByPrimaryIdForCurrentYear(feeIncomeChartCode, feeIncomeObjectCode);
+        if ( objectCode == null ) {
+            LOG.fatal("Specified income object code: " + feeIncomeChartCode + "-" + feeIncomeObjectCode + " does not exist - failed to generate foreign draft income entries", new RuntimeException() );
+            return false;
+        }
+        feeIncomeEntry.setFinancialObjectTypeCode(objectCode.getFinancialObjectTypeCode());       
+        feeIncomeEntry.setTransactionLedgerEntryAmount(feeAmount);
+        feeIncomeEntry.setTransactionDebitCreditCode(KFSConstants.GL_CREDIT_CODE);
+        feeIncomeEntry.setFinancialBalanceTypeCode(KFSConstants.BALANCE_TYPE_ACTUAL);
+
+        document.addPendingEntry(feeIncomeEntry);
+        sequenceHelper.increment();
+        
+        // create the offset entry
+        offsetEntry = new GeneralLedgerPendingEntry(feeIncomeEntry);
+        getGeneralLedgerPendingEntryService().populateOffsetGeneralLedgerPendingEntry(document.getPostingYear(), feeIncomeEntry, sequenceHelper, offsetEntry);
+
+        document.addPendingEntry(offsetEntry);
+        sequenceHelper.increment();
+        
+        return true;
+    }
+    
+    /**
+     * Adds up the amounts of all cash to offset GeneralLedgerPendingEntry records on the given AccountingDocument
+     * 
+     * MOD-PA2000-01 : Copied from the GL Pending entry service since that one does not make any distinction between
+     * expense and encumbrance balance types
+     * 
+     * @author jonathan
+     * 
+     * @param glPostingDocument the accounting document total the offset to cash amount for
+     * @return the offset to cash amount, where debited values have been subtracted and credited values have been added
+     */
+    protected Map<String,KualiDecimal> getNonOffsetActualTotalsByChart(GeneralLedgerPostingDocument glPostingDocument) {
+        Map<String,KualiDecimal> totals = new HashMap<String, KualiDecimal>();
+        for (GeneralLedgerPendingEntry glpe : glPostingDocument.getGeneralLedgerPendingEntries()) {
+            if ( KFSConstants.BALANCE_TYPE_ACTUAL.equals(glpe.getFinancialBalanceTypeCode()) ) {
+                if ( !glpe.isTransactionEntryOffsetIndicator() ) {
+                    if ( !totals.containsKey(glpe.getChartOfAccountsCode() ) ) {
+                        totals.put(glpe.getChartOfAccountsCode(), KualiDecimal.ZERO);
+                    }
+                    if (glpe.getTransactionDebitCreditCode().equals(KFSConstants.GL_DEBIT_CODE)) {
+                        totals.put(glpe.getChartOfAccountsCode(),totals.get(glpe.getChartOfAccountsCode()).add(glpe.getTransactionLedgerEntryAmount()));
+                    } else if (glpe.getTransactionDebitCreditCode().equals(KFSConstants.GL_CREDIT_CODE)) {
+                        totals.put(glpe.getChartOfAccountsCode(),totals.get(glpe.getChartOfAccountsCode()).subtract(glpe.getTransactionLedgerEntryAmount()));
+                    }
+                }
+            }
+        }
+        return totals;
+    }    
+
+    /**
+     * When the "A" payment method is used for AP Credit Cards - generate the needed entries in the clearing account.
+     * 
+     * @param document Document into which to add the generated GL Entries.
+     * @param sequenceHelper helper class to keep track of GLPE sequence
+     * 
+     * @see UaPaymentMethodGeneralLedgerPendingEntryService#generateAccountsPayableCreditCardOffsetEntries(AccountingDocument, GeneralLedgerPendingEntrySequenceHelper)
+     */
+    public boolean generateClearingAccountOffsetEntries(PaymentMethod pm, AccountingDocument document, GeneralLedgerPendingEntrySequenceHelper sequenceHelper) {
+        Map<String,KualiDecimal> actualTotalsByChart = getNonOffsetActualTotalsByChart(document);
+
+        for ( String chart : actualTotalsByChart.keySet() ) {
+            KualiDecimal offsetAmount = actualTotalsByChart.get(chart);
+            PaymentMethodChart pmc = pm.getPaymentMethodChartInfo(chart, new java.sql.Date( document.getDocumentHeader().getWorkflowDocument().getCreateDate().getTime() ) );
+            if ( pmc == null ) {
+                LOG.warn( "No Applicable PaymentMethodChart found for chart: " + chart + " and date: " + document.getDocumentHeader().getWorkflowDocument().getCreateDate() );
+                // skip this line - still attempt for other charts
+                continue;
+            }
+            String clearingChartCode = pmc.getClearingChartOfAccountsCode();
+            String clearingAccountNumber = pmc.getClearingAccountNumber();
+            String clearingObjectCode = pmc.getClearingFinancialObjectCode(); // liability object code
+            
+            GeneralLedgerPendingEntry apOffsetEntry = new GeneralLedgerPendingEntry(document.getGeneralLedgerPendingEntry(0));
+            apOffsetEntry.setTransactionLedgerEntrySequenceNumber(new Integer(sequenceHelper.getSequenceCounter()));
+
+            apOffsetEntry.setChartOfAccountsCode(clearingChartCode);
+            apOffsetEntry.setAccountNumber(clearingAccountNumber);
+            apOffsetEntry.setFinancialObjectCode(clearingObjectCode);
+            apOffsetEntry.setFinancialSubObjectCode(GENERAL_LEDGER_PENDING_ENTRY_CODE.getBlankFinancialSubObjectCode());
+            apOffsetEntry.setSubAccountNumber(GENERAL_LEDGER_PENDING_ENTRY_CODE.getBlankSubAccountNumber());
+            apOffsetEntry.setProjectCode(GENERAL_LEDGER_PENDING_ENTRY_CODE.getBlankProjectCode());
+
+            // retrieve object type
+            ObjectCode objectCode = getObjectCodeService().getByPrimaryIdForCurrentYear(clearingChartCode, clearingObjectCode);
+            if ( objectCode == null ) {
+                LOG.fatal("Specified offset object code: " + clearingChartCode + "-" + clearingObjectCode + " does not exist - failed to generate CC offset entries", new RuntimeException() );
+                return false;
+            }
+            apOffsetEntry.setFinancialObjectTypeCode(objectCode.getFinancialObjectTypeCode());       
+            apOffsetEntry.setTransactionLedgerEntryAmount(offsetAmount.abs());
+            apOffsetEntry.setTransactionDebitCreditCode(offsetAmount.isNegative()?KFSConstants.GL_DEBIT_CODE:KFSConstants.GL_CREDIT_CODE);
+            apOffsetEntry.setFinancialBalanceTypeCode(KFSConstants.BALANCE_TYPE_ACTUAL);
+
+            document.addPendingEntry(apOffsetEntry);
+            sequenceHelper.increment();
+            
+            // handle the offset entry
+            GeneralLedgerPendingEntry offsetEntry = new GeneralLedgerPendingEntry(apOffsetEntry);
+            getGeneralLedgerPendingEntryService().populateOffsetGeneralLedgerPendingEntry(document.getPostingYear(), apOffsetEntry, sequenceHelper, offsetEntry);
+
+            document.addPendingEntry(offsetEntry);
+            sequenceHelper.increment();
+        }
+        
+
+        
+
+        return true;
+    }
+
+    /**
+     * If bank specification is enabled generates bank offsetting entries for the document amount
+     * 
+     */
+    public boolean generateDocumentBankOffsetEntries(AccountingDocument document, String bankCode, String bankCodePropertyName, String documentTypeCode, GeneralLedgerPendingEntrySequenceHelper sequenceHelper) {
+        boolean success = true;
+
+        if (!SpringContext.getBean(BankService.class).isBankSpecificationEnabled()) {
+            return success;
+        }
+        Bank bank = getBankService().getByPrimaryId(bankCode);
+        
+        final KualiDecimal bankOffsetAmount = getGeneralLedgerPendingEntryService().getOffsetToCashAmount(document).negated();
+        GeneralLedgerPendingEntry bankOffsetEntry = new GeneralLedgerPendingEntry();
+        success &= getGeneralLedgerPendingEntryService()
+                .populateBankOffsetGeneralLedgerPendingEntry(bank, bankOffsetAmount, document, 
+                        document.getPostingYear(), sequenceHelper, bankOffsetEntry, bankCodePropertyName);
+
+        if (success) {
+            AccountingDocumentRuleHelperService accountingDocumentRuleUtil = SpringContext.getBean(AccountingDocumentRuleHelperService.class);
+            bankOffsetEntry.setTransactionLedgerEntryDescription(accountingDocumentRuleUtil.formatProperty(KFSKeyConstants.Bank.DESCRIPTION_GLPE_BANK_OFFSET));
+            bankOffsetEntry.setFinancialDocumentTypeCode(documentTypeCode);
+            document.addPendingEntry(bankOffsetEntry);
+            sequenceHelper.increment();
+
+            GeneralLedgerPendingEntry offsetEntry = new GeneralLedgerPendingEntry(bankOffsetEntry);
+            success &= getGeneralLedgerPendingEntryService().populateOffsetGeneralLedgerPendingEntry(document.getPostingYear(), bankOffsetEntry, sequenceHelper, offsetEntry);
+            bankOffsetEntry.setFinancialDocumentTypeCode(documentTypeCode);
+            document.addPendingEntry(offsetEntry);
+            sequenceHelper.increment();
+        }
+
+        return success;
+    }
+    
+    protected GeneralLedgerPendingEntryService getGeneralLedgerPendingEntryService() {
+        if ( generalLedgerPendingEntryService == null ) {
+            generalLedgerPendingEntryService = SpringContext.getBean(GeneralLedgerPendingEntryService.class);
+        }
+        return generalLedgerPendingEntryService;
+    }
+    
+    protected ObjectCodeService getObjectCodeService() {
+        if ( objectCodeService == null ) {
+            objectCodeService = SpringContext.getBean(ObjectCodeService.class);
+        }
+        return objectCodeService;
+    }
+    
+    protected ParameterService getParameterService() {
+        if ( parameterService == null ) {
+            parameterService = SpringContext.getBean(ParameterService.class);
+        }
+        return parameterService;
+    }
+
+    protected BusinessObjectService getBusinessObjectService() {
+        if ( businessObjectService == null ) {
+            businessObjectService = SpringContext.getBean(BusinessObjectService.class);
+        }
+        return businessObjectService;
+    }
+    
+    protected BankService getBankService() {
+        if ( bankService == null ) {
+            bankService = SpringContext.getBean(BankService.class);
+        }
+        return bankService;
+    }
+}
Index: work/src/edu/arizona/kfs/fp/service/UaPaymentMethodGeneralLedgerPendingEntryService.java
===================================================================
--- work/src/edu/arizona/kfs/fp/service/UaPaymentMethodGeneralLedgerPendingEntryService.java	(revision 0)
+++ work/src/edu/arizona/kfs/fp/service/UaPaymentMethodGeneralLedgerPendingEntryService.java	(revision 10958)
@@ -0,0 +1,72 @@
+/*
+ * Copyright 2010 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.arizona.kfs.fp.service;
+
+import org.kuali.kfs.sys.businessobject.Bank;
+import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntry;
+import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntrySequenceHelper;
+import org.kuali.kfs.sys.document.AccountingDocument;
+
+/**
+ * Helper service to generate GL entries for FP and PURAP documents which are specific
+ * to certain payment method codes.
+ * 
+ * @author jonathan
+ */
+public interface UaPaymentMethodGeneralLedgerPendingEntryService {
+
+    /**
+     * Get the default bank for the payment method.  Returns null if the payment method code does not use a bank.
+     * 
+     * @param paymentMethodCode
+     * @return Bank from PaymentMethod record. null if paymentMethodCode is null, bankCode is null, or the bank does not exist. 
+     */
+    Bank getBankForPaymentMethod( String paymentMethodCode );
+
+    /**
+     * Generates the appropriate GL pending entries for the given payment method based on the payment method code.
+     * 
+     * @param document
+     * @param paymentMethodCode
+     * @param bankCode
+     * @param bankCodePropertyName
+     * @param documentTypeCode Document type code to use on the GL pending entries.
+     * @param templatePendingEntry
+     * @param feesWaived
+     * @param reverseCharge
+     * @param sequenceHelper
+     * @return
+     */
+    boolean generatePaymentMethodSpecificDocumentGeneralLedgerPendingEntries(
+            AccountingDocument document,
+            String paymentMethodCode,
+            String bankCode, 
+            String bankCodePropertyName, // for error messages
+            GeneralLedgerPendingEntry templatePendingEntry,
+            boolean feesWaived,
+            boolean reverseCharge,
+            GeneralLedgerPendingEntrySequenceHelper sequenceHelper);
+    
+    
+    /**
+     * Returns whether the given payment method should be processed using the PDP component. 
+     * 
+     * @param paymentMethodCode
+     * @return
+     */
+    boolean isPaymentMethodProcessedUsingPdp( String paymentMethodCode );
+    
+}
Index: work/src/edu/arizona/kfs/fp/batch/service/impl/UaDisbursementVoucherExtractServiceImpl.java
===================================================================
--- work/src/edu/arizona/kfs/fp/batch/service/impl/UaDisbursementVoucherExtractServiceImpl.java	(revision 0)
+++ work/src/edu/arizona/kfs/fp/batch/service/impl/UaDisbursementVoucherExtractServiceImpl.java	(revision 10958)
@@ -0,0 +1,80 @@
+/*
+ * Copyright 2010 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.arizona.kfs.fp.batch.service.impl;
+
+import java.util.ArrayList;
+import java.util.Collection;
+
+import org.kuali.kfs.fp.batch.service.impl.DisbursementVoucherExtractServiceImpl;
+import org.kuali.kfs.fp.document.DisbursementVoucherConstants;
+import org.kuali.kfs.fp.document.DisbursementVoucherDocument;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.kfs.sys.document.service.FinancialSystemDocumentService;
+import org.kuali.rice.kew.exception.WorkflowException;
+import org.kuali.rice.kns.service.DataDictionaryService;
+
+import edu.arizona.kfs.fp.service.UaPaymentMethodGeneralLedgerPendingEntryService;
+
+/**
+ * Override the extract payments method to use the new payment method table information.
+ * 
+ */
+public class UaDisbursementVoucherExtractServiceImpl extends DisbursementVoucherExtractServiceImpl {
+    private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(UaDisbursementVoucherExtractServiceImpl.class);
+
+    private UaPaymentMethodGeneralLedgerPendingEntryService paymentMethodGeneralLedgerPendingEntryService;
+    
+    
+    /**
+     * 
+     * @see org.kuali.kfs.fp.batch.service.impl.DisbursementVoucherExtractServiceImpl#getListByDocumentStatusCodeCampus(java.lang.String, java.lang.String)
+     */
+    @Override
+    protected Collection<DisbursementVoucherDocument> getListByDocumentStatusCodeCampus(String statusCode, String campusCode) {        
+        LOG.debug("getListByDocumentStatusCodeCampus() started");
+
+        Collection<DisbursementVoucherDocument> list = new ArrayList<DisbursementVoucherDocument>();
+
+        try {
+            Collection<DisbursementVoucherDocument> docs = SpringContext.getBean(FinancialSystemDocumentService.class).findByDocumentHeaderStatusCode(SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName("DV"), statusCode);
+            for (DisbursementVoucherDocument doc : docs) {
+                String docCampusCode = doc.getCampusCode();
+
+                if (docCampusCode.equals(campusCode) 
+                        && getPaymentMethodGeneralLedgerPendingEntryService().isPaymentMethodProcessedUsingPdp(doc.getDisbVchrPaymentMethodCode())) {
+                    list.add(doc);
+                }
+            }
+        } catch (WorkflowException we) {
+            LOG.error("Could not load Disbursement Voucher Documents with status code = " + statusCode + ": " + we);
+            throw new RuntimeException("Could not load Disbursement Voucher Documents with status code = " + statusCode, we);
+        }
+
+        return list;
+    }
+
+
+    protected UaPaymentMethodGeneralLedgerPendingEntryService getPaymentMethodGeneralLedgerPendingEntryService() {
+        if ( paymentMethodGeneralLedgerPendingEntryService == null ) {
+            paymentMethodGeneralLedgerPendingEntryService = SpringContext.getBean(UaPaymentMethodGeneralLedgerPendingEntryService.class);
+        }
+        return paymentMethodGeneralLedgerPendingEntryService;
+    }
+
+    public void setPaymentMethodGeneralLedgerPendingEntryService(UaPaymentMethodGeneralLedgerPendingEntryService paymentMethodGeneralLedgerPendingEntryService) {
+        this.paymentMethodGeneralLedgerPendingEntryService = paymentMethodGeneralLedgerPendingEntryService;
+    }
+}
Index: work/src/edu/arizona/kfs/fp/spring-fp.xml
===================================================================
--- work/src/edu/arizona/kfs/fp/spring-fp.xml	(revision 10957)
+++ work/src/edu/arizona/kfs/fp/spring-fp.xml	(revision 10958)
@@ -51,6 +51,12 @@
 			   <value>edu/arizona/kfs/fp/ojb-fp.xml</value> 
 			</list>
 		</property>
+		 <!--  MOD-PA2000-01 - Add the new needed DWR configuration -->
+		<property name="scriptConfigurationFilePaths">
+			<list merge="true">
+				<value>edu/arizona/kfs/fp/dwr-fp.xml</value>
+			</list>
+		</property>
         <property name="batchFileDirectories">
           <list merge="true">
             <value>${reports.directory}/prje</value>
@@ -189,6 +195,36 @@
 				p:localServiceName="objectSubTypeCodeRoleTypeService" />
 		</property>
 	</bean>	
+	
+	<bean id="uaPaymentMethodGeneralLedgerPendingEntryService" class="edu.arizona.kfs.fp.service.impl.UaPaymentMethodGeneralLedgerPendingEntryServiceImpl" />
+	
+	<bean id="disbursementVoucherExtractService" class="edu.arizona.kfs.fp.batch.service.impl.UaDisbursementVoucherExtractServiceImpl">
+		<property name="parameterService">
+			<ref bean="parameterService"/>
+		</property>
+		<property name="disbursementVoucherDao">
+			<ref bean="disbursementVoucherDao"/>
+		</property>
+		<property name="dateTimeService">
+			<ref bean="dateTimeService"/>
+		</property>
+		<property name="customerProfileService">
+			<ref bean="pdpCustomerProfileService"/>
+		</property>
+		<property name="paymentFileService">
+			<ref bean="paymentFileService"/>
+		</property>
+		<property name="paymentGroupService">
+			<ref bean="pdpPaymentGroupService"/>
+		</property>
+		<property name="businessObjectService">
+			<ref bean="businessObjectService"/>
+		</property>
+		<property name="paymentFileEmailService">
+			<ref bean="pdpEmailService"/>
+		</property>
+	</bean>
+	
 
 	<!-- KITT-966 changed to unscheduled -->
 	<bean id="procurementCardHolderJob" parent="unscheduledJobDescriptor">
Index: work/src/edu/arizona/kfs/fp/ojb-fp.xml
===================================================================
--- work/src/edu/arizona/kfs/fp/ojb-fp.xml	(revision 10957)
+++ work/src/edu/arizona/kfs/fp/ojb-fp.xml	(revision 10958)
@@ -663,6 +663,84 @@
         <foreignkey field-ref="clearingFinancialObjectCode" />
     </reference-descriptor>
 </class-descriptor>
+
+<class-descriptor class="edu.arizona.kfs.fp.document.UaDisbursementVoucherDocument" table="FP_DV_DOC_T">
+    <field-descriptor name="documentNumber" column="FDOC_NBR" jdbc-type="VARCHAR" primarykey="true" />
+    <field-descriptor name="versionNumber" column="VER_NBR" jdbc-type="BIGINT" locking="true" />
+    <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true" />
+    <field-descriptor name="nextSourceLineNumber" column="FDOC_NXT_LINE_NBR" jdbc-type="INTEGER" />
+    <field-descriptor name="finDocNextRegistrantLineNbr" column="FDOC_NXT_REG_NBR" jdbc-type="INTEGER" />
+    <field-descriptor name="disbVchrContactPersonName" column="DV_CNTCT_PRSN_NM" jdbc-type="VARCHAR" />
+    <field-descriptor name="disbVchrContactPhoneNumber" column="DV_CNTCT_PHN_NBR" jdbc-type="VARCHAR" />
+    <field-descriptor name="disbVchrContactEmailId" column="DV_CNTCT_EMAIL_ID" jdbc-type="VARCHAR" />
+    <field-descriptor name="postingYear" column="FDOC_POST_YR" jdbc-type="INTEGER" />
+    <field-descriptor name="postingPeriodCode" column="FDOC_POST_PRD_CD" jdbc-type="VARCHAR" />
+    <field-descriptor name="disbursementVoucherDueDate" column="DV_DUE_DT" jdbc-type="DATE" />
+    <field-descriptor name="disbVchrAttachmentCode" column="DV_ATTCH_IND" jdbc-type="CHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion" />
+    <field-descriptor name="disbVchrSpecialHandlingCode" column="DV_SPCL_HANDLG_IND" jdbc-type="CHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion" />
+    <field-descriptor name="disbVchrCheckTotalAmount" column="DV_CHK_TOT_AMT" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion" />
+    <field-descriptor name="disbVchrForeignCurrencyInd" column="DV_FRGN_CRNCY_IND" jdbc-type="CHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion" />
+    <field-descriptor name="disbursementVoucherDocumentationLocationCode" column="DV_DOC_LOC_CD" jdbc-type="VARCHAR" />
+    <field-descriptor name="disbVchrCheckStubText" column="DV_CHK_STUB_TXT" jdbc-type="VARCHAR" />
+    <field-descriptor name="dvCheckStubOverflowCode" column="DV_CHKSTUBOVFL_IND" jdbc-type="CHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion" />
+    <field-descriptor name="campusCode" column="CAMPUS_CD" jdbc-type="VARCHAR" />
+    <field-descriptor name="disbVchrPayeeTaxControlCode" column="DV_PAYEE_TXCTRL_CD" jdbc-type="VARCHAR" />
+    <field-descriptor name="disbVchrPayeeChangedInd" column="DV_PAYEE_CHG_IND" jdbc-type="CHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion" />
+    <field-descriptor name="disbursementVoucherCheckNbr" column="DV_CHK_NBR" jdbc-type="VARCHAR" />
+    <field-descriptor name="disbursementVoucherCheckDate" column="DV_CHK_DT" jdbc-type="TIMESTAMP" />
+    <field-descriptor name="disbVchrPayeeW9CompleteCode" column="DV_W9_CMPLT_IND" jdbc-type="CHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion" />
+    <field-descriptor name="disbVchrPaymentMethodCode" column="DV_PMT_MTHD_CD" jdbc-type="VARCHAR" />
+    <field-descriptor name="disbVchrBankCode" column="DV_BNK_CD" jdbc-type="VARCHAR" />   
+    <field-descriptor name="extractDate" column="DV_EXTRT_DT" jdbc-type="DATE" />
+    <field-descriptor name="paidDate" column="DV_PD_DT" jdbc-type="DATE" />
+    <field-descriptor name="cancelDate" column="DV_CNCL_DT" jdbc-type="DATE" />
+    <field-descriptor name="disbVchrPdpBankCode" column="DV_PDP_BNK_CD" jdbc-type="VARCHAR" />   
+    
+    <reference-descriptor name="documentHeader" class-ref="org.kuali.kfs.sys.businessobject.FinancialSystemDocumentHeader" auto-retrieve="true" auto-update="object" auto-delete="object" proxy="true" >
+        <foreignkey field-ref="documentNumber" />
+    </reference-descriptor>
+
+    <reference-descriptor name="disbVchrDocumentationLoc" class-ref="org.kuali.kfs.fp.businessobject.DisbursementVoucherDocumentationLocation" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="disbursementVoucherDocumentationLocationCode" />
+    </reference-descriptor>
+
+    <reference-descriptor name="dvNonEmployeeTravel" class-ref="org.kuali.kfs.fp.businessobject.DisbursementVoucherNonEmployeeTravel" auto-retrieve="true" auto-update="object" auto-delete="object" proxy="true" >
+        <foreignkey field-ref="documentNumber" />
+    </reference-descriptor>
+
+    <reference-descriptor name="dvNonResidentAlienTax" class-ref="org.kuali.kfs.fp.businessobject.DisbursementVoucherNonResidentAlienTax" auto-retrieve="true" auto-update="object" auto-delete="object" proxy="true" >
+        <foreignkey field-ref="documentNumber" />
+    </reference-descriptor>
+
+    <reference-descriptor name="dvPayeeDetail" class-ref="org.kuali.kfs.fp.businessobject.DisbursementVoucherPayeeDetail" auto-retrieve="true" auto-update="object" auto-delete="object" proxy="true" >
+        <foreignkey field-ref="documentNumber" />
+    </reference-descriptor>
+
+    <reference-descriptor name="dvPreConferenceDetail" class-ref="org.kuali.kfs.fp.businessobject.DisbursementVoucherPreConferenceDetail" auto-retrieve="true" auto-update="object" auto-delete="object" proxy="true" >
+        <foreignkey field-ref="documentNumber" />
+    </reference-descriptor>
+
+    <reference-descriptor name="dvWireTransfer" class-ref="org.kuali.kfs.fp.businessobject.DisbursementVoucherWireTransfer" auto-retrieve="true" auto-update="object" auto-delete="object" proxy="true" >
+        <foreignkey field-ref="documentNumber" />
+    </reference-descriptor>
+    
+    <reference-descriptor name="bank" class-ref="org.kuali.kfs.sys.businessobject.Bank" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="disbVchrBankCode" />
+    </reference-descriptor>   
+
+    <collection-descriptor name="sourceAccountingLines" proxy="true" element-class-ref="org.kuali.kfs.sys.businessobject.SourceAccountingLine" collection-class="org.apache.ojb.broker.util.collections.ManageableArrayList" auto-retrieve="true" auto-update="object" auto-delete="object">
+        <orderby name="sequenceNumber" sort="ASC" />
+        <inverse-foreignkey field-ref="documentNumber" />
+				<query-customizer class="org.kuali.kfs.sys.dataaccess.impl.OjbQueryCustomizer">
+						<attribute attribute-name="financialDocumentLineTypeCode" attribute-value="F" />
+				</query-customizer>
+    </collection-descriptor>
+
+    <collection-descriptor name="generalLedgerPendingEntries" proxy="true" element-class-ref="org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntry" collection-class="org.apache.ojb.broker.util.collections.ManageableArrayList" auto-retrieve="true" auto-update="object" auto-delete="object">
+        <orderby name="transactionLedgerEntrySequenceNumber" sort="ASC" />
+        <inverse-foreignkey field-ref="documentNumber" />
+    </collection-descriptor>
+</class-descriptor>
 <!-- END MOD -->
 <class-descriptor class="edu.arizona.kfs.fp.businessobject.ProcurementCardTranShipSvc" table="FP_PRCRMNT_TRN_SHIP_T">
     <field-descriptor name="transactionSequenceRowNumber" column="TRN_SEQ_ROW_NBR" jdbc-type="INTEGER" primarykey="true" index="true" />
Index: work/src/edu/arizona/kfs/fp/document/datadictionary/DisbursementVoucherDocument.xml
===================================================================
--- work/src/edu/arizona/kfs/fp/document/datadictionary/DisbursementVoucherDocument.xml	(revision 10957)
+++ work/src/edu/arizona/kfs/fp/document/datadictionary/DisbursementVoucherDocument.xml	(revision 10958)
@@ -5,10 +5,28 @@
 xsi:schemaLocation="http://www.springframework.org/schema/beans         
 http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
 
-  <bean id="DisbursementVoucherDocument" parent="DisbursementVoucherDocument-parentBean">
-    <property name="documentPresentationControllerClass" value="edu.arizona.kfs.fp.document.authorization.DocuwareDisbursementVoucherDocumentPresentationController"/>    
-  </bean>
+    <bean id="DisbursementVoucherDocument" parent="DisbursementVoucherDocument-parentBean">
+		<!--
+			MOD-PA2000-01 Override the document data dictionary entry to add
+			the bank setting in prepareForSave.
+		-->
+		<property name="documentClass" value="edu.arizona.kfs.fp.document.UaDisbursementVoucherDocument" />
+		<property name="baseDocumentClass" value="org.kuali.kfs.fp.document.DisbursementVoucherDocument" />
+
+	    <property name="documentPresentationControllerClass" value="edu.arizona.kfs.fp.document.authorization.DocuwareDisbursementVoucherDocumentPresentationController"/>    
+    </bean>
+	<!--
+		MOD-PA2000-01: Redefine the payment method attribute to use the new control. 
+	 -->
+	<bean id="DisbursementVoucherDocument-disbVchrPaymentMethodCode" parent="DisbursementVoucherDocument-disbVchrPaymentMethodCode-parentBean">
+		<property name="control" ref="PaymentMethodsForDVSelectControl" />
+	</bean>
   
+    <!-- bank code is now optional -->
+    <bean id="DisbursementVoucherDocument-disbVchrBankCode" parent="DisbursementVoucherDocument-disbVchrBankCode-parentBean">
+  		<property name="required" value="false" />
+ 	</bean>
+  
   <!-- workflow attributes for routing -->
   <bean id="DisbursementVoucherDocument-workflowAttributes" parent="DisbursementVoucherDocument-workflowAttributes-parentBean">
   	<property name="routingTypeDefinitions">
Index: work/src/edu/arizona/kfs/fp/document/UaDisbursementVoucherDocument.java
===================================================================
--- work/src/edu/arizona/kfs/fp/document/UaDisbursementVoucherDocument.java	(revision 0)
+++ work/src/edu/arizona/kfs/fp/document/UaDisbursementVoucherDocument.java	(revision 10958)
@@ -0,0 +1,154 @@
+/*
+ * Copyright 2009 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.arizona.kfs.fp.document;
+
+import org.apache.log4j.Logger;
+import org.kuali.kfs.fp.document.DisbursementVoucherConstants;
+import org.kuali.kfs.fp.document.DisbursementVoucherDocument;
+import org.kuali.kfs.sys.KFSConstants;
+import org.kuali.kfs.sys.KFSPropertyConstants;
+import org.kuali.kfs.sys.businessobject.Bank;
+import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntry;
+import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntrySequenceHelper;
+import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntrySourceDetail;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kew.util.KEWConstants;
+import org.kuali.rice.kns.document.authorization.DocumentAuthorizer;
+import org.kuali.rice.kns.service.DocumentHelperService;
+import org.kuali.rice.kns.service.ParameterConstants.COMPONENT;
+import org.kuali.rice.kns.util.GlobalVariables;
+import org.kuali.rice.kns.util.KNSConstants;
+
+import edu.arizona.kfs.fp.businessobject.options.PaymentMethodValuesFinder;
+import edu.arizona.kfs.fp.service.UaPaymentMethodGeneralLedgerPendingEntryService;
+
+/**
+ * Document class override to ensure that the bank code is synchronized with the
+ * payment method code.
+ * 
+ * @author jonathan
+ */
+// This annotation is needed to make parameter lookups work properly
+@COMPONENT( component = "DisbursementVoucher" )
+public class UaDisbursementVoucherDocument extends DisbursementVoucherDocument {
+    private static Logger LOG = Logger.getLogger(UaDisbursementVoucherDocument.class);
+
+    public static final String DOCUMENT_TYPE_DV_NON_CHECK = "DVNC";
+    
+    private static UaPaymentMethodGeneralLedgerPendingEntryService paymentMethodGeneralLedgerPendingEntryService;
+
+    @Override
+    public void prepareForSave() {
+        super.prepareForSave();
+
+        // First, only do this if the document is in initiated status - after that, we don't want to 
+        // accidentally reset the bank code
+        if ( KEWConstants.ROUTE_HEADER_INITIATED_CD.equals( getDocumentHeader().getWorkflowDocument().getRouteHeader().getDocRouteStatus() )
+                || KEWConstants.ROUTE_HEADER_SAVED_CD.equals( getDocumentHeader().getWorkflowDocument().getRouteHeader().getDocRouteStatus() ) ) {
+            // need to check whether the user has the permission to edit the bank code
+            // if so, don't synchronize since we can't tell whether the value coming in
+            // was entered by the user or not.        
+            DocumentAuthorizer docAuth = SpringContext.getBean(DocumentHelperService.class).getDocumentAuthorizer(this);
+            if ( !docAuth.isAuthorizedByTemplate(this, 
+                    KFSConstants.ParameterNamespaces.KFS, 
+                    KFSConstants.PermissionTemplate.EDIT_BANK_CODE.name, 
+                    GlobalVariables.getUserSession().getPrincipalId()  ) ) {
+                synchronizeBankCodeWithPaymentMethod();        
+            }
+            refreshReferenceObject( "bank" );
+        }        
+    }
+
+    protected void synchronizeBankCodeWithPaymentMethod() {
+        Bank bank = getPaymentMethodGeneralLedgerPendingEntryService().getBankForPaymentMethod( getDisbVchrPaymentMethodCode() );
+        if ( bank != null ) {
+            setDisbVchrBankCode(bank.getBankCode());
+        } else {
+            // no bank code, no bank needed
+            setDisbVchrBankCode(null);
+            setBank(null);
+        }
+    }
+    
+    /**
+     * Override to change the doc type based on payment method. This is needed to pick up different offset definitions.
+     * 
+     * MOD-PA2000-01
+     * Replacing baseline method completely since has an else clause which needs to be replaced.
+     * 
+     * @param financialDocument submitted accounting document
+     * @param accountingLine accounting line in submitted accounting document
+     * @param explicitEntry explicit GLPE
+     * @see org.kuali.module.financial.rules.FinancialDocumentRuleBase#customizeExplicitGeneralLedgerPendingEntry(org.kuali.rice.kns.document.FinancialDocument,
+     *      org.kuali.rice.kns.bo.AccountingLine, org.kuali.module.gl.bo.GeneralLedgerPendingEntry)
+     */
+    @Override
+    public void customizeExplicitGeneralLedgerPendingEntry(GeneralLedgerPendingEntrySourceDetail accountingLine, GeneralLedgerPendingEntry explicitEntry) {
+
+        /* change document type based on payment method to pick up different offsets */
+        if ( getPaymentMethodGeneralLedgerPendingEntryService().isPaymentMethodProcessedUsingPdp(getDisbVchrPaymentMethodCode())) {
+            explicitEntry.setFinancialDocumentTypeCode(DisbursementVoucherConstants.DOCUMENT_TYPE_CHECKACH);
+        } else { // wire transfer or foreign draft
+            explicitEntry.setFinancialDocumentTypeCode(DOCUMENT_TYPE_DV_NON_CHECK);
+        }
+        if ( LOG.isDebugEnabled() ) {
+            LOG.debug("changed doc type on pending entry " + explicitEntry.getTransactionLedgerEntrySequenceNumber() + " to " + explicitEntry.getFinancialDocumentTypeCode() );
+        }
+    }
+
+    
+    /**
+     * Generates additional document-level GL entries for the DV, depending on the payment method code. 
+     * 
+     * Return true if GLPE's are generated successfully (i.e. there are either 0 GLPE's or 1 GLPE in disbursement voucher document)
+     * 
+     * @param financialDocument submitted financial document
+     * @param sequenceHelper helper class to keep track of GLPE sequence
+     * @return true if GLPE's are generated successfully
+     * @see org.kuali.rice.kns.rule.GenerateGeneralLedgerDocumentPendingEntriesRule#processGenerateDocumentGeneralLedgerPendingEntries(org.kuali.rice.kns.document.FinancialDocument,org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntrySequenceHelper)
+     */
+    @Override
+    public boolean generateDocumentGeneralLedgerPendingEntries(GeneralLedgerPendingEntrySequenceHelper sequenceHelper) {
+        if (getGeneralLedgerPendingEntries() == null || getGeneralLedgerPendingEntries().size() < 2) {
+            LOG.warn("No gl entries for accounting lines.");
+            return true;
+        }
+        // waive any fees only for wire charges when the waiver flag is set
+        boolean feesWaived = DisbursementVoucherConstants.PAYMENT_METHOD_WIRE.equals(getDisbVchrPaymentMethodCode()) 
+                && getDvWireTransfer().isDisbursementVoucherWireTransferFeeWaiverIndicator();
+
+        getPaymentMethodGeneralLedgerPendingEntryService().generatePaymentMethodSpecificDocumentGeneralLedgerPendingEntries(this,getDisbVchrPaymentMethodCode(), getDisbVchrBankCode(),KNSConstants.DOCUMENT_PROPERTY_NAME + "." + KFSPropertyConstants.DISB_VCHR_BANK_CODE, getGeneralLedgerPendingEntry(0), feesWaived, false, sequenceHelper);
+        
+        return true;
+    }
+    
+    /**
+     * Returns the name associated with the payment method code
+     * 
+     * @return String
+     */
+    public String getDisbVchrPaymentMethodName() {
+        return new PaymentMethodValuesFinder().getKeyLabel(getDisbVchrPaymentMethodCode());
+    }
+    
+    protected UaPaymentMethodGeneralLedgerPendingEntryService getPaymentMethodGeneralLedgerPendingEntryService() {
+        if ( paymentMethodGeneralLedgerPendingEntryService == null ) {
+            paymentMethodGeneralLedgerPendingEntryService = SpringContext.getBean(UaPaymentMethodGeneralLedgerPendingEntryService.class);
+        }
+        return paymentMethodGeneralLedgerPendingEntryService;
+    }
+
+}
Index: work/src/edu/arizona/kfs/fp/document/workflow/DisbursementVoucherNonCheck.xml
===================================================================
--- work/src/edu/arizona/kfs/fp/document/workflow/DisbursementVoucherNonCheck.xml	(revision 0)
+++ work/src/edu/arizona/kfs/fp/document/workflow/DisbursementVoucherNonCheck.xml	(revision 10958)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<data xmlns="ns:workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="ns:workflow resource:WorkflowData">
+  <documentTypes xmlns="ns:workflow/DocumentType" xsi:schemaLocation="ns:workflow/DocumentType resource:DocumentType">
+    <documentType>
+      <name>DVNC</name>
+      <parent>FSLO</parent>
+      <label>Disbursement Voucher - Non-Check</label>
+      <active>true</active>
+      <routingVersion>2</routingVersion>
+      <routePaths />
+    </documentType>
+  </documentTypes>
+</data>
Index: work/src/edu/arizona/kfs/fp/document/web/struts/DisbursementVoucherForm.java
===================================================================
--- work/src/edu/arizona/kfs/fp/document/web/struts/DisbursementVoucherForm.java	(revision 10957)
+++ work/src/edu/arizona/kfs/fp/document/web/struts/DisbursementVoucherForm.java	(revision 10958)
@@ -1,46 +1,55 @@
-/*
- * Copyright 2009 The Kuali Foundation.
- * 
- * Licensed under the Educational Community License, Version 1.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.opensource.org/licenses/ecl1.php
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package edu.arizona.kfs.fp.document.web.struts;
-
-import org.kuali.kfs.fp.document.DisbursementVoucherDocument;
-import org.kuali.kfs.sys.context.SpringContext;
-import org.kuali.rice.kns.service.ParameterService;
-import org.kuali.rice.kns.web.format.SimpleBooleanFormatter;
-
-import edu.arizona.kfs.sys.AZKFSConstants;
-
-public class DisbursementVoucherForm extends org.kuali.kfs.fp.document.web.struts.DisbursementVoucherForm {
-    protected static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(DisbursementVoucherForm.class);
-
-    private String docuwareTableParam;
-
-    /**
-     * Constructs a DisbursementVoucherForm.java.
-     */
-    public DisbursementVoucherForm() {
-        super();
-    }
-
-    /**
-     * Gets the docuwareTableParam attribute.
-     *   
-     * @return Returns the docuwareTableParam.
-     */
-    public String getDocuwareTableParam() {
-        return SpringContext.getBean(ParameterService.class).getParameterValue(DisbursementVoucherDocument.class, AZKFSConstants.DOCUWARE_TABLE_PARAMETER);
-    }
-
-}
+/*
+ * Copyright 2009 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.arizona.kfs.fp.document.web.struts;
+
+import org.kuali.kfs.fp.document.DisbursementVoucherDocument;
+import org.kuali.kfs.module.purap.PurapConstants;
+import org.kuali.kfs.module.purap.document.PaymentRequestDocument;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kns.service.DataDictionaryService;
+import org.kuali.rice.kns.service.ParameterService;
+import org.kuali.rice.kns.web.format.SimpleBooleanFormatter;
+
+import edu.arizona.kfs.sys.AZKFSConstants;
+
+public class DisbursementVoucherForm extends org.kuali.kfs.fp.document.web.struts.DisbursementVoucherForm {
+    protected static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(DisbursementVoucherForm.class);
+
+    private String docuwareTableParam;
+
+    /**
+     * Constructs a DisbursementVoucherForm.java.
+     */
+    public DisbursementVoucherForm() {
+        super();
+        try {
+            setDocument( (DisbursementVoucherDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(getDefaultDocumentTypeName()).newInstance() );
+        }
+        catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+
+    /**
+     * Gets the docuwareTableParam attribute.
+     *   
+     * @return Returns the docuwareTableParam.
+     */
+    public String getDocuwareTableParam() {
+        return SpringContext.getBean(ParameterService.class).getParameterValue(DisbursementVoucherDocument.class, AZKFSConstants.DOCUWARE_TABLE_PARAMETER);
+    }
+
+}
Index: work/src/edu/arizona/kfs/fp/dwr-fp.xml
===================================================================
--- work/src/edu/arizona/kfs/fp/dwr-fp.xml	(revision 0)
+++ work/src/edu/arizona/kfs/fp/dwr-fp.xml	(revision 10958)
@@ -0,0 +1,16 @@
+<!DOCTYPE dwr PUBLIC "-//GetAhead Limited//DTD Direct Web Remoting 1.0//EN" "http://www.getahead.ltd.uk/dwr/dwr10.dtd">
+
+<dwr>
+
+	<init>
+		<creator id="spring"
+			class="org.kuali.rice.kns.web.servlet.dwr.GlobalResourceDelegatingSpringCreator" />
+	</init>
+	<allow>
+		<create creator="spring" javascript="UaPaymentMethodGeneralLedgerPendingEntryService">
+			<param name="beanName" value="uaPaymentMethodGeneralLedgerPendingEntryService" />
+			<include method="getBankForPaymentMethod" />
+		</create>
+	</allow>
+
+</dwr>
Index: work/src/edu/arizona/kfs/module/purap/service/impl/UaPurchaseOrderServiceImpl.java
===================================================================
--- work/src/edu/arizona/kfs/module/purap/service/impl/UaPurchaseOrderServiceImpl.java	(revision 0)
+++ work/src/edu/arizona/kfs/module/purap/service/impl/UaPurchaseOrderServiceImpl.java	(revision 10958)
@@ -0,0 +1,47 @@
+/*
+ * Copyright 2010 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.arizona.kfs.module.purap.service.impl;
+
+import org.kuali.kfs.module.purap.PurapConstants;
+import org.kuali.kfs.module.purap.PurapParameterConstants;
+import org.kuali.kfs.module.purap.document.PurchaseOrderDocument;
+import org.kuali.kfs.module.purap.document.RequisitionDocument;
+import org.kuali.kfs.module.purap.document.service.impl.PurchaseOrderServiceImpl;
+import org.kuali.rice.kew.exception.WorkflowException;
+
+public class UaPurchaseOrderServiceImpl extends PurchaseOrderServiceImpl {
+
+
+    /**
+     * For B2B orders, default to the central receiving address always and set the
+     * delivery address to that.
+     * 
+     * @see org.kuali.kfs.module.purap.document.service.impl.PurchaseOrderServiceImpl#generatePurchaseOrderFromRequisition(org.kuali.kfs.module.purap.document.RequisitionDocument)
+     */
+    @Override
+    protected PurchaseOrderDocument generatePurchaseOrderFromRequisition(RequisitionDocument reqDocument) throws WorkflowException {
+        PurchaseOrderDocument po = super.generatePurchaseOrderFromRequisition(reqDocument);
+
+        if (PurapConstants.RequisitionSources.B2B.equals(po.getRequisitionSourceCode())) {
+            // ensure the default receiving address is set
+            po.loadReceivingAddress();
+            // set to use the receiving address by default  
+            po.setAddressToVendorIndicator(true);
+        }
+
+        return po;
+    }
+}
Index: work/src/edu/arizona/kfs/module/purap/service/impl/UaElectronicInvoiceHelperServiceImpl.java
===================================================================
--- work/src/edu/arizona/kfs/module/purap/service/impl/UaElectronicInvoiceHelperServiceImpl.java	(revision 0)
+++ work/src/edu/arizona/kfs/module/purap/service/impl/UaElectronicInvoiceHelperServiceImpl.java	(revision 10958)
@@ -0,0 +1,223 @@
+/*
+ * Copyright 2010 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.arizona.kfs.module.purap.service.impl;
+
+import java.util.HashMap;
+
+import org.apache.commons.lang.StringUtils;
+import org.apache.log4j.Logger;
+import org.kuali.kfs.module.purap.PurapConstants;
+import org.kuali.kfs.module.purap.businessobject.ElectronicInvoiceRejectReason;
+import org.kuali.kfs.module.purap.document.PaymentRequestDocument;
+import org.kuali.kfs.module.purap.document.PurchaseOrderDocument;
+import org.kuali.kfs.module.purap.document.RequisitionDocument;
+import org.kuali.kfs.module.purap.document.service.AccountsPayableService;
+import org.kuali.kfs.module.purap.document.service.PaymentRequestService;
+import org.kuali.kfs.module.purap.document.service.RequisitionService;
+import org.kuali.kfs.module.purap.document.validation.event.AttributedCalculateAccountsPayableEvent;
+import org.kuali.kfs.module.purap.document.validation.event.AttributedPaymentRequestForEInvoiceEvent;
+import org.kuali.kfs.module.purap.service.impl.ElectronicInvoiceHelperServiceImpl;
+import org.kuali.kfs.module.purap.service.impl.ElectronicInvoiceOrderHolder;
+import org.kuali.kfs.module.purap.util.ExpiredOrClosedAccountEntry;
+import org.kuali.kfs.sys.businessobject.Bank;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.kfs.sys.service.BankService;
+import org.kuali.rice.kew.exception.WorkflowException;
+import org.kuali.rice.kim.bo.Person;
+import org.kuali.rice.kim.service.PersonService;
+import org.kuali.rice.kns.exception.ValidationException;
+import org.kuali.rice.kns.service.DocumentService;
+import org.kuali.rice.kns.service.KualiRuleService;
+import org.kuali.rice.kns.util.GlobalVariables;
+import org.kuali.rice.kns.util.KualiDecimal;
+
+import edu.arizona.kfs.fp.service.UaPaymentMethodGeneralLedgerPendingEntryService;
+import edu.arizona.kfs.module.purap.document.UaPaymentRequestDocument;
+import edu.arizona.kfs.vnd.businessobject.VendorDetailExtension;
+
+public class UaElectronicInvoiceHelperServiceImpl extends ElectronicInvoiceHelperServiceImpl {
+    protected static final String DEFAULT_EINVOICE_PAYMENT_METHOD_CODE = "A";
+    protected static final Logger LOG = Logger.getLogger(ElectronicInvoiceHelperServiceImpl.class);
+
+    @Override
+    protected PaymentRequestDocument createPaymentRequest(ElectronicInvoiceOrderHolder orderHolder) {
+        
+        if (LOG.isInfoEnabled()){
+            LOG.info("Creating Payment Request document");
+        }
+        
+        GlobalVariables.getMessageList().clear();
+        
+        validateInvoiceOrderValidForPREQCreation(orderHolder);
+        
+        if (LOG.isInfoEnabled()){
+            if (orderHolder.isInvoiceRejected()){
+                LOG.info("Not possible to convert einvoice details into payment request");
+            }else{
+                LOG.info("Payment request document creation validation succeeded");
+            }
+        }
+        
+        if (orderHolder.isInvoiceRejected()){
+            return null;
+        }
+        
+        PaymentRequestDocument preqDoc = null;
+        try {
+            preqDoc = (PaymentRequestDocument) SpringContext.getBean(DocumentService.class).getNewDocument("PREQ");
+        } catch (WorkflowException e) {
+            String extraDescription = "Error=" + e.getMessage();
+            ElectronicInvoiceRejectReason rejectReason = matchingService.createRejectReason(PurapConstants.ElectronicInvoice.PREQ_WORKLOW_EXCEPTION,          
+                                                                                            extraDescription, 
+                                                                                            orderHolder.getFileName());
+            orderHolder.addInvoiceOrderRejectReason(rejectReason);
+            LOG.error("Error creating Payment request document - " + e.getMessage());
+            return null;
+        }
+        
+        PurchaseOrderDocument poDoc = orderHolder.getPurchaseOrderDocument();
+        if (poDoc == null){
+            throw new RuntimeException("Purchase Order document (POId=" + orderHolder.getInvoicePurchaseOrderID() + ") does not exist in the system");
+        }
+        
+        preqDoc.getDocumentHeader().setDocumentDescription(generatePREQDocumentDescription(poDoc));        
+        preqDoc.setStatusCode(PurapConstants.PaymentRequestStatuses.IN_PROCESS);
+        preqDoc.setInvoiceDate(orderHolder.getInvoiceDate());
+        preqDoc.setInvoiceNumber(orderHolder.getInvoiceNumber());
+        preqDoc.setVendorInvoiceAmount(new KualiDecimal(orderHolder.getInvoiceNetAmount()));
+        preqDoc.setAccountsPayableProcessorIdentifier("E-Invoice");
+        preqDoc.setVendorCustomerNumber(orderHolder.getCustomerNumber());
+        preqDoc.setPaymentRequestElectronicInvoiceIndicator(true);
+        
+        if (orderHolder.getAccountsPayablePurchasingDocumentLinkIdentifier() != null){
+            preqDoc.setAccountsPayablePurchasingDocumentLinkIdentifier(orderHolder.getAccountsPayablePurchasingDocumentLinkIdentifier());
+        }
+        
+        // KITT-592 - updated to copy the payment method code from vendor detail
+        // and default the bank in based on that
+        boolean hasPaymentMethodCode = false;
+        if ( preqDoc instanceof UaPaymentRequestDocument ) {
+            String vendorPaymentMethodCode = ((VendorDetailExtension)poDoc.getVendorDetail().getExtension()).getDefaultB2BPaymentMethodCode();
+            if ( StringUtils.isNotEmpty(vendorPaymentMethodCode) ) { 
+                ((UaPaymentRequestDocument)preqDoc).setPaymentMethodCode(vendorPaymentMethodCode);
+                hasPaymentMethodCode = true;
+            } else {
+                ((UaPaymentRequestDocument)preqDoc).setPaymentMethodCode(DEFAULT_EINVOICE_PAYMENT_METHOD_CODE);
+            }
+        }
+        Bank defaultBank = null;
+        if ( hasPaymentMethodCode ) {
+            defaultBank = SpringContext.getBean(UaPaymentMethodGeneralLedgerPendingEntryService.class).getBankForPaymentMethod( ((UaPaymentRequestDocument)preqDoc).getPaymentMethodCode() );
+        } else { // default to baseline behavior - extended documents not in use
+            //Copied from PaymentRequestServiceImpl.populatePaymentRequest()
+            //set bank code to default bank code in the system parameter
+            defaultBank = SpringContext.getBean(BankService.class).getDefaultBankByDocType(PaymentRequestDocument.class);
+        }
+        if (defaultBank != null) {
+            preqDoc.setBankCode(defaultBank.getBankCode());
+            preqDoc.setBank(defaultBank);
+        }
+        
+        RequisitionDocument reqDoc = SpringContext.getBean(RequisitionService.class).getRequisitionById(poDoc.getRequisitionIdentifier());
+        String reqDocInitiator = reqDoc.getDocumentHeader().getWorkflowDocument().getInitiatorPrincipalId();
+        try {
+            Person user = SpringContext.getBean(PersonService.class).getPerson(reqDocInitiator);
+            preqDoc.setProcessingCampusCode(user.getCampusCode());
+        }catch(Exception e){
+            String extraDescription = "Error setting processing campus code - " + e.getMessage();
+            ElectronicInvoiceRejectReason rejectReason = matchingService.createRejectReason(PurapConstants.ElectronicInvoice.PREQ_ROUTING_VALIDATION_ERROR, extraDescription, orderHolder.getFileName());
+            orderHolder.addInvoiceOrderRejectReason(rejectReason);
+            return null;
+        }
+        
+        HashMap<String, ExpiredOrClosedAccountEntry> expiredOrClosedAccountList = SpringContext.getBean(AccountsPayableService.class).expiredOrClosedAccountsList(poDoc);
+        if (expiredOrClosedAccountList == null){
+            expiredOrClosedAccountList = new HashMap<String, ExpiredOrClosedAccountEntry>(0);
+        }
+        
+        if (LOG.isInfoEnabled()){
+             LOG.info(expiredOrClosedAccountList.size() + " accounts have been found as Expired or Closed");
+        }
+        
+        preqDoc.populatePaymentRequestFromPurchaseOrder(orderHolder.getPurchaseOrderDocument(),expiredOrClosedAccountList);
+        
+        populateItemDetails(preqDoc,orderHolder);
+        
+        /*
+         * Validate totals,paydate
+         */
+        //PaymentRequestDocumentRule.processCalculateAccountsPayableBusinessRules
+        SpringContext.getBean(KualiRuleService.class).applyRules(new AttributedCalculateAccountsPayableEvent(preqDoc));
+        
+        SpringContext.getBean(PaymentRequestService.class).calculatePaymentRequest(preqDoc,true);
+        
+        processItemsForDiscount(preqDoc,orderHolder);
+        
+        if (orderHolder.isInvoiceRejected()){
+            return null;
+        }
+        
+        SpringContext.getBean(PaymentRequestService.class).calculatePaymentRequest(preqDoc,false);
+        /*
+         * PaymentRequestReview 
+         */
+        //PaymentRequestDocumentRule.processRouteDocumentBusinessRules
+        SpringContext.getBean(KualiRuleService.class).applyRules(new AttributedPaymentRequestForEInvoiceEvent(preqDoc));
+        
+        if(GlobalVariables.getMessageMap().hasErrors()){
+            if (LOG.isInfoEnabled()){
+                LOG.info("***************Error in rules processing - " + GlobalVariables.getMessageMap());
+            }
+            ElectronicInvoiceRejectReason rejectReason = matchingService.createRejectReason(PurapConstants.ElectronicInvoice.PREQ_ROUTING_VALIDATION_ERROR, GlobalVariables.getMessageMap().toString(), orderHolder.getFileName());
+            orderHolder.addInvoiceOrderRejectReason(rejectReason);
+            return null;
+        }
+        
+        if(GlobalVariables.getMessageList().size() > 0){
+            if (LOG.isInfoEnabled()){
+                LOG.info("Payment request contains " + GlobalVariables.getMessageList().size() + " warning message(s)");
+                for (int i = 0; i < GlobalVariables.getMessageList().size(); i++) {
+                    LOG.info("Warning " + i + "  - " +GlobalVariables.getMessageList().get(i));
+                }
+            }
+        }
+        
+        addShipToNotes(preqDoc,orderHolder);
+        
+        String routingAnnotation = null;
+        if (!orderHolder.isRejectDocumentHolder()){
+            routingAnnotation = "Routed by electronic invoice batch job";
+        }
+        
+        try {
+            SpringContext.getBean(DocumentService.class).routeDocument(preqDoc,routingAnnotation, null);
+        }
+        catch (WorkflowException e) {
+            e.printStackTrace();
+            ElectronicInvoiceRejectReason rejectReason = matchingService.createRejectReason(PurapConstants.ElectronicInvoice.PREQ_ROUTING_FAILURE, e.getMessage(), orderHolder.getFileName());
+            orderHolder.addInvoiceOrderRejectReason(rejectReason);
+            return null;
+        }catch(ValidationException e){
+            String extraDescription = GlobalVariables.getMessageMap().toString();
+            ElectronicInvoiceRejectReason rejectReason = matchingService.createRejectReason(PurapConstants.ElectronicInvoice.PREQ_ROUTING_VALIDATION_ERROR, extraDescription, orderHolder.getFileName());
+            orderHolder.addInvoiceOrderRejectReason(rejectReason);
+            return null;
+        }
+        
+        return preqDoc;
+    }
+    
+}
Index: work/src/edu/arizona/kfs/module/purap/spring-purap.xml
===================================================================
--- work/src/edu/arizona/kfs/module/purap/spring-purap.xml	(revision 10957)
+++ work/src/edu/arizona/kfs/module/purap/spring-purap.xml	(revision 10958)
@@ -92,6 +92,60 @@
 	
     <bean id="b2bDao" class="edu.arizona.kfs.module.purap.dataaccess.impl.B2BDaoImpl"/>
 
+	<!-- KITT-592 - replace the payment request service with one which uses the new payment method-based GL entry generator  -->
+    <bean id="paymentRequestService" class="edu.arizona.kfs.module.purap.document.service.impl.UaPaymentRequestServiceImpl">
+		<property name="dateTimeService" ref="dateTimeService" />
+		<property name="paymentRequestDao" ref="paymentRequestDao" />
+        <property name="documentService" ref="documentService" />
+        <property name="purapService" ref="purapService" />
+        <property name="noteService" ref="noteService" />
+        <property name="parameterService" ref="parameterService" />
+        <property name="configurationService" ref="kualiConfigurationService" />
+        <property name="negativePaymentRequestApprovalLimitService" ref="negativePaymentRequestApprovalLimitService" />
+        <property name="purapAccountingService" ref="purapAccountingService" />
+        <property name="businessObjectService" ref="businessObjectService" />
+        <property name="purapWorkflowIntegrationService" ref="purapWorkflowIntegrationService" />
+        <property name="workflowDocumentService" ref="workflowDocumentService" />
+        <property name="vendorService" ref="vendorService" />
+        <property name="dataDictionaryService" ref="dataDictionaryService" />
+        <property name="universityDateService" ref="universityDateService"/>
+        <property name="paymentMethodGeneralLedgerPendingEntryService" ref="uaPaymentMethodGeneralLedgerPendingEntryService" />
+    </bean>
+
+	<!-- KITT-592 - replace the credit memo service with one which uses the new payment method-based GL entry generator  -->
+	<bean id="creditMemoService" class="edu.arizona.kfs.module.purap.document.service.impl.UaCreditMemoServiceImpl">
+        <property name="accountsPayableService" ref="accountsPayableService" />
+		<property name="creditMemoDao" ref="creditMemoDao" />
+        <property name="dataDictionaryService" ref="dataDictionaryService" />
+        <property name="documentService" ref="documentService" />
+        <property name="kualiConfigurationService" ref="kualiConfigurationService" />
+        <property name="noteService" ref="noteService" />
+        <property name="paymentRequestService" ref="paymentRequestService" />
+        <property name="purapAccountingService" ref="purapAccountingService" />
+        <property name="purapGeneralLedgerService" ref="purapGeneralLedgerService" />
+        <property name="purapService" ref="purapService" />
+        <property name="purchaseOrderService" ref="purchaseOrderService" />
+        <property name="vendorService" ref="vendorService" />
+        <property name="workflowDocumentService" ref="workflowDocumentService" />
+        <property name="paymentMethodGeneralLedgerPendingEntryService" ref="uaPaymentMethodGeneralLedgerPendingEntryService" />
+    </bean>
+
+	<!-- KITT-592 : updated E-Invoice processing to handle payment method -->
+	<bean id="electronicInvoiceHelperService" class="edu.arizona.kfs.module.purap.service.impl.UaElectronicInvoiceHelperServiceImpl">
+		<property name="electronicInvoicingDao" ref="electronicInvoicingDao" />
+        <property name="electronicInvoiceInputFileType" ref="electronicInvoiceInputFileType" />
+		<property name="electronicInvoiceMatchingService" ref="electronicInvoiceMatchingService"/>
+		<property name="mailService" ref="mailService"/>
+		<property name="batchInputFileService" ref="batchInputFileService" />
+		<property name="vendorService" ref="vendorService"/>
+		<property name="purchaseOrderService" ref="purchaseOrderService" />
+        <property name="paymentRequestService" ref="paymentRequestService" />
+        <property name="kualiConfigurationService" ref="kualiConfigurationService"/>
+        <property name="dateTimeService" ref="dateTimeService" />
+	</bean>
+
+	<import resource="document/validation/configuration/PurapValidatorOverrides.xml" />
+
 	<!-- validations -->
 	<!-- KITT-803 -->
 	<import resource="document/validation/configuration/RequisitionValidation.xml" />
Index: work/src/edu/arizona/kfs/module/purap/document/datadictionary/PaymentRequestDocument.xml
===================================================================
--- work/src/edu/arizona/kfs/module/purap/document/datadictionary/PaymentRequestDocument.xml	(revision 10957)
+++ work/src/edu/arizona/kfs/module/purap/document/datadictionary/PaymentRequestDocument.xml	(revision 10958)
@@ -2,8 +2,26 @@
 <beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:dd="http://rice.kuali.org/dd" xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd         http://rice.kuali.org/dd         http://rice.kuali.org/dd/dd.xsd">
 
   <bean id="PaymentRequestDocument" parent="PaymentRequestDocument-parentBean">
-      <property name="documentPresentationControllerClass" value="edu.arizona.kfs.module.purap.document.authorization.DocuwarePaymentRequestDocumentPresentationController"/>
+		<!--
+			MOD-PA2000-01 Override the document data dictionary entry to add
+			the bank setting in prepareForSave and payment method attribute.
+		-->
+	  	<property name="documentClass" value="edu.arizona.kfs.module.purap.document.UaPaymentRequestDocument" />
+	    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.PaymentRequestDocument"/>
+	    
+        <property name="documentPresentationControllerClass" value="edu.arizona.kfs.module.purap.document.authorization.DocuwarePaymentRequestDocumentPresentationController"/>
+		
+		<property name="attributes">
+			<list merge="true">
+				<bean parent="PaymentMethodAttribute-SelectControl"/>
+			</list>
+		</property>
   </bean>
+  
+  <bean id="PaymentRequestDocument-bankCode" parent="PaymentRequestDocument-bankCode-parentBean">
+    <property name="required" value="false"/>
+  </bean>
+  
 
   <bean id="PaymentRequestDocument-accountsPayableProcessorIdentifier" parent="PaymentRequestDocument-accountsPayableProcessorIdentifier-parentBean">
     <property name="maxLength" value="40"/>
Index: work/src/edu/arizona/kfs/module/purap/document/datadictionary/VendorCreditMemoDocument.xml
===================================================================
--- work/src/edu/arizona/kfs/module/purap/document/datadictionary/VendorCreditMemoDocument.xml	(revision 10957)
+++ work/src/edu/arizona/kfs/module/purap/document/datadictionary/VendorCreditMemoDocument.xml	(revision 10958)
@@ -2,6 +2,19 @@
 <beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:dd="http://rice.kuali.org/dd" xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd         http://rice.kuali.org/dd         http://rice.kuali.org/dd/dd.xsd">
 
   	<bean id="VendorCreditMemoDocument" parent="VendorCreditMemoDocument-parentBean">
+		<!--
+			MOD-PA2000-01 Override the document data dictionary entry to add
+			the bank setting in prepareForSave and add payment method attribute.
+		-->
+	  	<property name="documentClass" value="edu.arizona.kfs.module.purap.document.UaVendorCreditMemoDocument" />
+	    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.VendorCreditMemoDocument"/>
+		
+		<property name="attributes">
+			<list merge="true">
+				<bean parent="PaymentMethodAttribute-SelectControl"/>
+			</list>
+		</property>
+
         <property name="documentPresentationControllerClass" value="edu.arizona.kfs.module.purap.document.authorization.DocuwareVendorCreditMemoDocumentPresentationController"/>
     </bean>           
 
Index: work/src/edu/arizona/kfs/module/purap/document/service/impl/UaPaymentRequestServiceImpl.java
===================================================================
--- work/src/edu/arizona/kfs/module/purap/document/service/impl/UaPaymentRequestServiceImpl.java	(revision 0)
+++ work/src/edu/arizona/kfs/module/purap/document/service/impl/UaPaymentRequestServiceImpl.java	(revision 10958)
@@ -0,0 +1,105 @@
+/*
+ * Copyright 2010 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.arizona.kfs.module.purap.document.service.impl;
+
+import java.sql.Date;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+
+import org.kuali.kfs.module.purap.document.PaymentRequestDocument;
+import org.kuali.kfs.module.purap.document.VendorCreditMemoDocument;
+import org.kuali.kfs.module.purap.document.service.impl.PaymentRequestServiceImpl;
+import org.kuali.kfs.module.purap.util.VendorGroupingHelper;
+
+import edu.arizona.kfs.fp.businessobject.options.PaymentMethodValuesFinder;
+import edu.arizona.kfs.fp.service.UaPaymentMethodGeneralLedgerPendingEntryService;
+import edu.arizona.kfs.module.purap.document.UaPaymentRequestDocument;
+
+/**
+ * Override the base payment request service to filter out those which are not being paid by check/ACH.
+ * 
+ * MOD-PA2000-01
+ * 
+ * @author jonathan
+ */
+public class UaPaymentRequestServiceImpl extends PaymentRequestServiceImpl {
+
+    protected UaPaymentMethodGeneralLedgerPendingEntryService paymentMethodGeneralLedgerPendingEntryService;
+    
+    /**
+     * This method filters the payment requests given to just those which will be processed by PDP.
+     * 
+     * This will be entries with payment methods with the PDP_IND set to "Y".
+     * 
+     * @param baseResults The entire list of payment requests valid for extraction.
+     * @return A filtered subset of the passed in list.
+     */
+    protected Collection<PaymentRequestDocument> filterPaymentRequests( Collection<PaymentRequestDocument> baseResults ) {
+        ArrayList<PaymentRequestDocument> filteredResults = new ArrayList<PaymentRequestDocument>( baseResults.size() );
+        for ( PaymentRequestDocument doc : baseResults ) {
+            if ( doc instanceof UaPaymentRequestDocument ) {
+                if ( getPaymentMethodGeneralLedgerPendingEntryService().isPaymentMethodProcessedUsingPdp( ((UaPaymentRequestDocument)doc).getPaymentMethodCode() ) ) {
+                    filteredResults.add(doc);
+                }
+            } else {
+                // if not the UA modification for some reason, assume that the payment method has not
+                // been set and is therefore check
+                filteredResults.add(doc);
+            }
+        }
+        return filteredResults;
+    }
+    
+    @Override
+    public Collection<PaymentRequestDocument> getPaymentRequestsToExtract(Date onOrBeforePaymentRequestPayDate) {
+        Collection<PaymentRequestDocument> baseResults = super.getPaymentRequestsToExtract(onOrBeforePaymentRequestPayDate);
+        return filterPaymentRequests(baseResults);
+    }
+    
+    @Override
+    public Iterator<PaymentRequestDocument> getPaymentRequestsToExtractByCM(String campusCode, VendorCreditMemoDocument cmd) {
+        throw new UnsupportedOperationException( "This method is not in use." );
+    }
+    
+    @Override
+    public Collection<PaymentRequestDocument> getPaymentRequestsToExtractByVendor(String campusCode, VendorGroupingHelper vendor, Date onOrBeforePaymentRequestPayDate) {
+        Collection<PaymentRequestDocument> baseResults = super.getPaymentRequestsToExtractByVendor(campusCode, vendor, onOrBeforePaymentRequestPayDate);
+        return filterPaymentRequests(baseResults);
+    }
+    
+    @Override
+    public Collection<PaymentRequestDocument> getPaymentRequestsToExtractSpecialPayments(String chartCode, Date onOrBeforePaymentRequestPayDate) {
+        Collection<PaymentRequestDocument> baseResults = super.getPaymentRequestsToExtractSpecialPayments(chartCode, onOrBeforePaymentRequestPayDate);
+        return filterPaymentRequests(baseResults);
+    }
+    
+    @Override
+    public Collection<PaymentRequestDocument> getPaymentRequestToExtractByChart(String chartCode, Date onOrBeforePaymentRequestPayDate) {
+        Collection<PaymentRequestDocument> baseResults = super.getPaymentRequestToExtractByChart(chartCode, onOrBeforePaymentRequestPayDate);
+        return filterPaymentRequests(baseResults);
+    }
+
+    protected UaPaymentMethodGeneralLedgerPendingEntryService getPaymentMethodGeneralLedgerPendingEntryService() {
+        return paymentMethodGeneralLedgerPendingEntryService;
+    }
+
+    public void setPaymentMethodGeneralLedgerPendingEntryService(UaPaymentMethodGeneralLedgerPendingEntryService paymentMethodGeneralLedgerPendingEntryService) {
+        this.paymentMethodGeneralLedgerPendingEntryService = paymentMethodGeneralLedgerPendingEntryService;
+    }
+    
+    
+}
Index: work/src/edu/arizona/kfs/module/purap/document/service/impl/UaCreditMemoServiceImpl.java
===================================================================
--- work/src/edu/arizona/kfs/module/purap/document/service/impl/UaCreditMemoServiceImpl.java	(revision 0)
+++ work/src/edu/arizona/kfs/module/purap/document/service/impl/UaCreditMemoServiceImpl.java	(revision 10958)
@@ -0,0 +1,140 @@
+/*
+ * Copyright 2010 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.arizona.kfs.module.purap.document.service.impl;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+
+import org.kuali.kfs.module.purap.PurapConstants;
+import org.kuali.kfs.module.purap.document.VendorCreditMemoDocument;
+import org.kuali.kfs.module.purap.document.service.impl.CreditMemoServiceImpl;
+import org.kuali.kfs.module.purap.document.validation.event.AttributedContinuePurapEvent;
+import org.kuali.kfs.module.purap.util.VendorGroupingHelper;
+import org.kuali.kfs.sys.businessobject.Bank;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.kfs.sys.service.BankService;
+import org.kuali.rice.kew.exception.WorkflowException;
+import org.kuali.rice.kns.exception.ValidationException;
+
+import edu.arizona.kfs.fp.businessobject.options.PaymentMethodValuesFinder;
+import edu.arizona.kfs.fp.service.UaPaymentMethodGeneralLedgerPendingEntryService;
+import edu.arizona.kfs.module.purap.document.UaPaymentRequestDocument;
+import edu.arizona.kfs.module.purap.document.UaVendorCreditMemoDocument;
+
+public class UaCreditMemoServiceImpl extends CreditMemoServiceImpl {
+    private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(UaCreditMemoServiceImpl.class);
+
+    private UaPaymentMethodGeneralLedgerPendingEntryService paymentMethodGeneralLedgerPendingEntryService;
+    
+    /**
+     * This method filters the payment requests given to just those which will be processed by PDP.
+     * 
+     * This will be entries with payment methods with PDP_IND = "Y".
+     * 
+     * @param baseResults The entire list of payment requests valid for extraction.
+     * @return A filtered subset of the passed in list.
+     */
+    protected Collection<VendorCreditMemoDocument> filterPaymentRequests( Collection<VendorCreditMemoDocument> baseResults ) {
+        return filterPaymentRequests(baseResults.iterator());
+    }
+    
+    /**
+     * This method filters the payment requests given to just those which will be processed by PDP.
+     * 
+     * This will be entries with payment methods with PDP_IND = "Y".
+     * 
+     * @param baseResults An iterator over a list of payment requests valid for extraction.
+     * @return A filtered subset of the passed in list.
+     */
+    protected Collection<VendorCreditMemoDocument> filterPaymentRequests( Iterator<VendorCreditMemoDocument> baseResults ) {
+        ArrayList<VendorCreditMemoDocument> filteredResults = new ArrayList<VendorCreditMemoDocument>();
+        while ( baseResults.hasNext() ) {
+            VendorCreditMemoDocument doc = baseResults.next();
+            if ( doc instanceof UaVendorCreditMemoDocument ) {
+                if ( getPaymentMethodGeneralLedgerPendingEntryService().isPaymentMethodProcessedUsingPdp( ((UaVendorCreditMemoDocument)doc).getPaymentMethodCode() ) ) {
+                    filteredResults.add(doc);
+                }
+            } else {
+                // if not the UA modification for some reason, assume that the payment method has not
+                // been set and is therefore check
+                filteredResults.add(doc);
+            }
+        }
+        return filteredResults;
+    }
+    
+    /**
+     * Replace superclass method to copy the payment method code from the payment request.
+     * 
+     * @author jonathan
+     * @see org.kuali.kfs.module.purap.document.service.impl.CreditMemoServiceImpl#populateAndSaveCreditMemo(org.kuali.kfs.module.purap.document.VendorCreditMemoDocument)
+     */
+    @Override
+    public void populateAndSaveCreditMemo(VendorCreditMemoDocument document) {
+        try {
+            document.setStatusCode(PurapConstants.CreditMemoStatuses.IN_PROCESS);
+            
+            if (document.isSourceDocumentPaymentRequest()) {
+                document.setBankCode(document.getPaymentRequestDocument().getBankCode());
+                document.setBank(document.getPaymentRequestDocument().getBank());
+                // KITT-592 : if this is a UA CM document and the source is a new UA payment request document, copy the payment method code
+                if ( document instanceof UaVendorCreditMemoDocument && document.getPaymentRequestDocument() instanceof UaPaymentRequestDocument ) {
+                    ((UaVendorCreditMemoDocument)document).setPaymentMethodCode(((UaPaymentRequestDocument)document.getPaymentRequestDocument()).getPaymentMethodCode());
+                }
+            }
+            else {
+                // set bank code to default bank code in the system parameter
+                Bank defaultBank = SpringContext.getBean(BankService.class).getDefaultBankByDocType(VendorCreditMemoDocument.class);
+                if (defaultBank != null) {
+                    document.setBankCode(defaultBank.getBankCode());
+                    document.setBank(defaultBank);
+                }
+            }
+            
+            documentService.saveDocument(document, AttributedContinuePurapEvent.class);
+        } catch (ValidationException ve) {
+            document.setStatusCode(PurapConstants.CreditMemoStatuses.INITIATE);
+        } catch (WorkflowException we) {
+            // set the status back to initiate
+            document.setStatusCode(PurapConstants.CreditMemoStatuses.INITIATE);
+            String errorMsg = "Error saving document # " + document.getDocumentHeader().getDocumentNumber() + " " + we.getMessage();
+            LOG.error(errorMsg, we);
+            throw new RuntimeException(errorMsg, we);
+        }
+    }
+    
+    @Override
+    public Iterator<VendorCreditMemoDocument> getCreditMemosToExtract(String chartCode) {
+        Iterator<VendorCreditMemoDocument> baseResults = super.getCreditMemosToExtract(chartCode);
+        return filterPaymentRequests(baseResults).iterator();
+    }
+    
+    @Override
+    public Collection<VendorCreditMemoDocument> getCreditMemosToExtractByVendor(String chartCode, VendorGroupingHelper vendor) {
+        Collection<VendorCreditMemoDocument> baseResults = super.getCreditMemosToExtractByVendor(chartCode, vendor);
+        return filterPaymentRequests(baseResults);
+    }
+
+    protected UaPaymentMethodGeneralLedgerPendingEntryService getPaymentMethodGeneralLedgerPendingEntryService() {
+        return paymentMethodGeneralLedgerPendingEntryService;
+    }
+
+    public void setPaymentMethodGeneralLedgerPendingEntryService(UaPaymentMethodGeneralLedgerPendingEntryService paymentMethodGeneralLedgerPendingEntryService) {
+        this.paymentMethodGeneralLedgerPendingEntryService = paymentMethodGeneralLedgerPendingEntryService;
+    }
+    
+}
Index: work/src/edu/arizona/kfs/module/purap/document/validation/impl/UaAccountsPayableBankCodeValidation.java
===================================================================
--- work/src/edu/arizona/kfs/module/purap/document/validation/impl/UaAccountsPayableBankCodeValidation.java	(revision 0)
+++ work/src/edu/arizona/kfs/module/purap/document/validation/impl/UaAccountsPayableBankCodeValidation.java	(revision 10958)
@@ -0,0 +1,70 @@
+/*
+ * Copyright 2008-2009 The Kuali Foundation
+ * 
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl2.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.arizona.kfs.module.purap.document.validation.impl;
+
+import org.apache.commons.lang.StringUtils;
+import org.kuali.kfs.module.purap.PurapPropertyConstants;
+import org.kuali.kfs.module.purap.document.AccountsPayableDocumentBase;
+import org.kuali.kfs.module.purap.document.validation.impl.AccountsPayableBankCodeValidation;
+import org.kuali.kfs.sys.document.validation.event.AttributedDocumentEvent;
+import org.kuali.kfs.sys.document.validation.impl.BankCodeValidation;
+
+import edu.arizona.kfs.module.purap.document.UaPaymentRequestDocument;
+import edu.arizona.kfs.module.purap.document.UaVendorCreditMemoDocument;
+
+/**
+ * Override the validator from baseline with one which is aware of the new documents with a payment method code.
+ * 
+ * @author jonathan
+ */
+public class UaAccountsPayableBankCodeValidation extends AccountsPayableBankCodeValidation {
+//    private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(UaAccountsPayableBankCodeValidation.class);
+
+    /**
+     * @see org.kuali.kfs.sys.document.validation.Validation#validate(org.kuali.kfs.sys.document.validation.event.AttributedDocumentEvent)
+     */
+    public boolean validate(AttributedDocumentEvent event) {
+        AccountsPayableDocumentBase apDocument = (AccountsPayableDocumentBase) getAccountingDocumentForValidation();
+
+        // check if one of the extended UA documents, if so, take the payment method into account, otherwise, revert to baseline behavior
+        boolean isValid = true;
+        if ( apDocument instanceof UaPaymentRequestDocument ) {
+            isValid = BankCodeValidation.validate(apDocument.getBankCode(), "document." + PurapPropertyConstants.BANK_CODE, ((UaPaymentRequestDocument)apDocument).getPaymentMethodCode(), false, true);            
+            if ( isValid ) {
+                // clear out the bank code on the document if not needed (per the message set by the call above)
+                if ( StringUtils.isNotBlank(apDocument.getBankCode())
+                        && !BankCodeValidation.doesBankCodeNeedToBePopulated(((UaPaymentRequestDocument)apDocument).getPaymentMethodCode()) ) {
+                    apDocument.setBank(null);
+                    apDocument.setBankCode(null);                
+                }
+            }
+        } else if ( apDocument instanceof UaVendorCreditMemoDocument ) {
+            isValid = BankCodeValidation.validate(apDocument.getBankCode(), "document." + PurapPropertyConstants.BANK_CODE,  ((UaVendorCreditMemoDocument)apDocument).getPaymentMethodCode(), false, true);                        
+            if ( isValid ) {
+                // clear out the bank code on the document if not needed (per the message set by the call above)
+                if ( StringUtils.isNotBlank(apDocument.getBankCode())
+                        && !BankCodeValidation.doesBankCodeNeedToBePopulated(((UaVendorCreditMemoDocument)apDocument).getPaymentMethodCode()) ) {
+                    apDocument.setBank(null);
+                    apDocument.setBankCode(null);                
+                }
+            }
+        } else {
+            isValid = BankCodeValidation.validate(apDocument.getBankCode(), "document." + PurapPropertyConstants.BANK_CODE, false, true);
+        }
+
+        return isValid;
+    }
+}
Index: work/src/edu/arizona/kfs/module/purap/document/validation/impl/VendorCreditMemoPaymentMethodCodeValidation.java
===================================================================
--- work/src/edu/arizona/kfs/module/purap/document/validation/impl/VendorCreditMemoPaymentMethodCodeValidation.java	(revision 0)
+++ work/src/edu/arizona/kfs/module/purap/document/validation/impl/VendorCreditMemoPaymentMethodCodeValidation.java	(revision 10958)
@@ -0,0 +1,59 @@
+/*
+ * Copyright 2010 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.arizona.kfs.module.purap.document.validation.impl;
+
+import org.apache.commons.lang.StringUtils;
+import org.kuali.kfs.module.purap.document.PaymentRequestDocument;
+import org.kuali.kfs.sys.document.validation.GenericValidation;
+import org.kuali.kfs.sys.document.validation.event.AttributedDocumentEvent;
+import org.kuali.rice.kns.util.GlobalVariables;
+
+import edu.arizona.kfs.module.purap.document.UaPaymentRequestDocument;
+import edu.arizona.kfs.module.purap.document.UaVendorCreditMemoDocument;
+
+/**
+ * Validates the payment method code used on credit memo document if it was created
+ * from a payment request document.
+ * 
+ * @author jonathan
+ */
+public class VendorCreditMemoPaymentMethodCodeValidation extends GenericValidation {
+
+    protected static final String ERROR_PAYMENTMETHODCODE_MUSTMATCHPREQ = "error.document.creditmemo.paymentmethodcode.mustmatchpreq";
+
+    public boolean validate(AttributedDocumentEvent event) {
+        if ( event.getDocument() instanceof UaVendorCreditMemoDocument ) {
+            UaVendorCreditMemoDocument doc = (UaVendorCreditMemoDocument) event.getDocument();
+            // check if from a PREQ document
+            if ( doc.isSourceDocumentPaymentRequest() ) {
+                // load the document
+                PaymentRequestDocument preqDoc = doc.getPaymentRequestDocument();
+                // if a UA PREQ, get the PMC
+                if ( preqDoc instanceof UaPaymentRequestDocument ) {
+                    // check if the PMC on this document is the same
+                    String preqPaymentMethodCode = ((UaPaymentRequestDocument)preqDoc).getPaymentMethodCode();
+                    if ( !StringUtils.equals(preqPaymentMethodCode, doc.getPaymentMethodCode() ) ) {
+                        GlobalVariables.getMessageMap().putError("document.paymentMethodCode", ERROR_PAYMENTMETHODCODE_MUSTMATCHPREQ, preqPaymentMethodCode);
+                        return false;
+                    }
+                }
+            }
+        }
+        // if not (for some reason) the UA CM document, just return true
+        return true;
+    }
+
+}
Index: work/src/edu/arizona/kfs/module/purap/document/validation/configuration/PurapValidatorOverrides.xml
===================================================================
--- work/src/edu/arizona/kfs/module/purap/document/validation/configuration/PurapValidatorOverrides.xml	(revision 0)
+++ work/src/edu/arizona/kfs/module/purap/document/validation/configuration/PurapValidatorOverrides.xml	(revision 10958)
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ Copyright 2006-2007 The Kuali Foundation.
+ 
+ Licensed under the Educational Community License, Version 1.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+ http://www.opensource.org/licenses/ecl1.php
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:p="http://www.springframework.org/schema/p"
+       xmlns:aop="http://www.springframework.org/schema/aop"
+       xmlns:tx="http://www.springframework.org/schema/tx"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+                           http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
+                           http://www.springframework.org/schema/tx
+                           http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
+                           http://www.springframework.org/schema/aop
+                           http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">
+
+
+	<!-- KITT-592: replace the bank code validator with one aware of the documents with a payment method code -->
+    <bean id="PurchasingAccountsPayable-bankCodeValidation" class="edu.arizona.kfs.module.purap.document.validation.impl.UaAccountsPayableBankCodeValidation" abstract="true"/>
+
+	<bean id="VendorCreditMemo-routeDocumentValidation" parent="VendorCreditMemo-routeDocumentValidation-parentBean" scope="prototype">
+		<property name="validations">
+			<list merge="true">
+				<bean class="edu.arizona.kfs.module.purap.document.validation.impl.VendorCreditMemoPaymentMethodCodeValidation" />
+			</list>
+		</property>
+	</bean>
+
+</beans>
\ No newline at end of file
Index: work/src/edu/arizona/kfs/module/purap/document/workflow/CreditMemoNonCheck.xml
===================================================================
--- work/src/edu/arizona/kfs/module/purap/document/workflow/CreditMemoNonCheck.xml	(revision 0)
+++ work/src/edu/arizona/kfs/module/purap/document/workflow/CreditMemoNonCheck.xml	(revision 10958)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<data xmlns="ns:workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="ns:workflow resource:WorkflowData">
+  <documentTypes xmlns="ns:workflow/DocumentType" xsi:schemaLocation="ns:workflow/DocumentType resource:DocumentType">
+    <documentType>
+      <name>CMNC</name>
+      <parent>FSLO</parent>
+      <label>Credit Memo - Non-Check</label>
+      <active>true</active>
+      <routingVersion>2</routingVersion>
+      <routePaths />
+    </documentType>
+  </documentTypes>
+</data>
Index: work/src/edu/arizona/kfs/module/purap/document/workflow/PaymentRequestNonCheck.xml
===================================================================
--- work/src/edu/arizona/kfs/module/purap/document/workflow/PaymentRequestNonCheck.xml	(revision 0)
+++ work/src/edu/arizona/kfs/module/purap/document/workflow/PaymentRequestNonCheck.xml	(revision 10958)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<data xmlns="ns:workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="ns:workflow resource:WorkflowData">
+  <documentTypes xmlns="ns:workflow/DocumentType" xsi:schemaLocation="ns:workflow/DocumentType resource:DocumentType">
+    <documentType>
+      <name>PRNC</name>
+      <parent>FSLO</parent>
+      <label>Payment Request - Non-Check</label>
+      <active>true</active>
+      <routingVersion>2</routingVersion>
+      <routePaths />
+    </documentType>
+  </documentTypes>
+</data>
Index: work/src/edu/arizona/kfs/module/purap/document/UaPaymentRequestDocument.java
===================================================================
--- work/src/edu/arizona/kfs/module/purap/document/UaPaymentRequestDocument.java	(revision 0)
+++ work/src/edu/arizona/kfs/module/purap/document/UaPaymentRequestDocument.java	(revision 10958)
@@ -0,0 +1,119 @@
+package edu.arizona.kfs.module.purap.document;
+
+import org.kuali.kfs.fp.document.DisbursementVoucherConstants;
+import org.kuali.kfs.module.purap.PurapConstants;
+import org.kuali.kfs.module.purap.document.PaymentRequestDocument;
+import org.kuali.kfs.sys.KFSConstants;
+import org.kuali.kfs.sys.businessobject.Bank;
+import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntry;
+import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntrySequenceHelper;
+import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntrySourceDetail;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kew.util.KEWConstants;
+import org.kuali.rice.kns.document.authorization.DocumentAuthorizer;
+import org.kuali.rice.kns.service.DocumentHelperService;
+import org.kuali.rice.kns.service.ParameterConstants.COMPONENT;
+import org.kuali.rice.kns.util.GlobalVariables;
+import org.kuali.rice.kns.util.KNSConstants;
+
+import edu.arizona.kfs.fp.service.UaPaymentMethodGeneralLedgerPendingEntryService;
+
+/**
+ * Overrides the prepareForSave method to ensure that the bank code is synchronized with the payment method.
+ * 
+ * MOD-PA2000-01
+ * 
+ * @author jonathan
+ */
+@COMPONENT( component = "PaymentRequest" )
+public class UaPaymentRequestDocument extends PaymentRequestDocument {
+    private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(UaPaymentRequestDocument.class);
+
+    public static String DOCUMENT_TYPE_NON_CHECK = "PRNC";
+    
+    // default this value to "A" to preserve baseline behavior
+    protected String paymentMethodCode = "A"; // check
+    private static UaPaymentMethodGeneralLedgerPendingEntryService paymentMethodGeneralLedgerPendingEntryService;
+
+    /**
+     * Gets the paymentMethodCode attribute. 
+     * @return Returns the paymentMethodCode.
+     */
+    public String getPaymentMethodCode() {
+        return paymentMethodCode;
+    }
+
+    /**
+     * Sets the paymentMethodCode attribute value.
+     * @param paymentMethodCode The paymentMethodCode to set.
+     */
+    public void setPaymentMethodCode(String paymentMethodCode) {
+        this.paymentMethodCode = paymentMethodCode;
+    }
+    
+    @Override
+    public void prepareForSave() {
+        super.prepareForSave();
+        
+        // First, only do this if the document is in initiated status - after that, we don't want to 
+        // accidentally reset the bank code
+        if ( KEWConstants.ROUTE_HEADER_INITIATED_CD.equals( getDocumentHeader().getWorkflowDocument().getRouteHeader().getDocRouteStatus() )
+                || KEWConstants.ROUTE_HEADER_SAVED_CD.equals( getDocumentHeader().getWorkflowDocument().getRouteHeader().getDocRouteStatus() ) ) {
+            // need to check whether the user has the permission to edit the bank code
+            // if so, don't synchronize since we can't tell whether the value coming in
+            // was entered by the user or not.
+            DocumentAuthorizer docAuth = SpringContext.getBean(DocumentHelperService.class).getDocumentAuthorizer(this);
+            if ( !docAuth.isAuthorizedByTemplate(this, 
+                    KFSConstants.ParameterNamespaces.KFS, 
+                    KFSConstants.PermissionTemplate.EDIT_BANK_CODE.name, 
+                    GlobalVariables.getUserSession().getPrincipalId()  ) ) {
+                synchronizeBankCodeWithPaymentMethod();        
+            } else {
+                // ensure that the name is updated properly
+                refreshReferenceObject( "bank" );
+            }
+        }        
+    }
+
+    protected void synchronizeBankCodeWithPaymentMethod() {
+        Bank bank = getPaymentMethodGeneralLedgerPendingEntryService().getBankForPaymentMethod( getPaymentMethodCode() );
+        if ( bank != null ) {
+            setBankCode(bank.getBankCode());
+            setBank(bank);
+        } else {
+            // no bank code, no bank needed
+            setBankCode(null);
+            setBank(null);
+        }
+    }
+
+    protected UaPaymentMethodGeneralLedgerPendingEntryService getPaymentMethodGeneralLedgerPendingEntryService() {
+        if ( paymentMethodGeneralLedgerPendingEntryService == null ) {
+            paymentMethodGeneralLedgerPendingEntryService = SpringContext.getBean(UaPaymentMethodGeneralLedgerPendingEntryService.class);
+        }
+        return paymentMethodGeneralLedgerPendingEntryService;
+    }
+
+    public boolean generateDocumentGeneralLedgerPendingEntries(GeneralLedgerPendingEntrySequenceHelper sequenceHelper) {
+        if (getGeneralLedgerPendingEntries() == null || getGeneralLedgerPendingEntries().size() < 2) {
+            LOG.warn("No gl entries for accounting lines.");
+            return true;
+        }
+//        LOG.debug("generateDocumentGeneralLedgerPendingEntries()");
+        getPaymentMethodGeneralLedgerPendingEntryService().generatePaymentMethodSpecificDocumentGeneralLedgerPendingEntries(
+                this,getPaymentMethodCode(),getBankCode(), KNSConstants.DOCUMENT_PROPERTY_NAME + "." + "bankCode", getGeneralLedgerPendingEntry(0), false, false, sequenceHelper);
+        
+        return true;
+    }
+    
+    @Override
+    public void customizeExplicitGeneralLedgerPendingEntry(GeneralLedgerPendingEntrySourceDetail postable, GeneralLedgerPendingEntry explicitEntry) {
+        super.customizeExplicitGeneralLedgerPendingEntry(postable, explicitEntry);
+        // if the document is not processed using PDP, then the cash entries need to be created instead of liability
+        // so, switch the document type so the offset generation uses a cash offset object code
+        if ( !getPaymentMethodGeneralLedgerPendingEntryService().isPaymentMethodProcessedUsingPdp(getPaymentMethodCode())) {
+            explicitEntry.setFinancialDocumentTypeCode(DOCUMENT_TYPE_NON_CHECK);
+        }
+    }
+    
+}
Index: work/src/edu/arizona/kfs/module/purap/document/UaVendorCreditMemoDocument.java
===================================================================
--- work/src/edu/arizona/kfs/module/purap/document/UaVendorCreditMemoDocument.java	(revision 0)
+++ work/src/edu/arizona/kfs/module/purap/document/UaVendorCreditMemoDocument.java	(revision 10958)
@@ -0,0 +1,130 @@
+/*
+ * Copyright 2010 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.arizona.kfs.module.purap.document;
+
+import org.kuali.kfs.fp.document.DisbursementVoucherConstants;
+import org.kuali.kfs.module.purap.document.VendorCreditMemoDocument;
+import org.kuali.kfs.sys.KFSConstants;
+import org.kuali.kfs.sys.businessobject.Bank;
+import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntry;
+import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntrySequenceHelper;
+import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntrySourceDetail;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kew.util.KEWConstants;
+import org.kuali.rice.kns.document.authorization.DocumentAuthorizer;
+import org.kuali.rice.kns.service.DocumentHelperService;
+import org.kuali.rice.kns.service.ParameterConstants.COMPONENT;
+import org.kuali.rice.kns.util.GlobalVariables;
+import org.kuali.rice.kns.util.KNSConstants;
+
+import edu.arizona.kfs.fp.service.UaPaymentMethodGeneralLedgerPendingEntryService;
+
+/**
+ * KITT-592 - added payment method code and supporting logic
+ * 
+ * @author jonathan
+ */
+@COMPONENT( component = "VendorCreditMemo" )
+public class UaVendorCreditMemoDocument extends VendorCreditMemoDocument {
+
+    public static String DOCUMENT_TYPE_NON_CHECK = "CMNC";
+
+    protected String paymentMethodCode = "A"; // check
+    private static UaPaymentMethodGeneralLedgerPendingEntryService paymentMethodGeneralLedgerPendingEntryService;
+
+    /**
+     * Gets the paymentMethodCode attribute. 
+     * @return Returns the paymentMethodCode.
+     */
+    public String getPaymentMethodCode() {
+        return paymentMethodCode;
+    }
+
+    /**
+     * Sets the paymentMethodCode attribute value.
+     * @param paymentMethodCode The paymentMethodCode to set.
+     */
+    public void setPaymentMethodCode(String paymentMethodCode) {
+        this.paymentMethodCode = paymentMethodCode;
+    }
+
+    @Override
+    public void prepareForSave() {
+        super.prepareForSave();
+        
+        // First, only do this if the document is in initiated status - after that, we don't want to 
+        // accidentally reset the bank code
+        if ( KEWConstants.ROUTE_HEADER_INITIATED_CD.equals( getDocumentHeader().getWorkflowDocument().getRouteHeader().getDocRouteStatus() )
+                || KEWConstants.ROUTE_HEADER_SAVED_CD.equals( getDocumentHeader().getWorkflowDocument().getRouteHeader().getDocRouteStatus() ) ) {
+            // need to check whether the user has the permission to edit the bank code
+            // if so, don't synchronize since we can't tell whether the value coming in
+            // was entered by the user or not.
+            DocumentAuthorizer docAuth = SpringContext.getBean(DocumentHelperService.class).getDocumentAuthorizer(this);
+            if ( !docAuth.isAuthorizedByTemplate(this, 
+                    KFSConstants.ParameterNamespaces.KFS, 
+                    KFSConstants.PermissionTemplate.EDIT_BANK_CODE.name, 
+                    GlobalVariables.getUserSession().getPrincipalId()  ) ) {
+                synchronizeBankCodeWithPaymentMethod();        
+            } else {
+                // ensure that the name is updated properly
+                refreshReferenceObject( "bank" );
+            }
+        }        
+    }
+
+    protected void synchronizeBankCodeWithPaymentMethod() {
+        Bank bank = getPaymentMethodGeneralLedgerPendingEntryService().getBankForPaymentMethod( getPaymentMethodCode() );
+        if ( bank != null ) {
+            setBankCode(bank.getBankCode());
+            setBank(bank);
+        } else {
+            // no bank code, no bank needed
+            setBankCode(null);
+            setBank(null);
+        }
+    }
+
+    @Override
+    public void customizeExplicitGeneralLedgerPendingEntry(GeneralLedgerPendingEntrySourceDetail postable, GeneralLedgerPendingEntry explicitEntry) {
+        super.customizeExplicitGeneralLedgerPendingEntry(postable, explicitEntry);
+        // if the document is not processed using PDP, then the cash entries need to be created instead of liability
+        // so, switch the document type so the offset generation uses a cash offset object code
+        if ( !getPaymentMethodGeneralLedgerPendingEntryService().isPaymentMethodProcessedUsingPdp(getPaymentMethodCode())) {
+            explicitEntry.setFinancialDocumentTypeCode(DOCUMENT_TYPE_NON_CHECK);
+        }
+    }
+
+    public boolean generateDocumentGeneralLedgerPendingEntries(GeneralLedgerPendingEntrySequenceHelper sequenceHelper) {
+        if (getGeneralLedgerPendingEntries() == null || getGeneralLedgerPendingEntries().size() < 2) {
+            LOG.warn("No gl entries for accounting lines.");
+            return true;
+        }
+//        LOG.debug("generateDocumentGeneralLedgerPendingEntries()");
+        getPaymentMethodGeneralLedgerPendingEntryService().generatePaymentMethodSpecificDocumentGeneralLedgerPendingEntries(
+                this,getPaymentMethodCode(),getBankCode(), KNSConstants.DOCUMENT_PROPERTY_NAME + "." + "bankCode", getGeneralLedgerPendingEntry(0), true, true, sequenceHelper);
+        
+        return true;
+    }
+    
+    
+    protected UaPaymentMethodGeneralLedgerPendingEntryService getPaymentMethodGeneralLedgerPendingEntryService() {
+        if ( paymentMethodGeneralLedgerPendingEntryService == null ) {
+            paymentMethodGeneralLedgerPendingEntryService = SpringContext.getBean(UaPaymentMethodGeneralLedgerPendingEntryService.class);
+        }
+        return paymentMethodGeneralLedgerPendingEntryService;
+    }
+    
+}
Index: work/src/edu/arizona/kfs/module/purap/ojb-purap.xml
===================================================================
--- work/src/edu/arizona/kfs/module/purap/ojb-purap.xml	(revision 10957)
+++ work/src/edu/arizona/kfs/module/purap/ojb-purap.xml	(revision 10958)
@@ -637,4 +637,307 @@
     
 </class-descriptor> 
 
+<!-- Disable the base classes (cause errors earlier) -->
+<class-descriptor class="org.kuali.kfs.module.purap.document.PaymentRequestDocument" table="OLD_PAY_REQ_OBJ_USED" />
+<class-descriptor class="org.kuali.kfs.module.purap.document.VendorCreditMemoDocument" table="OLD_CRDT_MEMO_OBJ_USED" />
+
+<!-- MOD-PA2000-01: Added Payment method code -->
+<class-descriptor class="edu.arizona.kfs.module.purap.document.UaPaymentRequestDocument" table="AP_PMT_RQST_T">
+    <field-descriptor name="purapDocumentIdentifier" column="PMT_RQST_ID" jdbc-type="INTEGER" primarykey="true" index="true" autoincrement="true" sequence-name="PMT_RQST_ID"/>
+    <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true"/>
+    <field-descriptor name="versionNumber" column="VER_NBR" jdbc-type="BIGINT" locking="true"/>
+    <field-descriptor name="documentNumber" column="FDOC_NBR" jdbc-type="VARCHAR" index="true"/>
+    <field-descriptor name="statusCode" column="PMT_RQST_STAT_CD" jdbc-type="VARCHAR" index="true"/>
+    <field-descriptor name="purchaseOrderIdentifier" column="PO_ID" jdbc-type="INTEGER" index="true"/>
+    <field-descriptor name="postingYear" column="PO_ENCUM_FSCL_YR" jdbc-type="INTEGER"/>
+    <field-descriptor name="recurringPaymentTypeCode" column="PO_CLSIF_TYP_DESC" jdbc-type="VARCHAR"/>
+    <field-descriptor name="invoiceDate" column="INV_DT" jdbc-type="DATE"/>
+    <field-descriptor name="invoiceNumber" column="INV_NBR" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorInvoiceAmount" column="VNDR_INV_AMT" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion"/>
+    <field-descriptor name="vendorPaymentTermsCode" column="VNDR_PMT_TERMS_CD" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorShippingPaymentTermsCode" column="VNDR_SHP_PMT_TERM_CD" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorCustomerNumber" column="VNDR_CUST_NBR" jdbc-type="VARCHAR"/>
+    <field-descriptor name="paymentRequestPayDate" column="PMT_RQST_PAY_DT" jdbc-type="DATE"/>
+    <field-descriptor name="paymentRequestCostSourceCode" column="PMT_RQST_CST_SRC_CD" jdbc-type="VARCHAR"/>
+    <field-descriptor name="paymentRequestedCancelIndicator" column="PMT_RQST_CNCL_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <field-descriptor name="paymentAttachmentIndicator" column="PMT_ATT_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <field-descriptor name="immediatePaymentIndicator" column="IMD_PMT_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <field-descriptor name="holdIndicator" column="PMT_HLD_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <field-descriptor name="noteLine1Text" column="PMT_NTE_LN1_TXT" jdbc-type="VARCHAR"/>
+    <field-descriptor name="noteLine2Text" column="PMT_NTE_LN2_TXT" jdbc-type="VARCHAR"/>
+    <field-descriptor name="noteLine3Text" column="PMT_NTE_LN3_TXT" jdbc-type="VARCHAR"/>
+    <field-descriptor name="specialHandlingInstructionLine1Text" column="PMT_SPCL_HANDLG_INSTRC_LN1_TXT" jdbc-type="VARCHAR"/>
+    <field-descriptor name="specialHandlingInstructionLine2Text" column="PMT_SPCL_HANDLG_INSTRC_LN2_TXT" jdbc-type="VARCHAR"/>
+    <field-descriptor name="specialHandlingInstructionLine3Text" column="PMT_SPCL_HANDLG_INSTRC_LN3_TXT" jdbc-type="VARCHAR"/>
+    <field-descriptor name="paymentPaidTimestamp" column="PMT_PD_DT" jdbc-type="TIMESTAMP"/>
+    <field-descriptor name="paymentRequestElectronicInvoiceIndicator" column="PMT_RQST_ELCTRNC_INV_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <field-descriptor name="vendorHeaderGeneratedIdentifier" column="VNDR_HDR_GNRTD_ID" jdbc-type="INTEGER"/>
+    <field-descriptor name="vendorDetailAssignedIdentifier" column="VNDR_DTL_ASND_ID" jdbc-type="INTEGER"/>
+    <field-descriptor name="vendorName" column="VNDR_NM" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorLine1Address" column="VNDR_LN1_ADDR" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorLine2Address" column="VNDR_LN2_ADDR" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorCityName" column="VNDR_CTY_NM" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorStateCode" column="VNDR_ST_CD" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorPostalCode" column="VNDR_PSTL_CD" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorCountryCode" column="VNDR_CNTRY_CD" jdbc-type="VARCHAR"/>
+    <field-descriptor name="extractedTimestamp" column="PMT_EXTRT_DT" jdbc-type="TIMESTAMP"/>
+    <field-descriptor name="accountsPayableProcessorIdentifier" column="AP_PRCSR_ID" jdbc-type="VARCHAR"/>
+    <field-descriptor name="accountsPayableRequestCancelIdentifier" column="AP_RQST_CNCL_ID" jdbc-type="VARCHAR"/>
+    <field-descriptor name="lastActionPerformedByPersonId" column="AP_HLD_ID" jdbc-type="VARCHAR"/>
+    <field-descriptor name="processingCampusCode" column="PRCS_CMP_CD" jdbc-type="VARCHAR"/>
+    <field-descriptor name="accountsPayableApprovalTimestamp" column="AP_APRVL_DT" jdbc-type="TIMESTAMP"/>
+    <field-descriptor name="originalVendorHeaderGeneratedIdentifier" column="ORIG_VNDR_HDR_GNRTD_ID" jdbc-type="INTEGER"/>
+    <field-descriptor name="originalVendorDetailAssignedIdentifier" column="ORIG_VNDR_DTL_ASND_ID" jdbc-type="INTEGER"/>
+    <field-descriptor name="alternateVendorHeaderGeneratedIdentifier" column="ALTRNT_VNDR_HDR_GNRTD_ID" jdbc-type="INTEGER"/>
+    <field-descriptor name="alternateVendorDetailAssignedIdentifier" column="ALTRNT_VNDR_DTL_ASND_ID" jdbc-type="INTEGER"/>   
+    <field-descriptor name="continuationAccountIndicator" column="CONT_ACCT_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <field-descriptor name="accountsPayablePurchasingDocumentLinkIdentifier" column="AP_PUR_DOC_LNK_ID" jdbc-type="INTEGER"/>
+    <field-descriptor name="closePurchaseOrderIndicator" column="CLOSE_PO_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <field-descriptor name="reopenPurchaseOrderIndicator" column="REOPEN_PO_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <field-descriptor name="vendorAddressInternationalProvinceName" column="VNDR_ADDR_INTL_PROV_NM" jdbc-type="VARCHAR"/>
+    <field-descriptor name="receivingDocumentRequiredIndicator" column="RCVNG_DOC_REQ_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <field-descriptor name="paymentRequestPositiveApprovalIndicator" column="PMT_RQST_PSTV_APRVL_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+	<field-descriptor name="useTaxIndicator" column="USE_TAX_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion" />
+    <field-descriptor name="bankCode" column="BNK_CD" jdbc-type="VARCHAR" />
+	<field-descriptor name="taxClassificationCode" column="TAX_CLSIF_CD" jdbc-type="VARCHAR" />
+	<field-descriptor name="taxFederalPercent" column="FTX_PCT" jdbc-type="DECIMAL" />
+	<field-descriptor name="taxStatePercent" column="STX_PCT" jdbc-type="DECIMAL" />
+	<field-descriptor name="taxCountryCode" column="TAX_CNTRY_CD" jdbc-type="VARCHAR" />
+	<field-descriptor name="taxGrossUpIndicator" column="GRS_UP_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion" />
+	<field-descriptor name="taxExemptTreatyIndicator" column="TRTY_EXMPT_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion" />
+	<field-descriptor name="taxForeignSourceIndicator" column="FRGN_SRC_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion" />
+	<field-descriptor name="taxSpecialW4Amount" column="SPCL_W4_INC_AMT" jdbc-type="DECIMAL" />
+	<field-descriptor name="taxUSAIDPerDiemIndicator" column="USAID_DIEM_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion" />
+	<field-descriptor name="taxOtherExemptIndicator" column="INC_TAX_EXMPT_CD_OTHR_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion" />
+	<field-descriptor name="taxNQIId" column="NQI_CUST_TAX_ID" jdbc-type="VARCHAR" />
+	<field-descriptor name="vendorAttentionName" column="VNDR_ATTN_NM" jdbc-type="VARCHAR" />
+
+	<!-- MOD-PA2000-01: Added Payment method code -->
+    <field-descriptor name="paymentMethodCode" column="PMT_MTHD_CD" jdbc-type="VARCHAR"/>
+    
+    
+    <!-- COMMON TO ALL DOCUMENTS -->
+    <reference-descriptor name="documentHeader" class-ref="org.kuali.kfs.sys.businessobject.FinancialSystemDocumentHeader" auto-retrieve="true" auto-update="object" auto-delete="object" proxy="true" >
+        <foreignkey field-ref="documentNumber" />
+    </reference-descriptor>
+
+    <reference-descriptor name="vendorDetail" class-ref="org.kuali.kfs.vnd.businessobject.VendorDetail" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="vendorHeaderGeneratedIdentifier" />
+        <foreignkey field-ref="vendorDetailAssignedIdentifier" />
+    </reference-descriptor>
+    <reference-descriptor name="status" class-ref="org.kuali.kfs.module.purap.businessobject.PaymentRequestStatus" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="statusCode" />
+    </reference-descriptor>
+    <collection-descriptor name="items" proxy="true" element-class-ref="org.kuali.kfs.module.purap.businessobject.PaymentRequestItem" collection-class="org.apache.ojb.broker.util.collections.ManageableArrayList" auto-retrieve="true" auto-update="object" auto-delete="object">
+        <inverse-foreignkey field-ref="purapDocumentIdentifier" />
+        <query-customizer class="org.kuali.kfs.module.purap.dataaccess.impl.PurapItemQueryCustomizer">
+            <attribute
+                attribute-name="orderByField.itemLineNumber"
+                attribute-value="ASC"
+            />
+        </query-customizer> 
+    </collection-descriptor>
+<!--<reference-descriptor name="purchaseOrderDocument" class-ref="org.kuali.kfs.module.purap.document.PurchaseOrderDocument" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="purchaseOrderIdentifier" />
+    </reference-descriptor>
+-->
+    <reference-descriptor name="vendorShippingPaymentTerms" class-ref="org.kuali.kfs.vnd.businessobject.ShippingPaymentTerms" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="vendorShippingPaymentTermsCode" />
+    </reference-descriptor>
+    <reference-descriptor name="vendorPaymentTerms" class-ref="org.kuali.kfs.vnd.businessobject.PaymentTermType" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="vendorPaymentTermsCode" />
+    </reference-descriptor>
+    <reference-descriptor name="paymentRequestCostSource" class-ref="org.kuali.kfs.vnd.businessobject.PurchaseOrderCostSource" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="paymentRequestCostSourceCode" />
+    </reference-descriptor>
+    <reference-descriptor name="recurringPaymentType" class-ref="org.kuali.kfs.module.purap.businessobject.RecurringPaymentType" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="recurringPaymentTypeCode" />
+    </reference-descriptor>
+    <reference-descriptor name="bank" class-ref="org.kuali.kfs.sys.businessobject.Bank" auto-retrieve="true" auto-update="none" auto-delete="none"  proxy="true" >
+    	<foreignkey field-ref="bankCode" />
+    </reference-descriptor>
+    <reference-descriptor name="processingCampus" class-ref="org.kuali.kfs.vnd.businessobject.CampusParameter" auto-retrieve="true" auto-update="none" auto-delete="none"  proxy="true" >
+    	<foreignkey field-ref="processingCampusCode" />
+    </reference-descriptor>    
+   <!--  
+   <reference-descriptor name="incomeClass" class-ref="org.kuali.kfs.fp.businessobject.TaxIncomeClassCode" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true">
+    	<foreignkey field-ref="taxClassificationCode" />
+    </reference-descriptor>
+-->
+    <!-- Do not set this collection to auto save or delete; it needs to be saved by a specific process in the GL entry creation (hjs) -->
+   <collection-descriptor name="generalLedgerPendingEntries" proxy="true" element-class-ref="org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntry" collection-class="org.apache.ojb.broker.util.collections.ManageableArrayList" auto-retrieve="true" auto-update="none" auto-delete="none">
+        <orderby name="transactionLedgerEntrySequenceNumber" sort="ASC" />
+        <query-customizer class="org.kuali.kfs.sys.dataaccess.impl.OjbQueryCustomizer">
+            <attribute attribute-name="documentNumber" attribute-value="parent.documentNumber" />
+        </query-customizer>
+    </collection-descriptor>
+
+</class-descriptor>
+
+<class-descriptor class="edu.arizona.kfs.module.purap.document.UaVendorCreditMemoDocument" table="AP_CRDT_MEMO_T">
+    <field-descriptor name="purapDocumentIdentifier" column="CRDT_MEMO_ID" jdbc-type="INTEGER" primarykey="true" index="true" autoincrement="true" sequence-name="CRDT_MEMO_ID"/>
+    <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true"/>
+    <field-descriptor name="versionNumber" column="VER_NBR" jdbc-type="BIGINT" locking="true"/>
+    <field-descriptor name="documentNumber" column="FDOC_NBR" jdbc-type="VARCHAR" index="true"/>
+    <field-descriptor name="vendorHeaderGeneratedIdentifier" column="VNDR_HDR_GNRTD_ID" jdbc-type="INTEGER" index="true"/>
+    <field-descriptor name="vendorDetailAssignedIdentifier" column="VNDR_DTL_ASND_ID" jdbc-type="INTEGER" index="true"/>
+    <field-descriptor name="vendorCustomerNumber" column="VNDR_CUST_NBR" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorName" column="VNDR_NM" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorLine1Address" column="VNDR_LN1_ADDR" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorLine2Address" column="VNDR_LN2_ADDR" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorCityName" column="VNDR_CTY_NM" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorStateCode" column="VNDR_ST_CD" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorPostalCode" column="VNDR_PSTL_CD" jdbc-type="VARCHAR"/>
+    <field-descriptor name="vendorCountryCode" column="VNDR_CNTRY_CD" jdbc-type="VARCHAR"/>
+    <field-descriptor name="purchaseOrderIdentifier" column="PO_ID" jdbc-type="INTEGER" index="true"/>
+    <field-descriptor name="postingYear" column="PO_ENCUM_FSCL_YR" jdbc-type="INTEGER"/>
+    <field-descriptor name="paymentRequestIdentifier" column="PMT_RQST_ID" jdbc-type="INTEGER" index="true"/>
+    <field-descriptor name="statusCode" column="CRDT_MEMO_STAT_CD" jdbc-type="VARCHAR" index="true"/>
+    <field-descriptor name="creditMemoNumber" column="CRDT_MEMO_NBR" jdbc-type="VARCHAR"/>
+    <field-descriptor name="creditMemoDate" column="CRDT_MEMO_DT" jdbc-type="DATE"/>
+    <field-descriptor name="creditMemoAmount" column="CRDT_MEMO_AMT" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion"/>
+    <field-descriptor name="noteLine1Text" column="CRDT_MEMO_NTE_LN1_TXT" jdbc-type="VARCHAR"/>
+    <field-descriptor name="noteLine2Text" column="CRDT_MEMO_NTE_LN2_TXT" jdbc-type="VARCHAR"/>
+    <field-descriptor name="noteLine3Text" column="CRDT_MEMO_NTE_LN3_TXT" jdbc-type="VARCHAR"/>
+    <field-descriptor name="creditMemoPaidTimestamp" column="CRDT_MEMO_PD_TS" jdbc-type="TIMESTAMP"/>
+    <field-descriptor name="holdIndicator" column="CRDT_HLD_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <field-descriptor name="accountsPayableProcessorIdentifier" column="AP_PRCSR_ID" jdbc-type="VARCHAR"/>
+    <field-descriptor name="processingCampusCode" column="PRCS_CMP_CD" jdbc-type="VARCHAR"/>
+    <field-descriptor name="accountsPayableApprovalTimestamp" column="AP_APRVL_DT" jdbc-type="TIMESTAMP"/>
+    <field-descriptor name="itemMiscellaneousCreditDescription" column="ITM_MISC_CRDT_DESC" jdbc-type="VARCHAR"/>
+    <field-descriptor name="extractedTimestamp" column="CRDT_MEMO_EXTRT_DT" jdbc-type="TIMESTAMP"/>
+    <field-descriptor name="accountsPayablePurchasingDocumentLinkIdentifier" column="AP_PUR_DOC_LNK_ID" jdbc-type="INTEGER"/>
+    <field-descriptor name="lastActionPerformedByPersonId" column="AP_HLD_ID" jdbc-type="VARCHAR"/>
+    <field-descriptor name="continuationAccountIndicator" column="CONT_ACCT_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <field-descriptor name="closePurchaseOrderIndicator" column="CLOSE_PO_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <field-descriptor name="reopenPurchaseOrderIndicator" column="REOPEN_PO_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <field-descriptor name="vendorAddressInternationalProvinceName" column="VNDR_ADDR_INTL_PROV_NM" jdbc-type="VARCHAR"/>
+	<field-descriptor name="useTaxIndicator" column="USE_TAX_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion" />
+    <field-descriptor name="bankCode" column="BNK_CD" jdbc-type="VARCHAR" />
+    <field-descriptor name="vendorAttentionName" column="VNDR_ATTN_NM" jdbc-type="VARCHAR" />
+    
+	<!-- MOD-PA2000-01: Added Payment method code -->
+    <field-descriptor name="paymentMethodCode" column="PMT_MTHD_CD" jdbc-type="VARCHAR"/>
+    
+    <reference-descriptor name="documentHeader" class-ref="org.kuali.kfs.sys.businessobject.FinancialSystemDocumentHeader" auto-retrieve="true" auto-update="object" auto-delete="object" proxy="true" >
+        <foreignkey field-ref="documentNumber" />
+    </reference-descriptor>
+    <reference-descriptor name="vendorDetail" class-ref="org.kuali.kfs.vnd.businessobject.VendorDetail" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="vendorHeaderGeneratedIdentifier" />
+        <foreignkey field-ref="vendorDetailAssignedIdentifier" />
+    </reference-descriptor>
+<!--
+    <reference-descriptor name="purchaseOrderDocument" class-ref="org.kuali.kfs.module.purap.document.PurchaseOrderDocument" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="purchaseOrderIdentifier" />
+    </reference-descriptor>
+    <reference-descriptor name="paymentRequestDocument" class-ref="org.kuali.kfs.module.purap.document.PaymentRequestDocument" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="paymentRequestIdentifier" />
+    </reference-descriptor>
+-->
+    <reference-descriptor name="status" class-ref="org.kuali.kfs.module.purap.businessobject.CreditMemoStatus" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="statusCode" />
+    </reference-descriptor>
+    <reference-descriptor name="bank" class-ref="org.kuali.kfs.sys.businessobject.Bank" auto-retrieve="true" auto-update="none" auto-delete="none"  proxy="true" >
+    	<foreignkey field-ref="bankCode" />
+    </reference-descriptor>
+    <reference-descriptor name="processingCampus" class-ref="org.kuali.kfs.vnd.businessobject.CampusParameter" auto-retrieve="true" auto-update="none" auto-delete="none"  proxy="true" >
+    	<foreignkey field-ref="processingCampusCode" />
+    </reference-descriptor>  
+    <collection-descriptor name="items" proxy="true" element-class-ref="org.kuali.kfs.module.purap.businessobject.CreditMemoItem" collection-class="org.apache.ojb.broker.util.collections.ManageableArrayList" auto-retrieve="true" auto-update="object" auto-delete="object">
+        <inverse-foreignkey field-ref="purapDocumentIdentifier" />
+        <query-customizer class="org.kuali.kfs.module.purap.dataaccess.impl.PurapItemQueryCustomizer">
+    	    <attribute
+            	attribute-name="orderByField.itemLineNumber"
+            	attribute-value="ASC"
+        	/>
+    	</query-customizer> 
+    </collection-descriptor>
+
+   <collection-descriptor name="generalLedgerPendingEntries" proxy="true" element-class-ref="org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntry" collection-class="org.apache.ojb.broker.util.collections.ManageableArrayList" auto-retrieve="true" auto-update="none" auto-delete="none">
+        <orderby name="transactionLedgerEntrySequenceNumber" sort="ASC" />
+        <query-customizer class="org.kuali.kfs.sys.dataaccess.impl.OjbQueryCustomizer">
+            <attribute attribute-name="documentNumber" attribute-value="parent.documentNumber" />
+        </query-customizer>
+    </collection-descriptor>
+
+</class-descriptor>
+
+
+<!-- Descriptors copied because they referenced the original class names -->
+<class-descriptor class="org.kuali.kfs.module.purap.businessobject.PaymentRequestItem" table="AP_PMT_RQST_ITM_T">
+    <field-descriptor name="itemIdentifier" column="PMT_RQST_ITM_ID" jdbc-type="INTEGER" primarykey="true" index="true" autoincrement="true" sequence-name="PMT_RQST_ITM_ID"/>
+    <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true"/>
+    <field-descriptor name="versionNumber" column="VER_NBR" jdbc-type="BIGINT" locking="true"/>
+    <field-descriptor name="purapDocumentIdentifier" column="PMT_RQST_ID" jdbc-type="INTEGER" index="true"/>
+    <field-descriptor name="itemLineNumber" column="ITM_LN_NBR" jdbc-type="INTEGER" index="true"/>
+    <field-descriptor name="itemTypeCode" column="ITM_TYP_CD" jdbc-type="VARCHAR"/>
+    <field-descriptor name="itemDescription" column="ITM_DESC" jdbc-type="VARCHAR"/>
+    <field-descriptor name="itemCatalogNumber" column="ITM_CATLG_NBR" jdbc-type="VARCHAR"/>
+    <field-descriptor name="itemAuxiliaryPartIdentifier" column="ITM_AUX_PART_ID" jdbc-type="VARCHAR"/>
+    <field-descriptor name="itemUnitOfMeasureCode" column="ITM_UOM_CD" jdbc-type="VARCHAR"/>
+    <field-descriptor name="itemQuantity" column="ITM_INV_QTY" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion"/>
+    <field-descriptor name="itemUnitPrice" column="ITM_UNIT_PRC" jdbc-type="DECIMAL"/>
+    <field-descriptor name="purchaseOrderItemUnitPrice" column="PO_ITM_UNIT_PRC" jdbc-type="DECIMAL"/>
+    <field-descriptor name="extendedPrice" column="ITM_EXTND_PRC" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion"/>
+    <field-descriptor name="itemAssignedToTradeInIndicator" column="ITM_ASND_TO_TRADE_IN_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <field-descriptor name="itemOutstandingInvoiceQuantity" column="ITM_OSTND_INV_QTY" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion"/>
+    <field-descriptor name="itemOutstandingInvoiceAmount" column="ITM_OSTND_INV_AMT" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion" /> 
+    <field-descriptor name="itemSalesTaxAmount" column="ITM_TAX_AMT" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion"/>
+    <field-descriptor name="capitalAssetTransactionTypeCode" column="CPTL_AST_TRN_TYP_CD" jdbc-type="VARCHAR"/>    
+    <reference-descriptor name="purapDocument" class-ref="edu.arizona.kfs.module.purap.document.UaPaymentRequestDocument" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="purapDocumentIdentifier" />
+    </reference-descriptor>
+    <reference-descriptor name="itemType" class-ref="org.kuali.kfs.module.purap.businessobject.ItemType" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="itemTypeCode" />
+    </reference-descriptor>
+    <!-- the account deletion is handled within our buildDeletionAwareLists, setting auto-delete=none as a workaround to Optimistic Locking Exception for now -->
+    <collection-descriptor name="sourceAccountingLines" proxy="true" element-class-ref="org.kuali.kfs.module.purap.businessobject.PaymentRequestAccount" collection-class="org.apache.ojb.broker.util.collections.ManageableArrayList" auto-retrieve="true" auto-update="object" auto-delete="none">
+        <orderby name="accountNumber" sort="ASC" />
+        <orderby name="financialObjectCode" sort="ASC" />
+        <inverse-foreignkey field-ref="itemIdentifier" />
+    </collection-descriptor>
+    <collection-descriptor name="useTaxItems" proxy="true" element-class-ref="org.kuali.kfs.module.purap.businessobject.PaymentRequestItemUseTax" collection-class="org.apache.ojb.broker.util.collections.ManageableArrayList" auto-retrieve="true" auto-update="object" auto-delete="object">
+        <inverse-foreignkey field-ref="itemIdentifier" />
+    </collection-descriptor>        
+</class-descriptor>
+
+
+<class-descriptor class="org.kuali.kfs.module.purap.businessobject.CreditMemoItem" table="AP_CRDT_MEMO_ITM_T">
+    <field-descriptor name="itemIdentifier" column="CRDT_MEMO_ITM_ID" jdbc-type="INTEGER" primarykey="true" index="true" autoincrement="true" sequence-name="CRDT_MEMO_ITM_ID"/>
+    <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true"/>
+    <field-descriptor name="versionNumber" column="VER_NBR" jdbc-type="BIGINT" locking="true"/>
+    <field-descriptor name="purapDocumentIdentifier" column="CRDT_MEMO_ID" jdbc-type="INTEGER" index="true"/>
+    <field-descriptor name="itemLineNumber" column="ITM_LN_NBR" jdbc-type="INTEGER" index="true"/>
+    <field-descriptor name="itemTypeCode" column="ITM_TYP_CD" jdbc-type="VARCHAR"/>
+    <field-descriptor name="itemQuantity" column="ITM_CRDT_QTY" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion"/>
+    <field-descriptor name="itemUnitPrice" column="ITM_UNT_PRC" jdbc-type="DECIMAL"/>
+    <field-descriptor name="extendedPrice" column="ITM_EXTND_PRC" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion"/>
+    <field-descriptor name="itemAssignedToTradeInIndicator" column="ITM_ASND_TO_TRADE_IN_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <field-descriptor name="itemDescription" column="ITM_DESC" jdbc-type="VARCHAR"/>
+    <field-descriptor name="poInvoicedTotalQuantity" column="PO_INV_TOT_QTY" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion"/>
+    <field-descriptor name="poUnitPrice" column="PO_UNT_PRC" jdbc-type="DECIMAL"/>
+    <field-descriptor name="poTotalAmount" column="PO_EXTND_PRC" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion"/>
+    <field-descriptor name="preqInvoicedTotalQuantity" column="PMT_RQST_INV_TOT_QTY" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion"/>
+    <field-descriptor name="preqUnitPrice" column="PMT_RQST_UNT_PRC" jdbc-type="DECIMAL"/>
+    <field-descriptor name="itemSalesTaxAmount" column="ITM_TAX_AMT" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion"/>
+    <field-descriptor name="preqTotalAmount" column="PMT_RQST_EXTND_PRC" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion"/>
+	<field-descriptor name="capitalAssetTransactionTypeCode" column="CPTL_AST_TRN_TYP_CD" jdbc-type="VARCHAR"/>    
+    <reference-descriptor name="itemType" class-ref="org.kuali.kfs.module.purap.businessobject.ItemType" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="itemTypeCode" />
+    </reference-descriptor>
+    <!-- the account deletion is handled within our buildDeletionAwareLists, setting auto-delete=none as a workaround to Optimistic Locking Exception for now -->
+    <collection-descriptor name="sourceAccountingLines" proxy="true" element-class-ref="org.kuali.kfs.module.purap.businessobject.CreditMemoAccount" collection-class="org.apache.ojb.broker.util.collections.ManageableArrayList" auto-retrieve="true" auto-update="object" auto-delete="none">
+        <orderby name="accountNumber" sort="ASC" />
+        <orderby name="financialObjectCode" sort="ASC" />
+        <inverse-foreignkey field-ref="itemIdentifier" />
+    </collection-descriptor>
+    <collection-descriptor name="useTaxItems" proxy="true" element-class-ref="org.kuali.kfs.module.purap.businessobject.CreditMemoItemUseTax" collection-class="org.apache.ojb.broker.util.collections.ManageableArrayList" auto-retrieve="true" auto-update="object" auto-delete="object">
+        <inverse-foreignkey field-ref="itemIdentifier" />
+    </collection-descriptor>        
+    <reference-descriptor name="purapDocument" class-ref="edu.arizona.kfs.module.purap.document.UaVendorCreditMemoDocument" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="purapDocumentIdentifier" />
+	</reference-descriptor>    
+</class-descriptor>
+
+
 </descriptor-repository>
Index: work/src/edu/arizona/kfs/vnd/businessobject/datadictionary/VendorDetail.xml
===================================================================
--- work/src/edu/arizona/kfs/vnd/businessobject/datadictionary/VendorDetail.xml	(revision 10957)
+++ work/src/edu/arizona/kfs/vnd/businessobject/datadictionary/VendorDetail.xml	(revision 10958)
@@ -14,6 +14,7 @@
 				<ref bean="VendorDetail-tucSalesTaxLicense" />
 				<!-- BEGIN MOD - KITT-1092/MOD-PA7000-01 -->
 				<ref bean="VendorDetail-exportControlsFlag" />
+				<ref bean="VendorDetail-defaultB2BPaymentMethodCode" />
 				<!-- END MOD -->
 			</list>
 		</property>
@@ -22,6 +23,9 @@
 				<dd:relationship objectAttribute="extension">
 					<dd:primitiveAttribute source="vendorHeaderGeneratedIdentifier" target="vendorHeaderGeneratedIdentifier" />
 					<dd:primitiveAttribute source="vendorDetailAssignedIdentifier" target="vendorDetailAssignedIdentifier" />
+					<!-- MOD-PA2000-01 -->
+					<dd:supportAttribute source="extension.defaultB2BPaymentMethodCode" target="defaultB2BPaymentMethodCode" />
+					<!--  END MOD -->
 		            <dd:supportAttribute source="extension.conflictOfInterest" target="conflictOfInterest" /> 
 		            <dd:supportAttribute source="extension.azSalesTaxLicense" target="azSalesTaxLicense" /> 
 		            <dd:supportAttribute source="extension.tucSalesTaxLicense" target="tucSalesTaxLicense" />
@@ -55,7 +59,13 @@
 		parent="VendorDetailExtension-exportControlsFlag"
 		attributeName="extension.exportControlsFlag" />
 	<!-- END MOD -->
-
+    <!-- MOD-PA2000-01 -->
+	<bean id="VendorDetail-defaultB2BPaymentMethodCode" parent="VendorDetail-defaultB2BPaymentMethodCode-parentBean" />
+	<dd:boAttributeRef id="VendorDetail-defaultB2BPaymentMethodCode-parentBean"
+		abstract="true" parent="VendorDetailExtension-defaultB2BPaymentMethodCode"
+		attributeName="extension.defaultB2BPaymentMethodCode" />
+	<!--  END MOD -->
+	
 	<!-- Business Object Inquiry Definition -->
 	<!-- Added Extended Attributes tab after Vendor Header Information -->
 
@@ -111,6 +121,9 @@
 							<bean parent="FieldDefinition" p:attributeName="vendorConfirmationIndicator" />
 							<bean parent="FieldDefinition" p:attributeName="vendorInactiveReasonCode" />
 							<bean parent="FieldDefinition" p:attributeName="extension.conflictOfInterest" />
+							<!-- MOD-PA2000-01 -->
+							<bean parent="FieldDefinition" p:attributeName="extension.defaultB2BPaymentMethodCode" />
+							<!--  END MOD -->
 						</list>
 					</property>
 				</bean>
Index: work/src/edu/arizona/kfs/vnd/businessobject/datadictionary/VendorDetailExtension.xml
===================================================================
--- work/src/edu/arizona/kfs/vnd/businessobject/datadictionary/VendorDetailExtension.xml	(revision 10957)
+++ work/src/edu/arizona/kfs/vnd/businessobject/datadictionary/VendorDetailExtension.xml	(revision 10958)
@@ -22,6 +22,9 @@
 				<!-- BEGIN MOD - KITT-1092/MOD-PA7000-01 -->
 				<ref bean="VendorDetailExtension-exportControlsFlag" />
 				<!-- END MOD -->
+				<!-- MOD-PA2000-01 -->
+				<ref bean="VendorDetailExtension-defaultB2BPaymentMethodCode" />
+				<!--  END MOD -->
 			</list>
 		</property>
 	</bean>
@@ -80,6 +83,16 @@
 		<property name="shortLabel" value="Exp. Ctl." />
 	</bean>
 	<!-- END MOD -->
+	<!-- MOD-PA2000-01 -->
+	<bean id="VendorDetailExtension-defaultB2BPaymentMethodCode" parent="VendorDetailExtension-defaultB2BPaymentMethodCode-parentBean" />
+	<bean id="VendorDetailExtension-defaultB2BPaymentMethodCode-parentBean" abstract="true"
+		parent="PaymentMethod-paymentMethodCode">
+		<property name="name" value="defaultB2BPaymentMethodCode" />
+		<property name="label" value="Default B2B Payment Method" />
+		<property name="shortLabel" value="Dflt B2B Pmt Mthd" />
+		<property name="control" ref="PaymentMethodsForVendorSelectControl" />
+	</bean>
+	<!--  END MOD -->
 
 	<bean id="VendorDetailExtension-versionNumber" parent="AttributeReferenceDummy-versionNumber-parentBean" />
 
Index: work/src/edu/arizona/kfs/vnd/businessobject/VendorDetailExtension.java
===================================================================
--- work/src/edu/arizona/kfs/vnd/businessobject/VendorDetailExtension.java	(revision 10957)
+++ work/src/edu/arizona/kfs/vnd/businessobject/VendorDetailExtension.java	(revision 10958)
@@ -40,6 +40,9 @@
     // BEGIN MOD - KITT-1092/MOD-PA7000-01
     private boolean     exportControlsFlag;
     // END MOD
+    // MOD-PA2000-01
+    protected String    defaultB2BPaymentMethodCode;
+    // END MOD
 
     /**
      * @return vendorHeaderGeneratedIdentifier
@@ -126,6 +129,9 @@
                     // BEGIN MOD - KITT-1092/MOD-PA7000-01
                     .append(isExportControlsFlag(), extension.isExportControlsFlag())
                     // END MOD
+                    // MOD-PA2000-01
+                    .append(getDefaultB2BPaymentMethodCode(), extension.getDefaultB2BPaymentMethodCode())
+                    // END MOD
                     .isEquals();
         }        
     }
@@ -146,5 +152,13 @@
     public void setExportControlsFlag(boolean exportControlsFlag) {
         this.exportControlsFlag = exportControlsFlag;
     }
+    // MOD-PA2000-01
+    public String getDefaultB2BPaymentMethodCode() {
+        return defaultB2BPaymentMethodCode;
+    }
+
+    public void setDefaultB2BPaymentMethodCode(String defaultB2BPaymentMethodCode) {
+        this.defaultB2BPaymentMethodCode = defaultB2BPaymentMethodCode;
+    }
     // END MOD
 }
Index: work/src/edu/arizona/kfs/vnd/document/datadictionary/VendorMaintenanceDocument.xml
===================================================================
--- work/src/edu/arizona/kfs/vnd/document/datadictionary/VendorMaintenanceDocument.xml	(revision 10957)
+++ work/src/edu/arizona/kfs/vnd/document/datadictionary/VendorMaintenanceDocument.xml	(revision 10958)
@@ -20,6 +20,9 @@
 		<property name="maintainableItems">
 			<list merge="true">
 				<bean parent="MaintainableFieldDefinition" p:name="extension.conflictOfInterest" p:required="true"/>
+				<!-- MOD-PA2000-01 -->
+				<bean parent="MaintainableFieldDefinition" p:name="extension.defaultB2BPaymentMethodCode" p:required="true" />
+				<!--  END MOD -->
 			</list>
 		</property>
 	</bean>
Index: work/src/edu/arizona/kfs/vnd/ojb-vnd.xml
===================================================================
--- work/src/edu/arizona/kfs/vnd/ojb-vnd.xml	(revision 10957)
+++ work/src/edu/arizona/kfs/vnd/ojb-vnd.xml	(revision 10958)
@@ -12,6 +12,9 @@
     <!--  BEGIN MOD - KITT-1092/MOD-PA7000-01 -->
     <field-descriptor name="exportControlsFlag" column="EXPORT_CONTROLS_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
     <!-- END MOD -->
+    <!--  MOD-PA2000-01 -->
+    <field-descriptor name="defaultB2BPaymentMethodCode" column="DFLT_B2B_PMT_MTHD_CD" jdbc-type="VARCHAR" />
+    <!--  END MOD -->
 </class-descriptor>
 
 
