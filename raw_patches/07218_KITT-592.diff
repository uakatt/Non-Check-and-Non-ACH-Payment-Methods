Index: financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/fp/document/service/DisbursementVoucherTravelServiceTest.java
===================================================================
--- financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/fp/document/service/DisbursementVoucherTravelServiceTest.java	(revision 7217)
+++ financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/fp/document/service/DisbursementVoucherTravelServiceTest.java	(revision 7218)
@@ -21,6 +21,7 @@
 import org.kuali.kfs.sys.ConfigureContext;
 import org.kuali.kfs.sys.context.KualiTestBase;
 import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kns.service.DataDictionaryService;
 import org.kuali.rice.kns.service.DateTimeService;
 import org.kuali.rice.kns.util.KualiDecimal;
 
@@ -37,7 +38,7 @@
      * @throws Exception
      */
     public void testCalculatePerDiem() throws Exception {
-        dvDocument = new DisbursementVoucherDocument();
+        dvDocument = (DisbursementVoucherDocument) SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName("DV").newInstance();
         dvDocument.getDvNonEmployeeTravel().setPerDiemStartDateTime("04/21/2006 12:00 AM");
         dvDocument.getDvNonEmployeeTravel().setPerDiemEndDateTime("04/22/2006 12:01 AM");
         runPerDiemTest(dvDocument.getDvNonEmployeeTravel().getDvPerdiemStartDttmStamp(), dvDocument.getDvNonEmployeeTravel().getDvPerdiemEndDttmStamp(), new KualiDecimal(10), new KualiDecimal(12.50));
Index: financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/fp/document/service/DisbursementVoucherTaxServiceTest.java
===================================================================
--- financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/fp/document/service/DisbursementVoucherTaxServiceTest.java	(revision 7217)
+++ financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/fp/document/service/DisbursementVoucherTaxServiceTest.java	(revision 7218)
@@ -25,6 +25,7 @@
 import org.kuali.kfs.sys.businessobject.SourceAccountingLine;
 import org.kuali.kfs.sys.context.KualiTestBase;
 import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kns.service.DataDictionaryService;
 import org.kuali.rice.kns.util.GlobalVariables;
 import org.kuali.rice.kns.util.KualiDecimal;
 
@@ -38,7 +39,7 @@
     @Override
     protected void setUp() throws Exception {
         super.setUp();
-        dvDocument = new DisbursementVoucherDocument();
+        dvDocument = (DisbursementVoucherDocument) SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName("DV").newInstance();
         dvDocument.setDvPayeeDetail(new DisbursementVoucherPayeeDetail());
         dvDocument.setDvNonResidentAlienTax(new DisbursementVoucherNonResidentAlienTax());
         dvDocument.getDvPayeeDetail().setDisbVchrAlienPaymentCode(true);
Index: financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/cab/fixture/PaymentRequestDocumentFixture.java
===================================================================
--- financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/cab/fixture/PaymentRequestDocumentFixture.java	(revision 7217)
+++ financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/cab/fixture/PaymentRequestDocumentFixture.java	(revision 7218)
@@ -18,10 +18,12 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.kuali.kfs.module.purap.PurapConstants;
 import org.kuali.kfs.module.purap.document.PaymentRequestDocument;
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.rice.kns.bo.PersistableBusinessObjectBase;
 import org.kuali.rice.kns.service.BusinessObjectService;
+import org.kuali.rice.kns.service.DataDictionaryService;
 import org.kuali.rice.kns.service.DateTimeService;
 import org.kuali.rice.kns.util.KualiDecimal;
 
@@ -31,7 +33,13 @@
 
         @Override
         public PaymentRequestDocument newRecord() {
-            PaymentRequestDocument obj = new PaymentRequestDocument();
+            PaymentRequestDocument obj = null;
+            try {
+                obj = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+            }
+            catch (Exception ex) {
+                ex.printStackTrace();
+            }
             java.sql.Timestamp timeStamp = new java.sql.Timestamp(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             java.sql.Date date = new java.sql.Date(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             obj.setPurapDocumentIdentifier(311);
@@ -80,7 +88,13 @@
 
         @Override
         public PaymentRequestDocument newRecord() {
-            PaymentRequestDocument obj = new PaymentRequestDocument();
+            PaymentRequestDocument obj = null;
+            try {
+                obj = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+            }
+            catch (Exception ex) {
+                ex.printStackTrace();
+            }
             java.sql.Timestamp timeStamp = new java.sql.Timestamp(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             java.sql.Date date = new java.sql.Date(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             obj.setPurapDocumentIdentifier(321);
@@ -129,7 +143,13 @@
 
         @Override
         public PaymentRequestDocument newRecord() {
-            PaymentRequestDocument obj = new PaymentRequestDocument();
+            PaymentRequestDocument obj = null;
+            try {
+                obj = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+            }
+            catch (Exception ex) {
+                ex.printStackTrace();
+            }
             java.sql.Timestamp timeStamp = new java.sql.Timestamp(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             java.sql.Date date = new java.sql.Date(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             obj.setPurapDocumentIdentifier(331);
@@ -178,7 +198,13 @@
 
         @Override
         public PaymentRequestDocument newRecord() {
-            PaymentRequestDocument obj = new PaymentRequestDocument();
+            PaymentRequestDocument obj = null;
+            try {
+                obj = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+            }
+            catch (Exception ex) {
+                ex.printStackTrace();
+            }
             java.sql.Timestamp timeStamp = new java.sql.Timestamp(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             java.sql.Date date = new java.sql.Date(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             obj.setPurapDocumentIdentifier(341);
@@ -227,7 +253,13 @@
 
         @Override
         public PaymentRequestDocument newRecord() {
-            PaymentRequestDocument obj = new PaymentRequestDocument();
+            PaymentRequestDocument obj = null;
+            try {
+                obj = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+            }
+            catch (Exception ex) {
+                ex.printStackTrace();
+            }
             java.sql.Timestamp timeStamp = new java.sql.Timestamp(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             java.sql.Date date = new java.sql.Date(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             obj.setPurapDocumentIdentifier(351);
@@ -276,7 +308,13 @@
 
         @Override
         public PaymentRequestDocument newRecord() {
-            PaymentRequestDocument obj = new PaymentRequestDocument();
+            PaymentRequestDocument obj = null;
+            try {
+                obj = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+            }
+            catch (Exception ex) {
+                ex.printStackTrace();
+            }
             java.sql.Timestamp timeStamp = new java.sql.Timestamp(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             java.sql.Date date = new java.sql.Date(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             obj.setPurapDocumentIdentifier(361);
Index: financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/util/TestPaymentRequestPayDateNotPastValidation.java
===================================================================
--- financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/util/TestPaymentRequestPayDateNotPastValidation.java	(revision 7217)
+++ financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/util/TestPaymentRequestPayDateNotPastValidation.java	(revision 7218)
@@ -17,9 +17,12 @@
 
 import java.sql.Date;
 
+import org.kuali.kfs.module.purap.PurapConstants;
 import org.kuali.kfs.module.purap.document.PaymentRequestDocument;
 import org.kuali.kfs.module.purap.document.validation.impl.PaymentRequestPayDateNotPastValidation;
 import org.kuali.kfs.module.purap.fixture.PaymentRequestInvoiceTabFixture;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kns.service.DataDictionaryService;
 
 public class TestPaymentRequestPayDateNotPastValidation extends PaymentRequestPayDateNotPastValidation {
 
@@ -27,7 +30,13 @@
     
     @Override
     protected PaymentRequestDocument retrievePaymentRequestDocumentFromDatabase(PaymentRequestDocument document) {
-        PaymentRequestDocument temp = new PaymentRequestDocument();
+        PaymentRequestDocument temp = null;
+        try {
+            temp = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+        }
+        catch (Exception ex) {
+            ex.printStackTrace();
+        }
         PaymentRequestInvoiceTabFixture.WITH_POID_WITH_DATE_WITH_NUMBER_WITH_AMOUNT.populate(temp);
         temp.setPaymentRequestPayDate(testDate);
         return temp;
Index: financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/document/validation/impl/PaymentRequestDocumentRuleTest.java
===================================================================
--- financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/document/validation/impl/PaymentRequestDocumentRuleTest.java	(revision 7217)
+++ financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/document/validation/impl/PaymentRequestDocumentRuleTest.java	(revision 7218)
@@ -41,6 +41,7 @@
 import org.kuali.kfs.sys.suite.RelatesTo.JiraIssue;
 import org.kuali.rice.kew.exception.WorkflowException;
 import org.kuali.rice.kim.bo.Person;
+import org.kuali.rice.kns.service.DataDictionaryService;
 import org.kuali.rice.kns.service.DateTimeService;
 import org.kuali.rice.kns.service.DocumentService;
 import org.kuali.rice.kns.util.ErrorMessage;
@@ -59,7 +60,12 @@
     @Override
     protected void setUp() throws Exception {
         super.setUp();
-        preq = new PaymentRequestDocument();
+        try {
+            preq = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+        }
+        catch (Exception ex) {
+            ex.printStackTrace();
+        }
         validations = SpringContext.getBeansOfType(GenericValidation.class);    
     }
 
Index: financial-system/kfs/trunk/work/src/org/kuali/kfs/fp/dataaccess/impl/DisbursementVoucherDaoOjb.java
===================================================================
--- financial-system/kfs/trunk/work/src/org/kuali/kfs/fp/dataaccess/impl/DisbursementVoucherDaoOjb.java	(revision 7217)
+++ financial-system/kfs/trunk/work/src/org/kuali/kfs/fp/dataaccess/impl/DisbursementVoucherDaoOjb.java	(revision 7218)
@@ -22,9 +22,9 @@
 import org.kuali.kfs.fp.dataaccess.DisbursementVoucherDao;
 import org.kuali.kfs.fp.document.DisbursementVoucherConstants;
 import org.kuali.kfs.fp.document.DisbursementVoucherDocument;
-import org.kuali.rice.kim.bo.Person;
-import org.kuali.kfs.vnd.businessobject.VendorDetail;
+import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.rice.kns.dao.impl.PlatformAwareDaoBaseOjb;
+import org.kuali.rice.kns.service.DataDictionaryService;
 
 public class DisbursementVoucherDaoOjb extends PlatformAwareDaoBaseOjb implements DisbursementVoucherDao {
     private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(DisbursementVoucherDaoOjb.class);
@@ -44,12 +44,13 @@
         Criteria criteria = new Criteria();
         criteria.addEqualTo("documentNumber", fdocNbr);
 
-        return (DisbursementVoucherDocument) getPersistenceBrokerTemplate().getObjectByQuery(new QueryByCriteria(DisbursementVoucherDocument.class, criteria));
+        return (DisbursementVoucherDocument) getPersistenceBrokerTemplate().getObjectByQuery(new QueryByCriteria(getDisbursementVoucherDocumentClass(), criteria));
     }
 
     /**
      * @see org.kuali.kfs.fp.dataaccess.DisbursementVoucherDao#getDocumentsByHeaderStatus(java.lang.String)
      */
+    @SuppressWarnings("unchecked")
     public Collection getDocumentsByHeaderStatus(String statusCode) {
         LOG.debug("getDocumentsByHeaderStatus() started");
 
@@ -57,7 +58,12 @@
         criteria.addEqualTo("documentHeader.financialDocumentStatusCode", statusCode);
         criteria.addEqualTo("disbVchrPaymentMethodCode", DisbursementVoucherConstants.PAYMENT_METHOD_CHECK);
 
-        return getPersistenceBrokerTemplate().getCollectionByQuery(new QueryByCriteria(DisbursementVoucherDocument.class, criteria));
+        return getPersistenceBrokerTemplate().getCollectionByQuery(new QueryByCriteria(getDisbursementVoucherDocumentClass(), criteria));
     }
+    
+    @SuppressWarnings("unchecked")
+    protected Class getDisbursementVoucherDocumentClass() {
+        return SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName("DV");
+    }
 }
 
Index: financial-system/kfs/trunk/work/src/edu/arizona/kfs/fp/document/web/struts/DisbursementVoucherForm.java
===================================================================
--- financial-system/kfs/trunk/work/src/edu/arizona/kfs/fp/document/web/struts/DisbursementVoucherForm.java	(revision 7217)
+++ financial-system/kfs/trunk/work/src/edu/arizona/kfs/fp/document/web/struts/DisbursementVoucherForm.java	(revision 7218)
@@ -16,7 +16,10 @@
 package edu.arizona.kfs.fp.document.web.struts;
 
 import org.kuali.kfs.fp.document.DisbursementVoucherDocument;
+import org.kuali.kfs.module.purap.PurapConstants;
+import org.kuali.kfs.module.purap.document.PaymentRequestDocument;
 import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kns.service.DataDictionaryService;
 import org.kuali.rice.kns.service.ParameterService;
 import org.kuali.rice.kns.web.format.SimpleBooleanFormatter;
 
@@ -32,7 +35,12 @@
      */
     public DisbursementVoucherForm() {
         super();
-        setDocument(new DisbursementVoucherDocument());
+        try {
+            setDocument( (DisbursementVoucherDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(getDocTypeName()).newInstance() );
+        }
+        catch (Exception ex) {
+            ex.printStackTrace();
+        }
     }
 
     /**
