Index: financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/fp/document/service/DisbursementVoucherTravelServiceTest.java
===================================================================
--- financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/fp/document/service/DisbursementVoucherTravelServiceTest.java	(revision 10959)
+++ financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/fp/document/service/DisbursementVoucherTravelServiceTest.java	(revision 10960)
@@ -21,6 +21,7 @@
 import org.kuali.kfs.sys.ConfigureContext;
 import org.kuali.kfs.sys.context.KualiTestBase;
 import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kns.service.DataDictionaryService;
 import org.kuali.rice.kns.service.DateTimeService;
 import org.kuali.rice.kns.util.KualiDecimal;
 
@@ -37,7 +38,7 @@
      * @throws Exception
      */
     public void testCalculatePerDiem() throws Exception {
-        dvDocument = new DisbursementVoucherDocument();
+        dvDocument = (DisbursementVoucherDocument) SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName("DV").newInstance();
         dvDocument.getDvNonEmployeeTravel().setPerDiemStartDateTime("04/21/2006 12:00 AM");
         dvDocument.getDvNonEmployeeTravel().setPerDiemEndDateTime("04/22/2006 12:01 AM");
         runPerDiemTest(dvDocument.getDvNonEmployeeTravel().getDvPerdiemStartDttmStamp(), dvDocument.getDvNonEmployeeTravel().getDvPerdiemEndDttmStamp(), new KualiDecimal(10), new KualiDecimal(12.50));
Index: financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/fp/document/service/DisbursementVoucherTaxServiceTest.java
===================================================================
--- financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/fp/document/service/DisbursementVoucherTaxServiceTest.java	(revision 10959)
+++ financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/fp/document/service/DisbursementVoucherTaxServiceTest.java	(revision 10960)
@@ -25,6 +25,7 @@
 import org.kuali.kfs.sys.businessobject.SourceAccountingLine;
 import org.kuali.kfs.sys.context.KualiTestBase;
 import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kns.service.DataDictionaryService;
 import org.kuali.rice.kns.util.GlobalVariables;
 import org.kuali.rice.kns.util.KualiDecimal;
 
@@ -38,7 +39,7 @@
     @Override
     protected void setUp() throws Exception {
         super.setUp();
-        dvDocument = new DisbursementVoucherDocument();
+        dvDocument = (DisbursementVoucherDocument) SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName("DV").newInstance();
         dvDocument.setDvPayeeDetail(new DisbursementVoucherPayeeDetail());
         dvDocument.setDvNonResidentAlienTax(new DisbursementVoucherNonResidentAlienTax());
         dvDocument.getDvPayeeDetail().setDisbVchrAlienPaymentCode(true);
Index: financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/cab/fixture/PaymentRequestDocumentFixture.java
===================================================================
--- financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/cab/fixture/PaymentRequestDocumentFixture.java	(revision 10959)
+++ financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/cab/fixture/PaymentRequestDocumentFixture.java	(revision 10960)
@@ -18,10 +18,12 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.kuali.kfs.module.purap.PurapConstants;
 import org.kuali.kfs.module.purap.document.PaymentRequestDocument;
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.rice.kns.bo.PersistableBusinessObjectBase;
 import org.kuali.rice.kns.service.BusinessObjectService;
+import org.kuali.rice.kns.service.DataDictionaryService;
 import org.kuali.rice.kns.service.DateTimeService;
 import org.kuali.rice.kns.util.KualiDecimal;
 
@@ -31,7 +33,13 @@
 
         @Override
         public PaymentRequestDocument newRecord() {
-            PaymentRequestDocument obj = new PaymentRequestDocument();
+            PaymentRequestDocument obj = null;
+            try {
+                obj = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+            }
+            catch (Exception ex) {
+                ex.printStackTrace();
+            }
             java.sql.Timestamp timeStamp = new java.sql.Timestamp(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             java.sql.Date date = new java.sql.Date(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             obj.setPurapDocumentIdentifier(311);
@@ -80,7 +88,13 @@
 
         @Override
         public PaymentRequestDocument newRecord() {
-            PaymentRequestDocument obj = new PaymentRequestDocument();
+            PaymentRequestDocument obj = null;
+            try {
+                obj = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+            }
+            catch (Exception ex) {
+                ex.printStackTrace();
+            }
             java.sql.Timestamp timeStamp = new java.sql.Timestamp(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             java.sql.Date date = new java.sql.Date(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             obj.setPurapDocumentIdentifier(321);
@@ -129,7 +143,13 @@
 
         @Override
         public PaymentRequestDocument newRecord() {
-            PaymentRequestDocument obj = new PaymentRequestDocument();
+            PaymentRequestDocument obj = null;
+            try {
+                obj = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+            }
+            catch (Exception ex) {
+                ex.printStackTrace();
+            }
             java.sql.Timestamp timeStamp = new java.sql.Timestamp(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             java.sql.Date date = new java.sql.Date(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             obj.setPurapDocumentIdentifier(331);
@@ -178,7 +198,13 @@
 
         @Override
         public PaymentRequestDocument newRecord() {
-            PaymentRequestDocument obj = new PaymentRequestDocument();
+            PaymentRequestDocument obj = null;
+            try {
+                obj = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+            }
+            catch (Exception ex) {
+                ex.printStackTrace();
+            }
             java.sql.Timestamp timeStamp = new java.sql.Timestamp(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             java.sql.Date date = new java.sql.Date(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             obj.setPurapDocumentIdentifier(341);
@@ -227,7 +253,13 @@
 
         @Override
         public PaymentRequestDocument newRecord() {
-            PaymentRequestDocument obj = new PaymentRequestDocument();
+            PaymentRequestDocument obj = null;
+            try {
+                obj = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+            }
+            catch (Exception ex) {
+                ex.printStackTrace();
+            }
             java.sql.Timestamp timeStamp = new java.sql.Timestamp(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             java.sql.Date date = new java.sql.Date(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             obj.setPurapDocumentIdentifier(351);
@@ -276,7 +308,13 @@
 
         @Override
         public PaymentRequestDocument newRecord() {
-            PaymentRequestDocument obj = new PaymentRequestDocument();
+            PaymentRequestDocument obj = null;
+            try {
+                obj = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+            }
+            catch (Exception ex) {
+                ex.printStackTrace();
+            }
             java.sql.Timestamp timeStamp = new java.sql.Timestamp(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             java.sql.Date date = new java.sql.Date(SpringContext.getBean(DateTimeService.class).getCurrentDate().getTime());
             obj.setPurapDocumentIdentifier(361);
Index: financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/service/ElectronicInvoiceHelperServiceTest.java
===================================================================
--- financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/service/ElectronicInvoiceHelperServiceTest.java	(revision 10959)
+++ financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/service/ElectronicInvoiceHelperServiceTest.java	(revision 10960)
@@ -49,8 +49,10 @@
 import org.kuali.kfs.sys.suite.RelatesTo.JiraIssue;
 import org.kuali.kfs.vnd.businessobject.VendorDetail;
 import org.kuali.kfs.vnd.document.service.VendorService;
+import org.kuali.rice.kns.UserSession;
 import org.kuali.rice.kns.service.DocumentService;
 import org.kuali.rice.kns.service.ParameterService;
+import org.kuali.rice.kns.util.GlobalVariables;
 import org.kuali.rice.kns.util.Guid;
 
 @ConfigureContext
@@ -85,7 +87,7 @@
      * TODO: Fix this test. It should not have a hard-coded URL for finding the schema.
      */
     @ConfigureContext(session = kfs, shouldCommitTransactions=true)
-    public void PATCHFIX_testRejectDocumentCreationInvalidData()
+    public void XXX_testRejectDocumentCreationInvalidData()
     throws Exception{
         
         String rejectFile = "reject.xml";
@@ -99,10 +101,10 @@
         //If we use the schemaLocation with DEV url and not running Tomcat locally, this test is going to fail, because
         //it won't be able to find the electronicInvoice.xsd unless Tomcat is running locally.
         //Therefore, for unit test purpose, let's set the schemaLocation to CNV url.
-        String schemaLocation = electronicInvoiceInputFileType.getSchemaLocation();
-        int beginIndex = schemaLocation.indexOf("static");
-        String newSchemaLocation = "https://test.kuali.org/kfs-reg/" + schemaLocation.substring(beginIndex);
-        electronicInvoiceInputFileType.setSchemaLocation(newSchemaLocation);
+//        String schemaLocation = electronicInvoiceInputFileType.getSchemaLocation();
+//        int beginIndex = schemaLocation.indexOf("static");
+//        String newSchemaLocation = "https://test.kuali.org/kfs-reg/" + schemaLocation.substring(beginIndex);
+//        electronicInvoiceInputFileType.setSchemaLocation(newSchemaLocation);
         
         ElectronicInvoiceLoad load = SpringContext.getBean(ElectronicInvoiceHelperService.class).loadElectronicInvoices();
 
@@ -122,7 +124,7 @@
      * TODO: Fix this test. It should not have a hard-coded URL for finding the schema.
      */
     @ConfigureContext(session = kfs, shouldCommitTransactions=true)
-    public void PATCHFIX_testRejectDocumentCreationCorruptXML()
+    public void XXX_testRejectDocumentCreationCorruptXML()
     throws Exception{
         
         String corruptFile = "corrupt.xml";
@@ -153,32 +155,35 @@
      * TODO: Fix this test. It should not have a hard-coded URL for finding the schema.
      */
     @ConfigureContext(session = kfs, shouldCommitTransactions=false)
-    public void PATCHFIX_testPaymentRequestDocumentCreation()
+    public void testPaymentRequestDocumentCreation()
     throws Exception{
         
         String acceptFile = "accept.xml";
         
-        changeCurrentUser(khuntley);
-        RequisitionDocument reqDoc = RequisitionDocumentFixture.REQ_ONLY_REQUIRED_FIELDS.createRequisitionDocument();
-        AccountingDocumentTestUtils.testRouteDocument(reqDoc, SpringContext.getBean(DocumentService.class));
-        Integer reqId = reqDoc.getPurapDocumentIdentifier();
-
-        changeCurrentUser(kfs);
-        PurchaseOrderDocument poDocument = createPODoc(reqId);
+//        changeCurrentUser(khuntley);
+//        GlobalVariables.setUserSession(new UserSession("kfs-test-sys1"));
+//        RequisitionDocument reqDoc = RequisitionDocumentFixture.REQ_ONLY_REQUIRED_FIELDS.createRequisitionDocument();
+//        AccountingDocumentTestUtils.testRouteDocument(reqDoc, SpringContext.getBean(DocumentService.class));
+//        Integer reqId = reqDoc.getPurapDocumentIdentifier();
+//
+//        changeCurrentUser(kfs);
+//        PurchaseOrderDocument poDocument = createPODoc(reqId);
+//        
+//        String vendorDUNS = RandomUtils.nextInt() + "";
+//        if (StringUtils.isEmpty(poDocument.getVendorDetail().getVendorDunsNumber())){
+//            VendorDetail vd = SpringContext.getBean(VendorService.class).getByVendorNumber(poDocument.getVendorNumber());
+//            vd.setVendorDunsNumber(vendorDUNS);
+//            SpringContext.getBean(VendorService.class).saveVendorHeader(vd);
+//        }else{
+//            vendorDUNS = poDocument.getVendorDetail().getVendorDunsNumber();
+//        }
+//        
+//        String poNumber = poDocument.getPurapDocumentIdentifier().toString();
+//        createItemMappingsRecords(poDocument.getVendorHeaderGeneratedIdentifier()+"", poDocument.getVendorDetailAssignedIdentifier()+"");
+//        updateUnitPriceVariance();
         
-        String vendorDUNS = RandomUtils.nextInt() + "";
-        if (StringUtils.isEmpty(poDocument.getVendorDetail().getVendorDunsNumber())){
-            VendorDetail vd = SpringContext.getBean(VendorService.class).getByVendorNumber(poDocument.getVendorNumber());
-            vd.setVendorDunsNumber(vendorDUNS);
-            SpringContext.getBean(VendorService.class).saveVendorHeader(vd);
-        }else{
-            vendorDUNS = poDocument.getVendorDetail().getVendorDunsNumber();
-        }
-        
-        String poNumber = poDocument.getPurapDocumentIdentifier().toString();
-        createItemMappingsRecords(poDocument.getVendorHeaderGeneratedIdentifier()+"", poDocument.getVendorDetailAssignedIdentifier()+"");
-        updateUnitPriceVariance();
-        
+        String vendorDUNS="0001236545";
+        String poNumber = "";
         String xmlChunk = ElectronicInvoiceHelperServiceFixture.getCXMLForPaymentDocCreation(vendorDUNS,poNumber);
         writeXMLFile(xmlChunk, acceptFile);
         
Index: financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/fixture/ElectronicInvoiceHelperServiceFixture.java
===================================================================
--- financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/fixture/ElectronicInvoiceHelperServiceFixture.java	(revision 10959)
+++ financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/fixture/ElectronicInvoiceHelperServiceFixture.java	(revision 10960)
@@ -104,7 +104,7 @@
         
         request.append("<Request deploymentMode=\"production\">");
         request.append("<InvoiceDetailRequest>");
-        request.append("<InvoiceDetailRequestHeader invoiceID=\"LDR3496\" purpose=\"standard\" invoiceDate=" + getCXMLDate(true) +">");
+        request.append("<InvoiceDetailRequestHeader invoiceID=\"LDR3496\" purpose=\"standard\" invoiceDate=" + getCXMLDate(true) +" paymentMethodCode=\"F\">");
         request.append("<InvoiceDetailHeaderIndicator/>");
         request.append("<InvoiceDetailLineIndicator/>");
         request.append("<InvoicePartner>");
Index: financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/util/TestPaymentRequestPayDateNotPastValidation.java
===================================================================
--- financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/util/TestPaymentRequestPayDateNotPastValidation.java	(revision 10959)
+++ financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/util/TestPaymentRequestPayDateNotPastValidation.java	(revision 10960)
@@ -17,9 +17,12 @@
 
 import java.sql.Date;
 
+import org.kuali.kfs.module.purap.PurapConstants;
 import org.kuali.kfs.module.purap.document.PaymentRequestDocument;
 import org.kuali.kfs.module.purap.document.validation.impl.PaymentRequestPayDateNotPastValidation;
 import org.kuali.kfs.module.purap.fixture.PaymentRequestInvoiceTabFixture;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kns.service.DataDictionaryService;
 
 public class TestPaymentRequestPayDateNotPastValidation extends PaymentRequestPayDateNotPastValidation {
 
@@ -27,7 +30,13 @@
     
     @Override
     protected PaymentRequestDocument retrievePaymentRequestDocumentFromDatabase(PaymentRequestDocument document) {
-        PaymentRequestDocument temp = new PaymentRequestDocument();
+        PaymentRequestDocument temp = null;
+        try {
+            temp = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+        }
+        catch (Exception ex) {
+            ex.printStackTrace();
+        }
         PaymentRequestInvoiceTabFixture.WITH_POID_WITH_DATE_WITH_NUMBER_WITH_AMOUNT.populate(temp);
         temp.setPaymentRequestPayDate(testDate);
         return temp;
Index: financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/document/validation/impl/PaymentRequestDocumentRuleTest.java
===================================================================
--- financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/document/validation/impl/PaymentRequestDocumentRuleTest.java	(revision 10959)
+++ financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/module/purap/document/validation/impl/PaymentRequestDocumentRuleTest.java	(revision 10960)
@@ -41,6 +41,7 @@
 import org.kuali.kfs.sys.suite.RelatesTo.JiraIssue;
 import org.kuali.rice.kew.exception.WorkflowException;
 import org.kuali.rice.kim.bo.Person;
+import org.kuali.rice.kns.service.DataDictionaryService;
 import org.kuali.rice.kns.service.DateTimeService;
 import org.kuali.rice.kns.service.DocumentService;
 import org.kuali.rice.kns.util.ErrorMessage;
@@ -59,7 +60,12 @@
     @Override
     protected void setUp() throws Exception {
         super.setUp();
-        preq = new PaymentRequestDocument();
+        try {
+            preq = (PaymentRequestDocument)SpringContext.getBean(DataDictionaryService.class).getDocumentClassByTypeName(PurapConstants.PurapDocTypeCodes.PAYMENT_REQUEST_DOCUMENT).newInstance();
+        }
+        catch (Exception ex) {
+            ex.printStackTrace();
+        }
         validations = SpringContext.getBeansOfType(GenericValidation.class);    
     }
 
Index: financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/sys/dataaccess/impl/UnitTestSqlDaoOjb.java
===================================================================
--- financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/sys/dataaccess/impl/UnitTestSqlDaoOjb.java	(revision 10959)
+++ financial-system/kfs/trunk/test/unit/src/org/kuali/kfs/sys/dataaccess/impl/UnitTestSqlDaoOjb.java	(revision 10960)
@@ -43,7 +43,7 @@
         Statement stmt = null;
 
         try {
-            Connection c = getPersistenceBroker(false).serviceConnectionManager().getConnection();
+            Connection c = getPersistenceBroker(true).serviceConnectionManager().getConnection();
             stmt = c.createStatement();
             return stmt.executeUpdate(sql);
         }
@@ -73,7 +73,7 @@
         Statement stmt = null;
 
         try {
-            Connection c = getPersistenceBroker(false).serviceConnectionManager().getConnection();
+            Connection c = getPersistenceBroker(true).serviceConnectionManager().getConnection();
             stmt = c.createStatement();
 
             ResultSet rs = stmt.executeQuery(sql);
Index: financial-system/kfs/trunk/test/integration/src/org/kuali/kfs/fp/document/DisbursementVoucherDocumentTest.java
===================================================================
--- financial-system/kfs/trunk/test/integration/src/org/kuali/kfs/fp/document/DisbursementVoucherDocumentTest.java	(revision 10959)
+++ financial-system/kfs/trunk/test/integration/src/org/kuali/kfs/fp/document/DisbursementVoucherDocumentTest.java	(revision 10960)
@@ -193,7 +193,9 @@
         // payee detail
         document.setDvPayeeDetail(payeeDetail);
         // payment info
-        document.setDisbVchrPaymentMethodCode("P");
+        // MOD-PA2000-01 - changed from P to A to match new UA data
+        document.setDisbVchrPaymentMethodCode("A");
+        // END MOD
         document.setDisbursementVoucherDueDate(Date.valueOf("2010-01-24"));
         document.setDisbursementVoucherDocumentationLocationCode("F");
         // contact information
